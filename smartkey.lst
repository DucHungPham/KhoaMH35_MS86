

HI-TECH Software PIC PRO Macro Assembler V9.83 build 10920 
                                                                                               Sat May 16 09:20:25 2020

HI-TECH Software Omniscient Code Generator (PRO mode) build 10920
     1                           	processor	16F685
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	inittext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,delta=2
    13                           	psect	swtext1,local,class=CONST,delta=2
    14                           	psect	text560,local,class=CODE,delta=2
    15                           	psect	text561,local,class=CODE,delta=2
    16                           	psect	text562,local,class=CODE,delta=2
    17                           	psect	text563,local,class=CODE,delta=2
    18                           	psect	text564,local,class=CODE,delta=2
    19                           	psect	text565,local,class=CODE,delta=2
    20                           	psect	text566,local,class=CODE,delta=2
    21                           	psect	text567,local,class=CODE,delta=2
    22                           	psect	text568,local,class=CODE,delta=2
    23                           	psect	text569,local,class=CODE,delta=2
    24                           	psect	text570,local,class=CODE,delta=2
    25                           	psect	text571,local,class=CODE,delta=2
    26                           	psect	text572,local,class=CODE,delta=2
    27                           	psect	text573,local,class=CODE,delta=2
    28                           	psect	text574,local,class=CODE,delta=2
    29                           	psect	text575,local,class=CODE,delta=2
    30                           	psect	text576,local,class=CODE,delta=2
    31                           	psect	text577,local,class=CODE,delta=2
    32                           	psect	text578,local,class=CODE,delta=2
    33                           	psect	text579,local,class=CODE,delta=2
    34                           	psect	text580,local,class=CODE,delta=2
    35                           	psect	text581,local,class=CODE,delta=2
    36                           	psect	text582,local,class=CODE,delta=2
    37                           	psect	text583,local,class=CODE,delta=2
    38                           	psect	text584,local,class=CODE,delta=2
    39                           	psect	intentry,global,class=CODE,delta=2
    40                           	psect	text585,local,class=CODE,delta=2
    41                           	psect	pa_nodes,global,class=CODE,delta=2
    42                           	dabs	1,0x11E,1
    43                           	dabs	1,0x11F,1
    44                           	dabs	1,0x119,1
    45                           	dabs	1,0x11A,1
    46                           	dabs	1,0x11B,1
    47                           	dabs	1,0x10F,1
    48                           	dabs	1,0x10E,1
    49                           	dabs	1,0x116,1
    50                           	dabs	1,0x19D,1
    51                           	dabs	1,0x19E,1
    52                           	dabs	1,0x118,1
    53                           	dabs	1,0x115,1
    54                           	dabs	1,0x11E,1
    55                           	dabs	1,0x11E,1
    56                           	dabs	1,0x11F,1
    57                           	dabs	1,0x11F,1
    58                           	dabs	1,0x11E,1
    59                           	dabs	1,0x11E,1
    60                           	dabs	1,0x11E,1
    61                           	dabs	1,0x11E,1
    62                           	dabs	1,0x11E,1
    63                           	dabs	1,0x11E,1
    64                           	dabs	1,0x11F,1
    65                           	dabs	1,0x11F,1
    66                           	dabs	1,0x119,1
    67                           	dabs	1,0x119,1
    68                           	dabs	1,0x119,1
    69                           	dabs	1,0x119,1
    70                           	dabs	1,0x119,1
    71                           	dabs	1,0x119,1
    72                           	dabs	1,0x119,1
    73                           	dabs	1,0x19E,1
    74                           	dabs	1,0x118,1
    75                           	dabs	1,0x11A,1
    76                           	dabs	1,0x11A,1
    77                           	dabs	1,0x11A,1
    78                           	dabs	1,0x11A,1
    79                           	dabs	1,0x11A,1
    80                           	dabs	1,0x11A,1
    81                           	dabs	1,0x11A,1
    82                           	dabs	1,0x19E,1
    83                           	dabs	1,0x11B,1
    84                           	dabs	1,0x118,1
    85                           	dabs	1,0x18C,1
    86                           	dabs	1,0x116,1
    87                           	dabs	1,0x116,1
    88                           	dabs	1,0x116,1
    89                           	dabs	1,0x116,1
    90                           	dabs	1,0x11B,1
    91                           	dabs	1,0x11B,1
    92                           	dabs	1,0x19E,1
    93                           	dabs	1,0x19E,1
    94                           	dabs	1,0x19E,1
    95                           	dabs	1,0x19E,1
    96                           	dabs	1,0x19D,1
    97                           	dabs	1,0x19D,1
    98                           	dabs	1,0x19D,1
    99                           	dabs	1,0x19D,1
   100                           	dabs	1,0x19D,1
   101                           	dabs	1,0x11B,1
   102                           	dabs	1,0x118,1
   103                           	dabs	1,0x118,1
   104                           	dabs	1,0x118,1
   105                           	dabs	1,0x118,1
   106                           	dabs	1,0x118,1
   107                           	dabs	1,0x118,1
   108                           	dabs	1,0x115,1
   109                           	dabs	1,0x115,1
   110                           	dabs	1,0x115,1
   111                           	dabs	1,0x115,1
   112                           	dabs	1,0x18C,1
   113                           	dabs	1,0x7E,2
   114  000A                     
   115                           	psect	idataBANK0
   116  04E7                     __pidataBANK0:	
   117                           
   118                           ;initializer for id_clear@F1108
   119  04E7  34FF               	retlw	255
   120  04E8  34FF               	retlw	255
   121  04E9  34FF               	retlw	255
   122  04EA  34FF               	retlw	255
   123  04EB  34FF               	retlw	255
   124                           
   125                           ;initializer for _buffTag
   126  04EC  3400               	retlw	0
   127  04ED  3400               	retlw	0
   128  04EE  3411               	retlw	17
   129  04EF  340B               	retlw	11
   130  04F0  344F               	retlw	79
   131  04F1  3400               	retlw	0
   132  04F2  3400               	retlw	0
   133  04F3  3481               	retlw	129
   134  04F4  342F               	retlw	47
   135  04F5  3422               	retlw	34
   136  04F6  3400               	retlw	0
   137  04F7  3400               	retlw	0
   138  04F8  347D               	retlw	125
   139  04F9  3467               	retlw	103
   140  04FA  3405               	retlw	5
   141  04FB  3400               	retlw	0
   142  04FC  3400               	retlw	0
   143  04FD  347E               	retlw	126
   144  04FE  3431               	retlw	49
   145  04FF  34E7               	retlw	231
   146  0500  3400               	retlw	0
   147  0501  3400               	retlw	0
   148  0502  347E               	retlw	126
   149  0503  3451               	retlw	81
   150  0504  34E6               	retlw	230
   151  011E                     _ANSEL	set	286	;_ANSEL
   152  011F                     _ANSELH	set	287	;_ANSELH
   153  0119                     _CM1CON0	set	281	;_CM1CON0
   154  011A                     _CM2CON0	set	282	;_CM2CON0
   155  011B                     _CM2CON1	set	283	;_CM2CON1
   156  010F                     _EEADRH	set	271	;_EEADRH
   157  010E                     _EEDATH	set	270	;_EEDATH
   158  0116                     _IOCB	set	278	;_IOCB
   159  019D                     _PSTRCON	set	413	;_PSTRCON
   160  019E                     _SRCON	set	414	;_SRCON
   161  0118                     _VRCON	set	280	;_VRCON
   162  0115                     _WPUB	set	277	;_WPUB
   163  08F0                     _ANS0	set	2288	;_ANS0
   164  08F1                     _ANS1	set	2289	;_ANS1
   165  08FA                     _ANS10	set	2298	;_ANS10
   166  08FB                     _ANS11	set	2299	;_ANS11
   167  08F2                     _ANS2	set	2290	;_ANS2
   168  08F3                     _ANS3	set	2291	;_ANS3
   169  08F4                     _ANS4	set	2292	;_ANS4
   170  08F5                     _ANS5	set	2293	;_ANS5
   171  08F6                     _ANS6	set	2294	;_ANS6
   172  08F7                     _ANS7	set	2295	;_ANS7
   173  08F8                     _ANS8	set	2296	;_ANS8
   174  08F9                     _ANS9	set	2297	;_ANS9
   175  08C8                     _C1CH0	set	2248	;_C1CH0
   176  08C9                     _C1CH1	set	2249	;_C1CH1
   177  08CD                     _C1OE	set	2253	;_C1OE
   178  08CF                     _C1ON	set	2255	;_C1ON
   179  08CE                     _C1OUT	set	2254	;_C1OUT
   180  08CC                     _C1POL	set	2252	;_C1POL
   181  08CA                     _C1R	set	2250	;_C1R
   182  0CF5                     _C1SEN	set	3317	;_C1SEN
   183  08C7                     _C1VREN	set	2247	;_C1VREN
   184  08D0                     _C2CH0	set	2256	;_C2CH0
   185  08D1                     _C2CH1	set	2257	;_C2CH1
   186  08D5                     _C2OE	set	2261	;_C2OE
   187  08D7                     _C2ON	set	2263	;_C2ON
   188  08D6                     _C2OUT	set	2262	;_C2OUT
   189  08D4                     _C2POL	set	2260	;_C2POL
   190  08D2                     _C2R	set	2258	;_C2R
   191  0CF4                     _C2REN	set	3316	;_C2REN
   192  08D8                     _C2SYNC	set	2264	;_C2SYNC
   193  08C6                     _C2VREN	set	2246	;_C2VREN
   194  0C67                     _EEPGD	set	3175	;_EEPGD
   195  08B4                     _IOCB4	set	2228	;_IOCB4
   196  08B5                     _IOCB5	set	2229	;_IOCB5
   197  08B6                     _IOCB6	set	2230	;_IOCB6
   198  08B7                     _IOCB7	set	2231	;_IOCB7
   199  08DF                     _MC1OUT	set	2271	;_MC1OUT
   200  08DE                     _MC2OUT	set	2270	;_MC2OUT
   201  0CF2                     _PULSR	set	3314	;_PULSR
   202  0CF3                     _PULSS	set	3315	;_PULSS
   203  0CF6                     _SR0	set	3318	;_SR0
   204  0CF7                     _SR1	set	3319	;_SR1
   205  0CE8                     _STRA	set	3304	;_STRA
   206  0CE9                     _STRB	set	3305	;_STRB
   207  0CEA                     _STRC	set	3306	;_STRC
   208  0CEB                     _STRD	set	3307	;_STRD
   209  0CEC                     _STRSYNC	set	3308	;_STRSYNC
   210  08D9                     _T1GSS	set	2265	;_T1GSS
   211  08C4                     _VP6EN	set	2244	;_VP6EN
   212  08C0                     _VR0	set	2240	;_VR0
   213  08C1                     _VR1	set	2241	;_VR1
   214  08C2                     _VR2	set	2242	;_VR2
   215  08C3                     _VR3	set	2243	;_VR3
   216  08C5                     _VRR	set	2245	;_VRR
   217  08AC                     _WPUB4	set	2220	;_WPUB4
   218  08AD                     _WPUB5	set	2221	;_WPUB5
   219  08AE                     _WPUB6	set	2222	;_WPUB6
   220  08AF                     _WPUB7	set	2223	;_WPUB7
   221  0C62                     _WREN	set	3170	;_WREN
   222  000B                     _INTCON	set	11
   223  0014                     _P1ADTH	set	20
   224  000E                     _P1ADTL	set	14
   225  0016                     _P1CON	set	22
   226  000C                     _PIR1	set	12
   227  0005                     _PORTA	set	5
   228  0007                     _PORTC	set	7
   229  0012                     _T2CON0	set	18
   230  0013                     _TMR2H	set	19
   231  0011                     _TMR2L	set	17
   232  0067                     _EEIF	set	103
   233  005F                     _GIE	set	95
   234  005E                     _PEIE	set	94
   235  002A                     _RA2	set	42
   236  002B                     _RA3	set	43
   237  002D                     _RA5	set	45
   238  002E                     _RA6	set	46
   239  0039                     _RC1	set	57
   240  005D                     _T0IE	set	93
   241  005A                     _T0IF	set	90
   242  00FB                     _T0ON	set	251
   243  0061                     _TMR2IF	set	97
   244  0092                     _TMR2ON	set	146
   245  009B                     _EEADR	set	155
   246  009C                     _EECON1	set	156
   247  009A                     _EEDAT	set	154
   248  0081                     _OPTION	set	129
   249  008F                     _OSCCON	set	143
   250  0090                     _P1OE	set	144
   251  0099                     _P1POL	set	153
   252  008C                     _PIE1	set	140
   253  0092                     _PR2H	set	146
   254  0091                     _PR2L	set	145
   255  009E                     _T2CON1	set	158
   256  0085                     _TRISA	set	133
   257  0087                     _TRISC	set	135
   258  0095                     _WPUA	set	149
   259  0093                     _WPUC	set	147
   260  047A                     _HTS	set	1146
   261  04E0                     _RD	set	1248
   262  0461                     _TMR2IE	set	1121
   263  04E8                     _WR	set	1256
   264  0001                     _TMR0	set	1
   265                           
   266                           	psect	strings
   267  05C9                     __pstrings:	
   268  05C9                     stringtab:	
   269                           ;	global	stringdir,stringtab,__stringbase
   270                           
   271  05C9                     stringcode:	
   272                           ;	String table - string pointers are 1 byte each
   273                           
   274  05C9                     stringdir:	
   275  05C9  3005               	movlw	high stringdir
   276  05CA  008A               	movwf	10
   277  05CB  0804               	movf	4,w
   278  05CC  0A84               	incf	4,f
   279  05CD  0782               	addwf	2,f
   280  05CE                     __stringbase:	
   281  05CE  3400               	retlw	0
   282  05CF                     STR_1:	
   283  05CF  340A               	retlw	10
   284  05D0  3454               	retlw	84	;'T'
   285  05D1  3461               	retlw	97	;'a'
   286  05D2  3467               	retlw	103	;'g'
   287  05D3  343A               	retlw	58	;':'
   288  05D4  3420               	retlw	32	;' '
   289  05D5  3400               	retlw	0
   290                           
   291                           	psect	cinit
   292  0554                     start_initialization:	
   293  0554  303E               	movlw	low (__pdataBANK0+30)
   294                           
   295                           ; Clear objects allocated to BANK0
   296  0555  01DC               	clrf	__pbssBANK0& (0+127)
   297  0556  01DD               	clrf	(__pbssBANK0+1)& (0+127)
   298  0557  01DE               	clrf	(__pbssBANK0+2)& (0+127)
   299  0558  01DF               	clrf	(__pbssBANK0+3)& (0+127)
   300  0559  01E0               	clrf	(__pbssBANK0+4)& (0+127)
   301  055A  01E1               	clrf	(__pbssBANK0+5)& (0+127)
   302  055B  01E2               	clrf	(__pbssBANK0+6)& (0+127)
   303  055C  01E3               	clrf	(__pbssBANK0+7)& (0+127)
   304  055D  01E4               	clrf	(__pbssBANK0+8)& (0+127)
   305  055E  01E5               	clrf	(__pbssBANK0+9)& (0+127)
   306  055F  01E6               	clrf	(__pbssBANK0+10)& (0+127)
   307                           
   308                           ; Initialize objects allocated to BANK0
   309  0560  1383               	bcf	3,7	;select IRP bank0
   310  0561  00FD               	movwf	125
   311  0562  3004               	movlw	high __pidataBANK0
   312  0563  00FE               	movwf	126
   313  0564  30E7               	movlw	low __pidataBANK0
   314  0565  00FF               	movwf	127
   315  0566  3020               	movlw	low __pdataBANK0
   316  0567  0084               	movwf	4
   317  0568  25A2               	fcall	init_ram
   318  0569                     end_of_initialization:	
   319                           ;End of C runtime variable initialization code
   320                           
   321  0569  0183               	clrf	3
   322  056A  280B               	ljmp	_main	;jump to C main() function
   323                           
   324                           	psect	bssBANK0
   325  005C                     __pbssBANK0:	
   326  005C                     _timeOut:	
   327  005C                     	ds	2
   328  005E                     _timeTick:	
   329  005E                     	ds	2
   330  0060                     _PwInNum:	
   331  0060                     	ds	1
   332  0061                     _mtState:	
   333  0061                     	ds	1
   334  0062                     _keyID:	
   335  0062                     	ds	5
   336                           
   337                           	psect	dataBANK0
   338  0020                     __pdataBANK0:	
   339  0020                     id_clear@F1108:	
   340  0020                     	ds	5
   341  0025                     _buffTag:	
   342  0025                     	ds	25
   343                           
   344                           	psect	inittext
   345  059E                     init_fetch:	
   346                           ;	Called with low address in FSR and high address in W
   347                           
   348  059E  087E               	movf	126,w
   349  059F  008A               	movwf	10
   350  05A0  087F               	movf	127,w
   351  05A1  0082               	movwf	2
   352  05A2                     init_ram:	
   353                           ;Called with:
   354                           ;	high address of idata address in btemp 
   355                           ;	low address of idata address in btemp+1 
   356                           ;	low address of data in FSR
   357                           ;	high address + 1 of data in btemp-1
   358                           
   359  05A2  259E               	fcall	init_fetch
   360  05A3  0080               	movwf	0
   361  05A4  0A84               	incf	4,f
   362  05A5  0804               	movf	4,w
   363  05A6  067D               	xorwf	125,w
   364  05A7  1903               	btfsc	3,2
   365  05A8  3400               	retlw	0
   366  05A9  0AFF               	incf	127,f
   367  05AA  1903               	btfsc	3,2
   368  05AB  0AFE               	incf	126,f
   369  05AC  2DA2               	goto	init_ram
   370                           
   371                           	psect	cstackCOMMON
   372  0070                     __pcstackCOMMON:	
   373  0070                     ?_swUartSendString:	
   374  0070                     ?_SendNum:	
   375                           ; 0 bytes @ 0x0
   376                           
   377  0070                     ?_sys_init:	
   378                           ; 0 bytes @ 0x0
   379                           
   380  0070                     ?_gpio_init:	
   381                           ; 0 bytes @ 0x0
   382                           
   383  0070                     ?_timer_init:	
   384                           ; 0 bytes @ 0x0
   385                           
   386  0070                     ?_int_init:	
   387                           ; 0 bytes @ 0x0
   388                           
   389  0070                     ?_SET_EPWM_ON:	
   390                           ; 0 bytes @ 0x0
   391                           
   392  0070                     ?_delay_x10ms:	
   393                           ; 0 bytes @ 0x0
   394                           
   395  0070                     ?_ISR:	
   396                           ; 0 bytes @ 0x0
   397                           
   398  0070                     ??_ISR:	
   399                           ; 0 bytes @ 0x0
   400                           
   401  0070                     ?_main:	
   402                           ; 0 bytes @ 0x0
   403                           
   404  0070                     ?_swUartSendByte:	
   405                           ; 0 bytes @ 0x0
   406                           
   407  0070                     ?_eepromReadByte:	
   408                           ; 0 bytes @ 0x0
   409                           
   410  0070                     ?_get_RFID:	
   411                           ; 1 bytes @ 0x0
   412                           
   413                           
   414                           ; 1 bytes @ 0x0
   415  0070                     	ds	2
   416  0072                     ??_sys_init:	
   417  0072                     ??_gpio_init:	
   418                           ; 0 bytes @ 0x2
   419                           
   420  0072                     ??_timer_init:	
   421                           ; 0 bytes @ 0x2
   422                           
   423  0072                     ??_int_init:	
   424                           ; 0 bytes @ 0x2
   425                           
   426  0072                     ??_eepromReadByte:	
   427                           ; 0 bytes @ 0x2
   428                           
   429  0072                     ?_eepromWriteByte:	
   430                           ; 0 bytes @ 0x2
   431                           
   432  0072                     ??_SET_EPWM_ON:	
   433                           ; 0 bytes @ 0x2
   434                           
   435  0072                     ??_delay_x10ms:	
   436                           ; 0 bytes @ 0x2
   437                           
   438  0072                     ?_setState:	
   439                           ; 0 bytes @ 0x2
   440                           
   441  0072                     ??_swUartSendByte:	
   442                           ; 0 bytes @ 0x2
   443                           
   444  0072                     ?_comArr:	
   445                           ; 0 bytes @ 0x2
   446                           
   447  0072                     ?___bmul:	
   448                           ; 1 bytes @ 0x2
   449                           
   450  0072                     ?___lbdiv:	
   451                           ; 1 bytes @ 0x2
   452                           
   453  0072                     ?_timerOut:	
   454                           ; 1 bytes @ 0x2
   455                           
   456  0072                     ?___wmul:	
   457                           ; 2 bytes @ 0x2
   458                           
   459  0072                     eepromReadByte@EEAddr:	
   460                           ; 2 bytes @ 0x2
   461                           
   462  0072                     eepromWriteByte@EEData:	
   463                           ; 1 bytes @ 0x2
   464                           
   465  0072                     comArr@arr2:	
   466                           ; 1 bytes @ 0x2
   467                           
   468  0072                     ___bmul@multiplicand:	
   469                           ; 1 bytes @ 0x2
   470                           
   471  0072                     ___lbdiv@divisor:	
   472                           ; 1 bytes @ 0x2
   473                           
   474  0072                     timerOut@time:	
   475                           ; 1 bytes @ 0x2
   476                           
   477  0072                     setState@_tOut:	
   478                           ; 2 bytes @ 0x2
   479                           
   480  0072                     ___wmul@multiplier:	
   481                           ; 2 bytes @ 0x2
   482                           
   483                           
   484                           ; 2 bytes @ 0x2
   485  0072                     	ds	1
   486  0073                     ??_eepromWriteByte:	
   487  0073                     ??___bmul:	
   488                           ; 0 bytes @ 0x3
   489                           
   490  0073                     ??___lbdiv:	
   491                           ; 0 bytes @ 0x3
   492                           
   493  0073                     eepromReadByte@ReEepromData:	
   494                           ; 0 bytes @ 0x3
   495                           
   496  0073                     comArr@len1:	
   497                           ; 1 bytes @ 0x3
   498                           
   499  0073                     swUartSendByte@dat:	
   500                           ; 1 bytes @ 0x3
   501                           
   502  0073                     ___bmul@product:	
   503                           ; 1 bytes @ 0x3
   504                           
   505  0073                     ___lbdiv@dividend:	
   506                           ; 1 bytes @ 0x3
   507                           
   508                           
   509                           ; 1 bytes @ 0x3
   510  0073                     	ds	1
   511  0074                     ?_eepromReadBlock:	
   512  0074                     ??_timerOut:	
   513                           ; 0 bytes @ 0x4
   514                           
   515  0074                     ??_setState:	
   516                           ; 0 bytes @ 0x4
   517                           
   518  0074                     eepromReadBlock@buff:	
   519                           ; 0 bytes @ 0x4
   520                           
   521  0074                     comArr@len2:	
   522                           ; 1 bytes @ 0x4
   523                           
   524  0074                     timerOut@Logic:	
   525                           ; 1 bytes @ 0x4
   526                           
   527  0074                     delay_x10ms@t:	
   528                           ; 1 bytes @ 0x4
   529                           
   530  0074                     setState@stt:	
   531                           ; 1 bytes @ 0x4
   532                           
   533  0074                     swUartSendByte@i:	
   534                           ; 1 bytes @ 0x4
   535                           
   536  0074                     ___bmul@multiplier:	
   537                           ; 1 bytes @ 0x4
   538                           
   539  0074                     ___lbdiv@counter:	
   540                           ; 1 bytes @ 0x4
   541                           
   542  0074                     ___wmul@multiplicand:	
   543                           ; 1 bytes @ 0x4
   544                           
   545                           
   546                           ; 2 bytes @ 0x4
   547  0074                     	ds	1
   548  0075                     ??_swUartSendString:	
   549  0075                     ??_SendNum:	
   550                           ; 0 bytes @ 0x5
   551                           
   552  0075                     ??_comArr:	
   553                           ; 0 bytes @ 0x5
   554                           
   555  0075                     eepromReadBlock@len:	
   556                           ; 0 bytes @ 0x5
   557                           
   558  0075                     eepromWriteByte@EEAddr:	
   559                           ; 1 bytes @ 0x5
   560                           
   561  0075                     swUartSendString@str:	
   562                           ; 1 bytes @ 0x5
   563                           
   564  0075                     ___lbdiv@quotient:	
   565                           ; 1 bytes @ 0x5
   566                           
   567  0075                     timerOut@CurTimer:	
   568                           ; 1 bytes @ 0x5
   569                           
   570  0075                     _SendNum$5067:	
   571                           ; 2 bytes @ 0x5
   572                           
   573                           
   574                           ; 2 bytes @ 0x5
   575  0075                     	ds	1
   576  0076                     ??_eepromReadBlock:	
   577  0076                     ?_eepromWriteBlock:	
   578                           ; 0 bytes @ 0x6
   579                           
   580  0076                     ??___wmul:	
   581                           ; 0 bytes @ 0x6
   582                           
   583  0076                     eepromWriteBlock@buff:	
   584                           ; 0 bytes @ 0x6
   585                           
   586  0076                     ___wmul@product:	
   587                           ; 1 bytes @ 0x6
   588                           
   589                           
   590                           ; 2 bytes @ 0x6
   591  0076                     	ds	1
   592  0077                     ??_get_RFID:	
   593  0077                     eepromReadBlock@addStart:	
   594                           ; 0 bytes @ 0x7
   595                           
   596  0077                     eepromWriteBlock@len:	
   597                           ; 1 bytes @ 0x7
   598                           
   599  0077                     _SendNum$5068:	
   600                           ; 1 bytes @ 0x7
   601                           
   602                           
   603                           ; 2 bytes @ 0x7
   604  0077                     	ds	1
   605  0078                     ??_eepromWriteBlock:	
   606  0078                     ?_beep:	
   607                           ; 0 bytes @ 0x8
   608                           
   609  0078                     eepromReadBlock@i:	
   610                           ; 0 bytes @ 0x8
   611                           
   612  0078                     comArr@arr1:	
   613                           ; 1 bytes @ 0x8
   614                           
   615  0078                     beep@rep:	
   616                           ; 1 bytes @ 0x8
   617                           
   618                           
   619                           ; 1 bytes @ 0x8
   620  0078                     	ds	1
   621  0079                     ??_beep:	
   622  0079                     eepromWriteBlock@addStart:	
   623                           ; 0 bytes @ 0x9
   624                           
   625  0079                     comArr@i:	
   626                           ; 1 bytes @ 0x9
   627                           
   628  0079                     SendNum@num:	
   629                           ; 1 bytes @ 0x9
   630                           
   631                           
   632                           ; 1 bytes @ 0x9
   633  0079                     	ds	1
   634  007A                     ?_id_search:	
   635  007A                     eepromWriteBlock@i:	
   636                           ; 1 bytes @ 0xA
   637                           
   638  007A                     id_search@buff:	
   639                           ; 1 bytes @ 0xA
   640                           
   641  007A                     SendNum@nib:	
   642                           ; 1 bytes @ 0xA
   643                           
   644                           
   645                           ; 1 bytes @ 0xA
   646  007A                     	ds	1
   647  007B                     ??_id_search:	
   648  007B                     id_replate@id:	
   649                           ; 0 bytes @ 0xB
   650                           
   651                           
   652                           ; 1 bytes @ 0xB
   653  007B                     	ds	1
   654  007C                     ??_id_clear:	
   655                           
   656                           	psect	cstackBANK0
   657  003E                     __pcstackBANK0:	
   658                           ; 0 bytes @ 0xC
   659                           
   660  003E                     ?_id_replate:	
   661  003E                     id_search@id_input:	
   662                           ; 0 bytes @ 0x0
   663                           
   664  003E                     id_replate@Cont:	
   665                           ; 1 bytes @ 0x0
   666                           
   667  003E                     beep@t:	
   668                           ; 1 bytes @ 0x0
   669                           
   670  003E                     get_RFID@RF_serial_55bits:	
   671                           ; 2 bytes @ 0x0
   672                           
   673                           
   674                           ; 11 bytes @ 0x0
   675  003E                     	ds	1
   676  003F                     id_search@i:	
   677  003F                     id_replate@buff:	
   678                           ; 1 bytes @ 0x1
   679                           
   680                           
   681                           ; 1 bytes @ 0x1
   682  003F                     	ds	1
   683  0040                     ??_id_replate:	
   684  0040                     beep@delay:	
   685                           ; 0 bytes @ 0x2
   686                           
   687                           
   688                           ; 1 bytes @ 0x2
   689  0040                     	ds	2
   690  0042                     ?_id_clear:	
   691  0042                     id_clear@idMax:	
   692                           ; 0 bytes @ 0x4
   693                           
   694                           
   695                           ; 1 bytes @ 0x4
   696  0042                     	ds	1
   697  0043                     id_clear@tmp:	
   698                           
   699                           ; 5 bytes @ 0x5
   700  0043                     	ds	5
   701  0048                     id_clear@idMin:	
   702                           
   703                           ; 1 bytes @ 0xA
   704  0048                     	ds	1
   705  0049                     get_RFID@flag_RFID_syn:	
   706                           
   707                           ; 1 bytes @ 0xB
   708  0049                     	ds	1
   709  004A                     get_RFID@even_col:	
   710                           
   711                           ; 1 bytes @ 0xC
   712  004A                     	ds	1
   713  004B                     get_RFID@even_row:	
   714                           
   715                           ; 1 bytes @ 0xD
   716  004B                     	ds	1
   717  004C                     get_RFID@j:	
   718                           
   719                           ; 1 bytes @ 0xE
   720  004C                     	ds	1
   721  004D                     get_RFID@i:	
   722                           
   723                           ; 1 bytes @ 0xF
   724  004D                     	ds	1
   725  004E                     get_RFID@flag_RFID_last:	
   726                           
   727                           ; 1 bytes @ 0x10
   728  004E                     	ds	1
   729  004F                     get_RFID@timeOutVal:	
   730                           
   731                           ; 2 bytes @ 0x11
   732  004F                     	ds	2
   733  0051                     get_RFID@ii:	
   734                           
   735                           ; 1 bytes @ 0x13
   736  0051                     	ds	1
   737  0052                     ??_main:	
   738                           
   739                           ; 0 bytes @ 0x14
   740  0052                     	ds	3
   741  0055                     main@t:	
   742                           
   743                           ; 2 bytes @ 0x17
   744  0055                     	ds	2
   745  0057                     main@t1:	
   746                           
   747                           ; 1 bytes @ 0x19
   748  0057                     	ds	1
   749  0058                     main@buzFre:	
   750                           
   751                           ; 1 bytes @ 0x1A
   752  0058                     	ds	1
   753  0059                     main@idState:	
   754                           
   755                           ; 1 bytes @ 0x1B
   756  0059                     	ds	1
   757  005A                     main@idop:	
   758                           
   759                           ; 1 bytes @ 0x1C
   760  005A                     	ds	1
   761  005B                     main@tmp:	
   762                           
   763                           ; 1 bytes @ 0x1D
   764  005B                     	ds	1
   765                           
   766                           	psect	maintext
   767  000B                     __pmaintext:	
   768 ;;Data sizes: Strings 7, constant 0, data 30, bss 11, persistent 0 stack 0
   769 ;;Auto spaces:   Size  Autos    Used
   770 ;; COMMON          14     12      12
   771 ;; BANK0           80     30      71
   772 ;; BANK1           32      0       0
   773 ;;
   774 ;; Pointer list with targets:
   775 ;; ?___wmul	unsigned int  size(1) Largest target is 0
   776 ;;
   777 ;; ?_timerOut	unsigned int  size(1) Largest target is 1
   778 ;;		 -> TMR0(BITSFR0[1]), 
   779 ;;
   780 ;; swUartSendString@str	PTR unsigned char  size(1) Largest target is 7
   781 ;;		 -> STR_1(CODE[7]), 
   782 ;;
   783 ;; id_replate@Cont	PTR unsigned char  size(1) Largest target is 5
   784 ;;		 -> id_clear@tmp(BANK0[5]), keyID(BANK0[5]), 
   785 ;;
   786 ;; id_replate@buff	PTR unsigned char  size(1) Largest target is 25
   787 ;;		 -> buffTag(BANK0[25]), 
   788 ;;
   789 ;; id_search@buff	PTR unsigned char  size(1) Largest target is 25
   790 ;;		 -> buffTag(BANK0[25]), 
   791 ;;
   792 ;; id_search@id_input	PTR unsigned char  size(1) Largest target is 5
   793 ;;		 -> keyID(BANK0[5]), 
   794 ;;
   795 ;; comArr@arr2	PTR unsigned char  size(1) Largest target is 25
   796 ;;		 -> buffTag(BANK0[25]), 
   797 ;;
   798 ;; comArr@arr1	PTR unsigned char  size(1) Largest target is 5
   799 ;;		 -> keyID(BANK0[5]), 
   800 ;;
   801 ;; eepromWriteBlock@buff	PTR unsigned char  size(1) Largest target is 25
   802 ;;		 -> buffTag(BANK0[25]), 
   803 ;;
   804 ;; eepromReadBlock@buff	PTR unsigned char  size(1) Largest target is 25
   805 ;;		 -> buffTag(BANK0[25]), 
   806 ;;
   807 ;;
   808 ;; Critical Paths under _main in COMMON
   809 ;;
   810 ;;   _main->_id_search
   811 ;;   _main->_id_replate
   812 ;;   _id_clear->_id_replate
   813 ;;   _id_replate->_eepromWriteBlock
   814 ;;   _SendNum->_swUartSendByte
   815 ;;   _swUartSendString->_swUartSendByte
   816 ;;   _beep->___wmul
   817 ;;   _eepromWriteBlock->_eepromWriteByte
   818 ;;   _id_search->_comArr
   819 ;;   _get_RFID->_timerOut
   820 ;;   _eepromReadBlock->_eepromReadByte
   821 ;;
   822 ;; Critical Paths under _ISR in COMMON
   823 ;;
   824 ;;   None.
   825 ;;
   826 ;; Critical Paths under _main in BANK0
   827 ;;
   828 ;;   _main->_get_RFID
   829 ;;   _id_clear->_id_replate
   830 ;;
   831 ;; Critical Paths under _ISR in BANK0
   832 ;;
   833 ;;   None.
   834 ;;
   835 ;; Critical Paths under _main in BANK1
   836 ;;
   837 ;;   None.
   838 ;;
   839 ;; Critical Paths under _ISR in BANK1
   840 ;;
   841 ;;   None.
   842 ;;
   843 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   844 ;;
   845 ;;
   846 ;;Call Graph Tables:
   847 ;;
   848 ;; ---------------------------------------------------------------------------------
   849 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   850 ;; ---------------------------------------------------------------------------------
   851 ;; (0) _main                                                10    10      0    5343
   852 ;;                                             20 BANK0     10    10      0
   853 ;;                           _sys_init
   854 ;;                          _gpio_init
   855 ;;                         _timer_init
   856 ;;                           _int_init
   857 ;;                    _eepromWriteByte
   858 ;;                        _SET_EPWM_ON
   859 ;;                     _eepromReadByte
   860 ;;                    _eepromReadBlock
   861 ;;                           _setState
   862 ;;                               _beep
   863 ;;                           _get_RFID
   864 ;;                   _swUartSendString
   865 ;;                            _SendNum
   866 ;;                          _id_search
   867 ;;                           _id_clear
   868 ;;                         _id_replate
   869 ;; ---------------------------------------------------------------------------------
   870 ;; (1) _id_clear                                             7     6      1     718
   871 ;;                                              4 BANK0      7     6      1
   872 ;;                         _id_replate
   873 ;; ---------------------------------------------------------------------------------
   874 ;; (1) _id_replate                                           5     3      2     623
   875 ;;                                             11 COMMON     1     1      0
   876 ;;                                              0 BANK0      4     2      2
   877 ;;                             ___bmul
   878 ;;                   _eepromWriteBlock
   879 ;; ---------------------------------------------------------------------------------
   880 ;; (1) _SendNum                                              6     6      0     300
   881 ;;                                              5 COMMON     6     6      0
   882 ;;                     _swUartSendByte
   883 ;; ---------------------------------------------------------------------------------
   884 ;; (1) _swUartSendString                                     1     1      0     114
   885 ;;                                              5 COMMON     1     1      0
   886 ;;                     _swUartSendByte
   887 ;; ---------------------------------------------------------------------------------
   888 ;; (1) _beep                                                 5     4      1     203
   889 ;;                                              8 COMMON     2     1      1
   890 ;;                                              0 BANK0      3     3      0
   891 ;;                             ___wmul
   892 ;;                        _delay_x10ms
   893 ;; ---------------------------------------------------------------------------------
   894 ;; (2) _eepromWriteBlock                                     5     3      2     178
   895 ;;                                              6 COMMON     5     3      2
   896 ;;                    _eepromWriteByte
   897 ;; ---------------------------------------------------------------------------------
   898 ;; (2) _swUartSendByte                                       3     3      0      69
   899 ;;                                              2 COMMON     3     3      0
   900 ;; ---------------------------------------------------------------------------------
   901 ;; (1) _id_search                                            4     3      1     518
   902 ;;                                             10 COMMON     2     1      1
   903 ;;                                              0 BANK0      2     2      0
   904 ;;                             _comArr
   905 ;;                            ___lbdiv
   906 ;; ---------------------------------------------------------------------------------
   907 ;; (2) _delay_x10ms                                          3     3      0      22
   908 ;;                                              2 COMMON     3     3      0
   909 ;; ---------------------------------------------------------------------------------
   910 ;; (1) _get_RFID                                            21    21      0    1917
   911 ;;                                              7 COMMON     1     1      0
   912 ;;                                              0 BANK0     20    20      0
   913 ;;                           _timerOut
   914 ;;                            ___lbdiv
   915 ;; ---------------------------------------------------------------------------------
   916 ;; (3) _eepromWriteByte                                      4     3      1      44
   917 ;;                                              2 COMMON     4     3      1
   918 ;; ---------------------------------------------------------------------------------
   919 ;; (1) _eepromReadBlock                                      5     3      2     179
   920 ;;                                              4 COMMON     5     3      2
   921 ;;                     _eepromReadByte
   922 ;; ---------------------------------------------------------------------------------
   923 ;; (1) _sys_init                                             0     0      0       0
   924 ;; ---------------------------------------------------------------------------------
   925 ;; (2) ___lbdiv                                              4     3      1     162
   926 ;;                                              2 COMMON     4     3      1
   927 ;; ---------------------------------------------------------------------------------
   928 ;; (2) ___wmul                                               6     2      4      92
   929 ;;                                              2 COMMON     6     2      4
   930 ;; ---------------------------------------------------------------------------------
   931 ;; (2) ___bmul                                               3     2      1      92
   932 ;;                                              2 COMMON     3     2      1
   933 ;; ---------------------------------------------------------------------------------
   934 ;; (1) _setState                                             3     1      2      44
   935 ;;                                              2 COMMON     3     1      2
   936 ;; ---------------------------------------------------------------------------------
   937 ;; (1) _SET_EPWM_ON                                          0     0      0       0
   938 ;; ---------------------------------------------------------------------------------
   939 ;; (2) _timerOut                                             5     3      2      90
   940 ;;                                              2 COMMON     5     3      2
   941 ;; ---------------------------------------------------------------------------------
   942 ;; (2) _comArr                                               8     5      3     222
   943 ;;                                              2 COMMON     8     5      3
   944 ;; ---------------------------------------------------------------------------------
   945 ;; (2) _eepromReadByte                                       2     2      0      45
   946 ;;                                              2 COMMON     2     2      0
   947 ;; ---------------------------------------------------------------------------------
   948 ;; (1) _int_init                                             0     0      0       0
   949 ;; ---------------------------------------------------------------------------------
   950 ;; (1) _timer_init                                           0     0      0       0
   951 ;; ---------------------------------------------------------------------------------
   952 ;; (1) _gpio_init                                            0     0      0       0
   953 ;; ---------------------------------------------------------------------------------
   954 ;; Estimated maximum stack depth 3
   955 ;; ---------------------------------------------------------------------------------
   956 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   957 ;; ---------------------------------------------------------------------------------
   958 ;; (5) _ISR                                                  2     2      0       0
   959 ;;                                              0 COMMON     2     2      0
   960 ;; ---------------------------------------------------------------------------------
   961 ;; Estimated maximum stack depth 5
   962 ;; ---------------------------------------------------------------------------------
   963 ;; Call Graph Graphs:
   964 ;; _main (ROOT)
   965 ;;   _sys_init
   966 ;;   _gpio_init
   967 ;;   _timer_init
   968 ;;   _int_init
   969 ;;   _eepromWriteByte
   970 ;;   _SET_EPWM_ON
   971 ;;   _eepromReadByte
   972 ;;   _eepromReadBlock
   973 ;;     _eepromReadByte
   974 ;;   _setState
   975 ;;   _beep
   976 ;;     ___wmul
   977 ;;     _delay_x10ms
   978 ;;   _get_RFID
   979 ;;     _timerOut
   980 ;;     ___lbdiv
   981 ;;   _swUartSendString
   982 ;;     _swUartSendByte
   983 ;;   _SendNum
   984 ;;     _swUartSendByte
   985 ;;   _id_search
   986 ;;     _comArr
   987 ;;     ___lbdiv
   988 ;;   _id_clear
   989 ;;     _id_replate
   990 ;;       ___bmul
   991 ;;       _eepromWriteBlock
   992 ;;         _eepromWriteByte
   993 ;;   _id_replate
   994 ;;     ___bmul
   995 ;;     _eepromWriteBlock
   996 ;;       _eepromWriteByte
   997 ;;
   998 ;; _ISR (ROOT)
   999 ;;
  1000 ;; Address spaces:
  1001 ;;Name               Size   Autos  Total    Cost      Usage
  1002 ;;SFR1                 0      0       0       2        0.0%
  1003 ;;BITSFR1              0      0       0       2        0.0%
  1004 ;;BANK1               20      0       0       5        0.0%
  1005 ;;BITBANK1            20      0       0       7        0.0%
  1006 ;;CODE                 0      0       0       0        0.0%
  1007 ;;DATA                 0      0      57       8        0.0%
  1008 ;;ABS                  0      0      53       6        0.0%
  1009 ;;NULL                 0      0       0       0        0.0%
  1010 ;;STACK                0      0       4       2        0.0%
  1011 ;;BANK0               50     1E      47       4       88.8%
  1012 ;;BITBANK0            50      0       0       3        0.0%
  1013 ;;SFR0                 0      0       0       1        0.0%
  1014 ;;BITSFR0              0      0       0       1        0.0%
  1015 ;;COMMON               E      C       C       1       85.7%
  1016 ;;BITCOMMON            E      0       0       0        0.0%
  1017 ;;EEDATA             100      0       0       0        0.0%
  1018                           
  1019                           
  1020 ;; *************** function _main *****************
  1021 ;; Defined at:
  1022 ;;		line 154 in file "MAIN.C"
  1023 ;; Parameters:    Size  Location     Type
  1024 ;;		None
  1025 ;; Auto vars:     Size  Location     Type
  1026 ;;  t               2   23[BANK0 ] unsigned int 
  1027 ;;  tmp             1   29[BANK0 ] unsigned char 
  1028 ;;  idop            1   28[BANK0 ] unsigned char 
  1029 ;;  idState         1   27[BANK0 ] unsigned char 
  1030 ;;  buzFre          1   26[BANK0 ] unsigned char 
  1031 ;;  t1              1   25[BANK0 ] unsigned char 
  1032 ;; Return value:  Size  Location     Type
  1033 ;;		None               void
  1034 ;; Registers used:
  1035 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1036 ;; Tracked objects:
  1037 ;;		On entry : 17F/0
  1038 ;;		On exit  : 20/0
  1039 ;;		Unchanged: 0/0
  1040 ;; Data sizes:     COMMON   BANK0   BANK1
  1041 ;;      Params:         0       0       0
  1042 ;;      Locals:         0       7       0
  1043 ;;      Temps:          0       3       0
  1044 ;;      Totals:         0      10       0
  1045 ;;Total ram usage:       10 bytes
  1046 ;; Hardware stack levels required when called:    5
  1047 ;; This function calls:
  1048 ;;		_sys_init
  1049 ;;		_gpio_init
  1050 ;;		_timer_init
  1051 ;;		_int_init
  1052 ;;		_eepromWriteByte
  1053 ;;		_SET_EPWM_ON
  1054 ;;		_eepromReadByte
  1055 ;;		_eepromReadBlock
  1056 ;;		_setState
  1057 ;;		_beep
  1058 ;;		_get_RFID
  1059 ;;		_swUartSendString
  1060 ;;		_SendNum
  1061 ;;		_id_search
  1062 ;;		_id_clear
  1063 ;;		_id_replate
  1064 ;; This function is called by:
  1065 ;;		Startup code after reset
  1066 ;; This function uses a non-reentrant model
  1067 ;;
  1068  000B                     _main:	
  1069                           
  1070                           ;MAIN.C: 162: unsigned char idop, tmp, idState = 0;
  1071                           
  1072                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1073  000B  01D9               	clrf	main@idState
  1074                           
  1075                           ;MAIN.C: 163: unsigned char t1;
  1076                           ;MAIN.C: 164: unsigned char buzFre = 0;
  1077  000C  01D8               	clrf	main@buzFre
  1078  000D  0064               	clrwdt	;#
  1079                           
  1080                           ;MAIN.C: 168: sys_init();
  1081  000E  2608               	fcall	_sys_init
  1082                           
  1083                           ;MAIN.C: 169: gpio_init();
  1084  000F  25BB               	fcall	_gpio_init
  1085                           
  1086                           ;MAIN.C: 171: timer_init();
  1087  0010  261F               	fcall	_timer_init
  1088                           
  1089                           ;MAIN.C: 172: int_init();
  1090  0011  25E3               	fcall	_int_init
  1091                           
  1092                           ;MAIN.C: 178: eepromWriteByte(0xFF, 0xAA);
  1093  0012  30AA               	movlw	170
  1094  0013  00F2               	movwf	?_eepromWriteByte
  1095  0014  30FF               	movlw	255
  1096  0015  244A               	fcall	_eepromWriteByte
  1097                           
  1098                           ;MAIN.C: 179: eepromWriteByte(0xFF, 0xAA);
  1099  0016  30AA               	movlw	170
  1100  0017  00F2               	movwf	?_eepromWriteByte
  1101  0018  30FF               	movlw	255
  1102  0019  244A               	fcall	_eepromWriteByte
  1103                           
  1104                           ;MAIN.C: 182: TRISC &= 0xfe;
  1105  001A  1683               	bsf	3,5	;RP0=1, select bank1
  1106  001B  1007               	bcf	7,0	;volatile
  1107                           
  1108                           ;MAIN.C: 184: SET_EPWM_ON();
  1109  001C  248A               	fcall	_SET_EPWM_ON
  1110                           
  1111                           ;MAIN.C: 193: if (eepromReadByte(0x02) == 0xff) eepromWriteByte(0x02, 0);
  1112  001D  3002               	movlw	2
  1113  001E  2610               	fcall	_eepromReadByte
  1114  001F  3AFF               	xorlw	255
  1115  0020  1D03               	skipz
  1116  0021  2825               	goto	l7529
  1117  0022  3002               	movlw	2
  1118  0023  01F2               	clrf	?_eepromWriteByte
  1119  0024  244A               	fcall	_eepromWriteByte
  1120  0025                     l7529:	
  1121                           
  1122                           ;MAIN.C: 194: if (eepromReadByte(0x01) == 0xff)eepromWriteByte(0x01, 0);
  1123  0025  3001               	movlw	1
  1124  0026  2610               	fcall	_eepromReadByte
  1125  0027  3AFF               	xorlw	255
  1126  0028  1D03               	skipz
  1127  0029  282D               	goto	l7533
  1128  002A  3001               	movlw	1
  1129  002B  01F2               	clrf	?_eepromWriteByte
  1130  002C  244A               	fcall	_eepromWriteByte
  1131  002D                     l7533:	
  1132                           
  1133                           ;MAIN.C: 196: if (eepromReadByte(0x06) != 0) {
  1134  002D  3006               	movlw	6
  1135  002E  2610               	fcall	_eepromReadByte
  1136  002F  3A00               	xorlw	0
  1137  0030  1903               	skipnz
  1138  0031  2844               	goto	l7537
  1139  0032  3006               	movlw	6
  1140                           
  1141                           ;MAIN.C: 200: eepromWriteByte(0x06, 0);
  1142  0033  01F2               	clrf	?_eepromWriteByte
  1143  0034  244A               	fcall	_eepromWriteByte
  1144  0035  3007               	movlw	7
  1145                           
  1146                           ;MAIN.C: 201: eepromWriteByte(0x06 + 1, 0);
  1147  0036  01F2               	clrf	?_eepromWriteByte
  1148  0037  244A               	fcall	_eepromWriteByte
  1149                           
  1150                           ;MAIN.C: 202: eepromWriteByte(0x06 + 2, 0x87);
  1151  0038  3087               	movlw	135
  1152  0039  00F2               	movwf	?_eepromWriteByte
  1153  003A  3008               	movlw	8
  1154  003B  244A               	fcall	_eepromWriteByte
  1155                           
  1156                           ;MAIN.C: 203: eepromWriteByte(0x06 + 3, 0x3a);
  1157  003C  303A               	movlw	58
  1158  003D  00F2               	movwf	?_eepromWriteByte
  1159  003E  3009               	movlw	9
  1160  003F  244A               	fcall	_eepromWriteByte
  1161                           
  1162                           ;MAIN.C: 204: eepromWriteByte(0x06 + 4, 0xf8);
  1163  0040  30F8               	movlw	248
  1164  0041  00F2               	movwf	?_eepromWriteByte
  1165  0042  300A               	movlw	10
  1166  0043  244A               	fcall	_eepromWriteByte
  1167  0044                     l7537:	
  1168                           
  1169                           ;MAIN.C: 206: }
  1170                           ;MAIN.C: 207: eepromReadBlock(0x06, buffTag, 5 * 5);
  1171  0044  3025               	movlw	_buffTag& (0+255)
  1172  0045  00F4               	movwf	?_eepromReadBlock
  1173  0046  3019               	movlw	25
  1174  0047  00F5               	movwf	?_eepromReadBlock+1
  1175  0048  3006               	movlw	6
  1176  0049  257D               	fcall	_eepromReadBlock
  1177                           
  1178                           ;MAIN.C: 210: {
  1179                           ;MAIN.C: 211: if ( eepromReadByte(0x00) == 7) {
  1180  004A  3000               	movlw	0
  1181  004B  2610               	fcall	_eepromReadByte
  1182  004C  3A07               	xorlw	7
  1183  004D  1D03               	skipz
  1184  004E  289A               	goto	l7565
  1185                           
  1186                           ;MAIN.C: 212: tmp = eepromReadByte(0x02);
  1187  004F  3002               	movlw	2
  1188  0050  2610               	fcall	_eepromReadByte
  1189  0051  1283               	bcf	3,5	;RP0=0, select bank0
  1190  0052  00DB               	movwf	main@tmp
  1191                           
  1192                           ;MAIN.C: 213: t1 = tmp;
  1193  0053  00D7               	movwf	main@t1
  1194                           
  1195                           ;MAIN.C: 215: if (t1 == 3) {
  1196  0054  3A03               	xorlw	3
  1197  0055  1D03               	skipz
  1198  0056  288B               	goto	l7557
  1199                           
  1200                           ;MAIN.C: 220: if ((eepromReadByte(0x03) == 8) && (eepromReadByte(0x04) == 3) && (eepromR
      +                          eadByte(0x05) == 3)) {
  1201  0057  3003               	movlw	3
  1202  0058  2610               	fcall	_eepromReadByte
  1203  0059  3A08               	xorlw	8
  1204  005A  1D03               	skipz
  1205  005B  2872               	goto	l7555
  1206  005C  3004               	movlw	4
  1207  005D  2610               	fcall	_eepromReadByte
  1208  005E  3A03               	xorlw	3
  1209  005F  1D03               	skipz
  1210  0060  2872               	goto	l7555
  1211  0061  3005               	movlw	5
  1212  0062  2610               	fcall	_eepromReadByte
  1213  0063  3A03               	xorlw	3
  1214  0064  1D03               	skipz
  1215  0065  2872               	goto	l7555
  1216  0066  3001               	movlw	1
  1217                           
  1218                           ;MAIN.C: 221: eepromWriteByte(0x01, 1);
  1219  0067  01F2               	clrf	?_eepromWriteByte
  1220  0068  0AF2               	incf	?_eepromWriteByte,f
  1221  0069  244A               	fcall	_eepromWriteByte
  1222  006A  3000               	movlw	0
  1223                           
  1224                           ;MAIN.C: 222: setState(0, 0);
  1225  006B  01F2               	clrf	?_setState
  1226  006C  01F3               	clrf	?_setState+1
  1227  006D  25EF               	fcall	_setState
  1228                           
  1229                           ;MAIN.C: 223: beep(20, 2);
  1230  006E  3002               	movlw	2
  1231  006F  00F8               	movwf	?_beep
  1232  0070  3014               	movlw	20
  1233  0071  287A               	goto	L1
  1234  0072                     l7555:	
  1235                           ;MAIN.C: 224: }
  1236                           
  1237                           
  1238                           ;MAIN.C: 225: else {
  1239                           ;MAIN.C: 226: setState(1, 12);
  1240  0072  300C               	movlw	12
  1241  0073  00F2               	movwf	?_setState
  1242  0074  3001               	movlw	1
  1243  0075  01F3               	clrf	?_setState+1
  1244  0076  25EF               	fcall	_setState
  1245                           
  1246                           ;MAIN.C: 227: beep(10, 5);
  1247  0077  3005               	movlw	5
  1248  0078  00F8               	movwf	?_beep
  1249  0079  300A               	movlw	10
  1250  007A                     L1:	
  1251  007A  23D5               	fcall	_beep
  1252  007B  3000               	movlw	0
  1253                           
  1254                           ;MAIN.C: 228: }
  1255                           ;MAIN.C: 230: eepromWriteByte(0x00, 0);
  1256  007C  01F2               	clrf	?_eepromWriteByte
  1257  007D  244A               	fcall	_eepromWriteByte
  1258  007E  3002               	movlw	2
  1259                           
  1260                           ;MAIN.C: 231: eepromWriteByte(0x02, 0);
  1261  007F  01F2               	clrf	?_eepromWriteByte
  1262  0080  244A               	fcall	_eepromWriteByte
  1263  0081  3005               	movlw	5
  1264                           
  1265                           ;MAIN.C: 232: eepromWriteByte(0x05, 0);
  1266  0082  01F2               	clrf	?_eepromWriteByte
  1267  0083  244A               	fcall	_eepromWriteByte
  1268  0084  3004               	movlw	4
  1269                           
  1270                           ;MAIN.C: 233: eepromWriteByte(0x04, 0);
  1271  0085  01F2               	clrf	?_eepromWriteByte
  1272  0086  244A               	fcall	_eepromWriteByte
  1273  0087  3003               	movlw	3
  1274                           
  1275                           ;MAIN.C: 234: eepromWriteByte(0x03, 0);
  1276  0088  01F2               	clrf	?_eepromWriteByte
  1277  0089  244A               	fcall	_eepromWriteByte
  1278                           
  1279                           ;MAIN.C: 236: }
  1280  008A  289F               	goto	l7567
  1281  008B                     l7557:	
  1282                           
  1283                           ;MAIN.C: 237: else {
  1284                           ;MAIN.C: 238: tmp = eepromReadByte(0x02) ;
  1285  008B  3002               	movlw	2
  1286  008C  2610               	fcall	_eepromReadByte
  1287  008D  1283               	bcf	3,5	;RP0=0, select bank0
  1288  008E  00DB               	movwf	main@tmp
  1289                           
  1290                           ;MAIN.C: 239: tmp++;
  1291  008F  0ADB               	incf	main@tmp,f
  1292                           
  1293                           ;MAIN.C: 240: eepromWriteByte(0x02, tmp);
  1294  0090  085B               	movf	main@tmp,w
  1295  0091  00F2               	movwf	?_eepromWriteByte
  1296  0092  3002               	movlw	2
  1297  0093  244A               	fcall	_eepromWriteByte
  1298  0094  3007               	movlw	7
  1299                           
  1300                           ;MAIN.C: 241: PwInNum = 0;
  1301  0095  1283               	bcf	3,5	;RP0=0, select bank0
  1302  0096  01E0               	clrf	_PwInNum
  1303  0097  01F2               	clrf	?_setState
  1304  0098  0AF2               	incf	?_setState,f
  1305  0099  289D               	goto	L2
  1306  009A                     l7565:	
  1307                           
  1308                           ;MAIN.C: 246: else {
  1309                           ;MAIN.C: 247: setState(1, 12);
  1310  009A  300C               	movlw	12
  1311  009B  00F2               	movwf	?_setState
  1312  009C  3001               	movlw	1
  1313  009D                     L2:	
  1314  009D  01F3               	clrf	?_setState+1
  1315  009E  25EF               	fcall	_setState
  1316  009F                     l7567:	
  1317                           
  1318                           ;MAIN.C: 248: }
  1319                           ;MAIN.C: 250: if (eepromReadByte(0x01) == 1) {
  1320  009F  3001               	movlw	1
  1321  00A0  2610               	fcall	_eepromReadByte
  1322  00A1  3A01               	xorlw	1
  1323  00A2  1D03               	skipz
  1324  00A3  28A8               	goto	l7571
  1325  00A4  3000               	movlw	0
  1326                           
  1327                           ;MAIN.C: 251: setState(0, 0);
  1328  00A5  01F2               	clrf	?_setState
  1329  00A6  01F3               	clrf	?_setState+1
  1330  00A7  25EF               	fcall	_setState
  1331  00A8                     l7571:	
  1332                           
  1333                           ;MAIN.C: 252: }
  1334                           ;MAIN.C: 253: }
  1335                           ;MAIN.C: 258: tmp = 0;
  1336  00A8  1283               	bcf	3,5	;RP0=0, select bank0
  1337  00A9  01DB               	clrf	main@tmp
  1338  00AA                     l7573:	
  1339                           
  1340                           ;MAIN.C: 263: idop = get_RFID();
  1341  00AA  2250               	fcall	_get_RFID
  1342  00AB  00DA               	movwf	main@idop
  1343                           
  1344                           ;MAIN.C: 265: if (idop) {
  1345  00AC  085A               	movf	main@idop,w
  1346  00AD  1903               	btfsc	3,2
  1347  00AE  29A5               	goto	l7691
  1348                           
  1349                           ;MAIN.C: 266: swUartSendString("\nTag: ");
  1350  00AF  3001               	movlw	(STR_1-__stringbase)& (0+255)
  1351  00B0  25D6               	fcall	_swUartSendString
  1352                           
  1353                           ;MAIN.C: 268: SendNum(keyID[1]);
  1354  00B1  1283               	bcf	3,5	;RP0=0, select bank0
  1355  00B2  0863               	movf	_keyID+1,w
  1356  00B3  2400               	fcall	_SendNum
  1357                           
  1358                           ;MAIN.C: 269: SendNum(keyID[2]);
  1359  00B4  1283               	bcf	3,5	;RP0=0, select bank0
  1360  00B5  0864               	movf	_keyID+2,w
  1361  00B6  2400               	fcall	_SendNum
  1362                           
  1363                           ;MAIN.C: 270: SendNum(keyID[3]);
  1364  00B7  1283               	bcf	3,5	;RP0=0, select bank0
  1365  00B8  0865               	movf	_keyID+3,w
  1366  00B9  2400               	fcall	_SendNum
  1367                           
  1368                           ;MAIN.C: 271: SendNum(keyID[4]);
  1369  00BA  1283               	bcf	3,5	;RP0=0, select bank0
  1370  00BB  0866               	movf	_keyID+4,w
  1371  00BC  2400               	fcall	_SendNum
  1372                           
  1373                           ;MAIN.C: 272: idop = id_search(keyID, buffTag);
  1374  00BD  3025               	movlw	_buffTag& (0+255)
  1375  00BE  00FA               	movwf	?_id_search
  1376  00BF  3062               	movlw	_keyID& (0+255)
  1377  00C0  2505               	fcall	_id_search
  1378  00C1  00DA               	movwf	main@idop
  1379                           
  1380                           ;MAIN.C: 273: switch (mtState) {
  1381  00C2  2989               	goto	l7685
  1382  00C3                     l7587:	
  1383                           
  1384                           ;MAIN.C: 276: case 1:
  1385                           ;MAIN.C: 277: case 2:
  1386                           ;MAIN.C: 279: if ((idop > 1) && (idop < 6))
  1387  00C3  3002               	movlw	2
  1388  00C4  025A               	subwf	main@idop,w
  1389  00C5  1C03               	skipc
  1390  00C6  28ED               	goto	l7599
  1391  00C7  3006               	movlw	6
  1392  00C8  025A               	subwf	main@idop,w
  1393  00C9  1803               	skipnc
  1394  00CA  28ED               	goto	l7599
  1395                           
  1396                           ;MAIN.C: 280: {
  1397                           ;MAIN.C: 281: if ( eepromReadByte(0x00) == 7) eepromWriteByte(0x00, 0);
  1398  00CB  3000               	movlw	0
  1399  00CC  2610               	fcall	_eepromReadByte
  1400  00CD  3A07               	xorlw	7
  1401  00CE  1D03               	skipz
  1402  00CF  28D3               	goto	l7595
  1403  00D0  3000               	movlw	0
  1404  00D1  01F2               	clrf	?_eepromWriteByte
  1405  00D2  244A               	fcall	_eepromWriteByte
  1406  00D3                     l7595:	
  1407                           
  1408                           ;MAIN.C: 282: if (mtState == 7) {
  1409  00D3  1283               	bcf	3,5	;RP0=0, select bank0
  1410  00D4  0861               	movf	_mtState,w
  1411  00D5  3A07               	xorlw	7
  1412  00D6  1D03               	skipz
  1413  00D7  28E4               	goto	l4188
  1414  00D8  3002               	movlw	2
  1415                           
  1416                           ;MAIN.C: 283: eepromWriteByte(0x02, 0);
  1417  00D9  01F2               	clrf	?_eepromWriteByte
  1418  00DA  244A               	fcall	_eepromWriteByte
  1419  00DB  3005               	movlw	5
  1420                           
  1421                           ;MAIN.C: 284: eepromWriteByte(0x05, 0);
  1422  00DC  01F2               	clrf	?_eepromWriteByte
  1423  00DD  244A               	fcall	_eepromWriteByte
  1424  00DE  3004               	movlw	4
  1425                           
  1426                           ;MAIN.C: 285: eepromWriteByte(0x04, 0);
  1427  00DF  01F2               	clrf	?_eepromWriteByte
  1428  00E0  244A               	fcall	_eepromWriteByte
  1429  00E1  3003               	movlw	3
  1430                           
  1431                           ;MAIN.C: 286: eepromWriteByte(0x03, 0);
  1432  00E2  01F2               	clrf	?_eepromWriteByte
  1433  00E3  244A               	fcall	_eepromWriteByte
  1434  00E4                     l4188:	
  1435  00E4  3000               	movlw	0
  1436                           
  1437                           ;MAIN.C: 287: }
  1438                           ;MAIN.C: 288: setState(0, 0);
  1439  00E5  01F2               	clrf	?_setState
  1440  00E6  01F3               	clrf	?_setState+1
  1441  00E7  25EF               	fcall	_setState
  1442  00E8  300A               	movlw	10
  1443                           
  1444                           ;MAIN.C: 289: beep(10, 1);
  1445  00E9  01F8               	clrf	?_beep
  1446  00EA  0AF8               	incf	?_beep,f
  1447  00EB  23D5               	fcall	_beep
  1448                           
  1449                           ;MAIN.C: 290: }
  1450  00EC  2994               	goto	l4191
  1451  00ED                     l7599:	
  1452                           
  1453                           ;MAIN.C: 292: else if (idop == 1)
  1454  00ED  0B5A               	decfsz	main@idop,w
  1455  00EE  2994               	goto	l4191
  1456                           
  1457                           ;MAIN.C: 293: {
  1458                           ;MAIN.C: 295: id_clear(2, 5);
  1459  00EF  3005               	movlw	5
  1460  00F0  00C2               	movwf	?_id_clear
  1461  00F1  3002               	movlw	2
  1462  00F2  246B               	fcall	_id_clear
  1463  00F3  3003               	movlw	3
  1464                           
  1465                           ;MAIN.C: 296: setState(3, 0);
  1466  00F4  01F2               	clrf	?_setState
  1467  00F5  01F3               	clrf	?_setState+1
  1468  00F6  25EF               	fcall	_setState
  1469  00F7  3003               	movlw	3
  1470                           
  1471                           ;MAIN.C: 297: tmp = 1;
  1472  00F8  01DB               	clrf	main@tmp
  1473  00F9  0ADB               	incf	main@tmp,f
  1474                           
  1475                           ;MAIN.C: 298: beep(10, 3);
  1476  00FA  00F8               	movwf	?_beep
  1477  00FB  300A               	movlw	10
  1478  00FC  23D5               	fcall	_beep
  1479  00FD  2994               	goto	l4191
  1480  00FE                     l7609:	
  1481                           
  1482                           ;MAIN.C: 304: if (idop <= 5 && idop != 1 ) {
  1483  00FE  3006               	movlw	6
  1484  00FF  025A               	subwf	main@idop,w
  1485  0100  1803               	skipnc
  1486  0101  2912               	goto	l7617
  1487  0102  035A               	decf	main@idop,w
  1488  0103  1903               	skipnz
  1489  0104  2912               	goto	l7617
  1490                           
  1491                           ;MAIN.C: 305: if (eepromReadByte(0x01) == 1) {
  1492  0105  3001               	movlw	1
  1493  0106  2610               	fcall	_eepromReadByte
  1494  0107  3A01               	xorlw	1
  1495  0108  1D03               	skipz
  1496  0109  2994               	goto	l4191
  1497  010A  3001               	movlw	1
  1498                           
  1499                           ;MAIN.C: 306: eepromWriteByte(0x01, 0);
  1500  010B  01F2               	clrf	?_eepromWriteByte
  1501  010C  244A               	fcall	_eepromWriteByte
  1502                           
  1503                           ;MAIN.C: 307: beep(10, 2);
  1504  010D  3002               	movlw	2
  1505  010E  00F8               	movwf	?_beep
  1506  010F  300A               	movlw	10
  1507  0110  23D5               	fcall	_beep
  1508  0111  2994               	goto	l4191
  1509  0112                     l7617:	
  1510                           
  1511                           ;MAIN.C: 311: else if (idop == 1) {
  1512  0112  0B5A               	decfsz	main@idop,w
  1513  0113  2994               	goto	l4191
  1514                           
  1515                           ;MAIN.C: 312: id_clear(2, 5);
  1516  0114  3005               	movlw	5
  1517  0115  00C2               	movwf	?_id_clear
  1518  0116  3002               	movlw	2
  1519  0117  246B               	fcall	_id_clear
  1520  0118  3003               	movlw	3
  1521                           
  1522                           ;MAIN.C: 313: setState(3, 0);
  1523  0119  01F2               	clrf	?_setState
  1524  011A  01F3               	clrf	?_setState+1
  1525  011B  25EF               	fcall	_setState
  1526  011C  3003               	movlw	3
  1527                           
  1528                           ;MAIN.C: 314: tmp = 1;
  1529  011D  01DB               	clrf	main@tmp
  1530  011E  0ADB               	incf	main@tmp,f
  1531                           
  1532                           ;MAIN.C: 315: beep(10, 3);
  1533  011F  00F8               	movwf	?_beep
  1534  0120  300A               	movlw	10
  1535  0121  23D5               	fcall	_beep
  1536  0122  2994               	goto	l4191
  1537  0123                     l7627:	
  1538                           
  1539                           ;MAIN.C: 321: if (idop == 1 && idState == 0) {
  1540  0123  0B5A               	decfsz	main@idop,w
  1541  0124  2937               	goto	l7639
  1542  0125  08D9               	movf	main@idState,f
  1543  0126  1D03               	skipz
  1544  0127  2937               	goto	l7639
  1545                           
  1546                           ;MAIN.C: 323: id_clear(2, 5);
  1547  0128  3005               	movlw	5
  1548  0129  00C2               	movwf	?_id_clear
  1549  012A  3002               	movlw	2
  1550  012B  246B               	fcall	_id_clear
  1551  012C  3003               	movlw	3
  1552                           
  1553                           ;MAIN.C: 324: setState(3, 0);
  1554  012D  01F2               	clrf	?_setState
  1555  012E  01F3               	clrf	?_setState+1
  1556  012F  25EF               	fcall	_setState
  1557  0130  3003               	movlw	3
  1558                           
  1559                           ;MAIN.C: 325: tmp = 1;
  1560  0131  01DB               	clrf	main@tmp
  1561  0132  0ADB               	incf	main@tmp,f
  1562                           
  1563                           ;MAIN.C: 326: beep(10, 3);
  1564  0133  00F8               	movwf	?_beep
  1565  0134  300A               	movlw	10
  1566  0135  23D5               	fcall	_beep
  1567                           
  1568                           ;MAIN.C: 327: }
  1569  0136  2994               	goto	l4191
  1570  0137                     l7639:	
  1571                           
  1572                           ;MAIN.C: 329: else if (idop == 2 && idState == 0) {
  1573  0137  085A               	movf	main@idop,w
  1574  0138  3A02               	xorlw	2
  1575  0139  1D03               	skipz
  1576  013A  2994               	goto	l4191
  1577  013B  08D9               	movf	main@idState,f
  1578  013C  1D03               	skipz
  1579  013D  2994               	goto	l4191
  1580                           
  1581                           ;MAIN.C: 331: id_clear(3, 5);
  1582  013E  3005               	movlw	5
  1583  013F  00C2               	movwf	?_id_clear
  1584  0140  3003               	movlw	3
  1585  0141  246B               	fcall	_id_clear
  1586  0142  3005               	movlw	5
  1587                           
  1588                           ;MAIN.C: 332: setState(5, 0);
  1589  0143  01F2               	clrf	?_setState
  1590  0144  01F3               	clrf	?_setState+1
  1591  0145  25EF               	fcall	_setState
  1592                           
  1593                           ;MAIN.C: 333: tmp = 2;
  1594  0146  3002               	movlw	2
  1595  0147  00DB               	movwf	main@tmp
  1596                           
  1597                           ;MAIN.C: 334: beep(10, 2);
  1598  0148  00F8               	movwf	?_beep
  1599  0149  300A               	movlw	10
  1600  014A  23D5               	fcall	_beep
  1601  014B  2994               	goto	l4191
  1602  014C                     l7651:	
  1603                           
  1604                           ;MAIN.C: 340: if (idState == 0) {
  1605  014C  08D9               	movf	main@idState,f
  1606  014D  1D03               	skipz
  1607  014E  2965               	goto	l7665
  1608                           
  1609                           ;MAIN.C: 347: if ( idop != 1) {
  1610  014F  035A               	decf	main@idop,w
  1611  0150  1903               	skipnz
  1612  0151  2994               	goto	l4191
  1613  0152  3006               	movlw	6
  1614                           
  1615                           ;MAIN.C: 348: tmp++;
  1616  0153  0ADB               	incf	main@tmp,f
  1617                           
  1618                           ;MAIN.C: 350: if (tmp <= 5) {
  1619  0154  025B               	subwf	main@tmp,w
  1620  0155  1803               	skipnc
  1621  0156  2994               	goto	l4191
  1622                           
  1623                           ;MAIN.C: 351: id_replate(tmp, keyID, buffTag);
  1624  0157  3062               	movlw	_keyID& (0+255)
  1625  0158  00BE               	movwf	?_id_replate
  1626  0159  3025               	movlw	_buffTag& (0+255)
  1627  015A  00BF               	movwf	?_id_replate+1
  1628  015B  085B               	movf	main@tmp,w
  1629  015C  239A               	fcall	_id_replate
  1630  015D  300A               	movlw	10
  1631                           
  1632                           ;MAIN.C: 352: timeTick = 0;
  1633  015E  1283               	bcf	3,5	;RP0=0, select bank0
  1634  015F  01DE               	clrf	_timeTick
  1635  0160  01DF               	clrf	_timeTick+1
  1636  0161  01F8               	clrf	?_beep
  1637  0162  0AF8               	incf	?_beep,f
  1638  0163  23D5               	fcall	_beep
  1639  0164  2994               	goto	l4191
  1640  0165                     l7665:	
  1641  0165  300A               	movlw	10
  1642                           
  1643                           ;MAIN.C: 359: beep(10, 1);
  1644  0166  01F8               	clrf	?_beep
  1645  0167  0AF8               	incf	?_beep,f
  1646  0168  23D5               	fcall	_beep
  1647  0169  2994               	goto	l4191
  1648  016A                     l7667:	
  1649                           
  1650                           ;MAIN.C: 365: if (idState == 0) {
  1651  016A  08D9               	movf	main@idState,f
  1652  016B  1D03               	skipz
  1653  016C  2984               	goto	l7681
  1654                           
  1655                           ;MAIN.C: 366: if ( idop > 2) {
  1656  016D  3003               	movlw	3
  1657  016E  025A               	subwf	main@idop,w
  1658  016F  1C03               	skipc
  1659  0170  2994               	goto	l4191
  1660  0171  3006               	movlw	6
  1661                           
  1662                           ;MAIN.C: 367: tmp++;
  1663  0172  0ADB               	incf	main@tmp,f
  1664                           
  1665                           ;MAIN.C: 369: if (tmp <= 5) {
  1666  0173  025B               	subwf	main@tmp,w
  1667  0174  1803               	skipnc
  1668  0175  2994               	goto	l4191
  1669                           
  1670                           ;MAIN.C: 370: id_replate(tmp, keyID, buffTag);
  1671  0176  3062               	movlw	_keyID& (0+255)
  1672  0177  00BE               	movwf	?_id_replate
  1673  0178  3025               	movlw	_buffTag& (0+255)
  1674  0179  00BF               	movwf	?_id_replate+1
  1675  017A  085B               	movf	main@tmp,w
  1676  017B  239A               	fcall	_id_replate
  1677  017C  300A               	movlw	10
  1678                           
  1679                           ;MAIN.C: 371: timeTick = 0;
  1680  017D  1283               	bcf	3,5	;RP0=0, select bank0
  1681  017E  01DE               	clrf	_timeTick
  1682  017F  01DF               	clrf	_timeTick+1
  1683  0180  01F8               	clrf	?_beep
  1684  0181  0AF8               	incf	?_beep,f
  1685  0182  23D5               	fcall	_beep
  1686  0183  2994               	goto	l4191
  1687  0184                     l7681:	
  1688  0184  300A               	movlw	10
  1689                           
  1690                           ;MAIN.C: 378: beep(10, 1);
  1691  0185  01F8               	clrf	?_beep
  1692  0186  0AF8               	incf	?_beep,f
  1693  0187  23D5               	fcall	_beep
  1694  0188  2994               	goto	l4191
  1695  0189                     l7685:	
  1696  0189  0861               	movf	_mtState,w
  1697                           
  1698                           ; Switch size 1, requested type "space"
  1699                           ; Number of cases is 7, Range of values is 0 to 7
  1700                           ; switch strategies available:
  1701                           ; Name         Instructions Cycles
  1702                           ; direct_byte           14     6 (fixed)
  1703                           ; simple_byte           22    12 (average)
  1704                           ; jumptable            260     6 (fixed)
  1705                           ; rangetable            12     6 (fixed)
  1706                           ; spacedrange           22     9 (fixed)
  1707                           ; locatedrange           8     3 (fixed)
  1708                           ;	Chosen strategy is direct_byte
  1709  018A  0084               	movwf	4
  1710  018B  3008               	movlw	8
  1711  018C  0204               	subwf	4,w
  1712  018D  1803               	skipnc
  1713  018E  2994               	goto	l4191
  1714  018F  3006               	movlw	high S7787
  1715  0190  008A               	movwf	10
  1716  0191  3000               	movlw	low S7787
  1717  0192  0704               	addwf	4,w
  1718  0193  0082               	movwf	2
  1719  0194                     l4191:	
  1720                           
  1721                           ;MAIN.C: 384: idState = 1;
  1722  0194  1283               	bcf	3,5	;RP0=0, select bank0
  1723  0195  01D9               	clrf	main@idState
  1724  0196  0AD9               	incf	main@idState,f
  1725                           
  1726                           ;MAIN.C: 385: if (mtState != 2) _delay((unsigned long)((61)*(8000000/4000.0)));
  1727  0197  0861               	movf	_mtState,w
  1728  0198  3A02               	xorlw	2
  1729  0199  1903               	skipnz
  1730  019A  29B6               	goto	l4214
  1731  019B  309F               	movlw	159
  1732  019C  00D3               	movwf	??_main+1
  1733  019D  306F               	movlw	111
  1734  019E  00D2               	movwf	??_main
  1735  019F                     u2337:	
  1736  019F  0BD2               	decfsz	??_main,f
  1737  01A0  299F               	goto	u2337
  1738  01A1  0BD3               	decfsz	??_main+1,f
  1739  01A2  299F               	goto	u2337
  1740  01A3  29A4               	nop2
  1741  01A4  29B6               	goto	l4214
  1742  01A5                     l7691:	
  1743                           
  1744                           ;MAIN.C: 387: else {
  1745                           ;MAIN.C: 388: idState = 0;
  1746  01A5  01D9               	clrf	main@idState
  1747                           
  1748                           ;MAIN.C: 389: if (mtState != 2) _delay((unsigned long)((150)*(8000000/4000.0)));
  1749  01A6  0861               	movf	_mtState,w
  1750  01A7  3A02               	xorlw	2
  1751  01A8  1903               	skipnz
  1752  01A9  29B6               	goto	l4214
  1753  01AA  3002               	movlw	2
  1754  01AB  00D4               	movwf	??_main+2
  1755  01AC  3086               	movlw	134
  1756  01AD  00D3               	movwf	??_main+1
  1757  01AE  3099               	movlw	153
  1758  01AF  00D2               	movwf	??_main
  1759  01B0                     u2347:	
  1760  01B0  0BD2               	decfsz	??_main,f
  1761  01B1  29B0               	goto	u2347
  1762  01B2  0BD3               	decfsz	??_main+1,f
  1763  01B3  29B0               	goto	u2347
  1764  01B4  0BD4               	decfsz	??_main+2,f
  1765  01B5  29B0               	goto	u2347
  1766  01B6                     l4214:	
  1767                           
  1768                           ;MAIN.C: 390: }
  1769                           ;MAIN.C: 394: if ((timeOut != 0) && ( timeTick > timeOut)) {
  1770  01B6  1283               	bcf	3,5	;RP0=0, select bank0
  1771  01B7  085D               	movf	_timeOut+1,w
  1772  01B8  045C               	iorwf	_timeOut,w
  1773  01B9  1903               	skipnz
  1774  01BA  2A08               	goto	l7727
  1775  01BB  085F               	movf	_timeTick+1,w
  1776  01BC  025D               	subwf	_timeOut+1,w
  1777  01BD  1D03               	skipz
  1778  01BE  29C1               	goto	u2245
  1779  01BF  085E               	movf	_timeTick,w
  1780  01C0  025C               	subwf	_timeOut,w
  1781  01C1                     u2245:	
  1782  01C1  1C03               	btfss	3,0
  1783  01C2  29FA               	goto	l7725
  1784  01C3  2A08               	goto	l7727
  1785  01C4                     l7701:	
  1786                           
  1787                           ;MAIN.C: 399: setState(2, 15);
  1788  01C4  300F               	movlw	15
  1789  01C5  00F2               	movwf	?_setState
  1790  01C6  3002               	movlw	2
  1791  01C7  01F3               	clrf	?_setState+1
  1792  01C8  25EF               	fcall	_setState
  1793                           
  1794                           ;MAIN.C: 401: break;
  1795  01C9  2A08               	goto	l7727
  1796  01CA                     l7703:	
  1797                           
  1798                           ;MAIN.C: 403: setState(6, 7);
  1799  01CA  3007               	movlw	7
  1800  01CB  00F2               	movwf	?_setState
  1801  01CC  3006               	movlw	6
  1802  01CD  01F3               	clrf	?_setState+1
  1803  01CE  25EF               	fcall	_setState
  1804                           
  1805                           ;MAIN.C: 404: break;
  1806  01CF  2A08               	goto	l7727
  1807  01D0                     l7705:	
  1808  01D0  3002               	movlw	2
  1809                           
  1810                           ;MAIN.C: 406: setState(2, 0);
  1811  01D1  01F2               	clrf	?_setState
  1812  01D2  01F3               	clrf	?_setState+1
  1813  01D3  25EF               	fcall	_setState
  1814                           
  1815                           ;MAIN.C: 408: eepromWriteByte(0x00, 7);
  1816  01D4  3007               	movlw	7
  1817  01D5  00F2               	movwf	?_eepromWriteByte
  1818  01D6  3000               	movlw	0
  1819  01D7  244A               	fcall	_eepromWriteByte
  1820  01D8  3002               	movlw	2
  1821                           
  1822                           ;MAIN.C: 409: eepromWriteByte(0x02, 0);
  1823  01D9  01F2               	clrf	?_eepromWriteByte
  1824  01DA  244A               	fcall	_eepromWriteByte
  1825                           
  1826                           ;MAIN.C: 410: break;
  1827  01DB  2A08               	goto	l7727
  1828  01DC                     l4222:	
  1829                           ;MAIN.C: 411: case 7:
  1830                           
  1831                           
  1832                           ;MAIN.C: 413: if (RA2 == 1) {
  1833  01DC  1D05               	btfss	5,2
  1834  01DD  2A08               	goto	l7727
  1835  01DE  3002               	movlw	2
  1836                           
  1837                           ;MAIN.C: 414: PwInNum++;
  1838  01DF  0AE0               	incf	_PwInNum,f
  1839                           
  1840                           ;MAIN.C: 415: tmp = eepromReadByte(0x02);
  1841  01E0  2610               	fcall	_eepromReadByte
  1842  01E1  1283               	bcf	3,5	;RP0=0, select bank0
  1843  01E2  00DB               	movwf	main@tmp
  1844                           
  1845                           ;MAIN.C: 416: if (tmp > 0 && tmp < 4) {
  1846  01E3  085B               	movf	main@tmp,w
  1847  01E4  1903               	btfsc	3,2
  1848  01E5  29F0               	goto	l7719
  1849  01E6  3004               	movlw	4
  1850  01E7  025B               	subwf	main@tmp,w
  1851  01E8  1803               	skipnc
  1852  01E9  29F0               	goto	l7719
  1853                           
  1854                           ;MAIN.C: 417: tmp--;
  1855  01EA  03DB               	decf	main@tmp,f
  1856                           
  1857                           ;MAIN.C: 418: eepromWriteByte(0x03 + tmp, PwInNum);
  1858  01EB  0860               	movf	_PwInNum,w
  1859  01EC  00F2               	movwf	?_eepromWriteByte
  1860  01ED  085B               	movf	main@tmp,w
  1861  01EE  3E03               	addlw	3
  1862  01EF  244A               	fcall	_eepromWriteByte
  1863  01F0                     l7719:	
  1864  01F0  300A               	movlw	10
  1865                           
  1866                           ;MAIN.C: 419: }
  1867                           ;MAIN.C: 421: beep(10, 1);
  1868  01F1  01F8               	clrf	?_beep
  1869  01F2  0AF8               	incf	?_beep,f
  1870  01F3  23D5               	fcall	_beep
  1871  01F4  3007               	movlw	7
  1872                           
  1873                           ;MAIN.C: 422: setState(7, 1);
  1874  01F5  01F2               	clrf	?_setState
  1875  01F6  0AF2               	incf	?_setState,f
  1876  01F7  01F3               	clrf	?_setState+1
  1877  01F8  25EF               	fcall	_setState
  1878  01F9  2A08               	goto	l7727
  1879  01FA                     l7725:	
  1880  01FA  0861               	movf	_mtState,w
  1881                           
  1882                           ; Switch size 1, requested type "space"
  1883                           ; Number of cases is 4, Range of values is 1 to 7
  1884                           ; switch strategies available:
  1885                           ; Name         Instructions Cycles
  1886                           ; simple_byte           13     7 (average)
  1887                           ; direct_byte           16     9 (fixed)
  1888                           ; jumptable            263     9 (fixed)
  1889                           ;	Chosen strategy is simple_byte
  1890  01FB  3A01               	xorlw	1	; case 1
  1891  01FC  1903               	skipnz
  1892  01FD  29C4               	goto	l7701
  1893  01FE  3A03               	xorlw	3	; case 2
  1894  01FF  1903               	skipnz
  1895  0200  29CA               	goto	l7703
  1896  0201  3A04               	xorlw	4	; case 6
  1897  0202  1903               	skipnz
  1898  0203  29D0               	goto	l7705
  1899  0204  3A01               	xorlw	1	; case 7
  1900  0205  1903               	skipnz
  1901  0206  29DC               	goto	l4222
  1902  0207  2A08               	goto	l7727
  1903  0208                     l7727:	
  1904                           
  1905                           ;MAIN.C: 442: }
  1906                           ;MAIN.C: 445: if (mtState == 0) RC1 = 1;
  1907  0208  1283               	bcf	3,5	;RP0=0, select bank0
  1908  0209  08E1               	movf	_mtState,f
  1909  020A  1D03               	skipz
  1910  020B  2A0E               	goto	l4225
  1911  020C  1487               	bsf	7,1
  1912  020D  2A0F               	goto	l7731
  1913  020E                     l4225:	
  1914                           
  1915                           ;MAIN.C: 446: else RC1 = 0;
  1916  020E  1087               	bcf	7,1
  1917  020F                     l7731:	
  1918                           
  1919                           ;MAIN.C: 452: if (mtState == 2) {
  1920  020F  0861               	movf	_mtState,w
  1921  0210  3A02               	xorlw	2
  1922  0211  1D03               	skipz
  1923  0212  2A3E               	goto	l7747
  1924                           
  1925                           ;MAIN.C: 456: if (buzFre) t = 1600;
  1926  0213  0858               	movf	main@buzFre,w
  1927  0214  1903               	btfsc	3,2
  1928  0215  2A1A               	goto	l7737
  1929  0216  3040               	movlw	64
  1930  0217  00D5               	movwf	main@t
  1931  0218  3006               	movlw	6
  1932  0219  2A1D               	goto	L3
  1933  021A                     l7737:	
  1934                           
  1935                           ;MAIN.C: 457: else t = 2666;
  1936  021A  306A               	movlw	106
  1937  021B  00D5               	movwf	main@t
  1938  021C  300A               	movlw	10
  1939  021D                     L3:	
  1940  021D  00D6               	movwf	main@t+1
  1941  021E                     l4230:	
  1942  021E  3001               	movlw	1
  1943  021F  1283               	bcf	3,5	;RP0=0, select bank0
  1944  0220  02D5               	subwf	main@t,f
  1945  0221  3000               	movlw	0
  1946  0222  1C03               	skipc
  1947  0223  03D6               	decf	main@t+1,f
  1948  0224  02D6               	subwf	main@t+1,f
  1949  0225  0A55               	incf	main@t,w
  1950  0226  1903               	skipnz
  1951  0227  0A56               	incf	main@t+1,w
  1952  0228  1903               	btfsc	3,2
  1953  0229  2A3B               	goto	l7745
  1954                           
  1955                           ;MAIN.C: 460: RA3 = ~RA3;
  1956  022A  3008               	movlw	8
  1957  022B  0685               	xorwf	5,f
  1958                           
  1959                           ;MAIN.C: 461: if (buzFre) {_delay((unsigned long)((480)*(8000000/4000000.0)));}
  1960  022C  0858               	movf	main@buzFre,w
  1961  022D  1903               	btfsc	3,2
  1962  022E  2A36               	goto	l7743
  1963  022F  3089               	movlw	137
  1964  0230  00D2               	movwf	??_main
  1965  0231                     u2357:	
  1966  0231  2A32               	nop2
  1967  0232  2A33               	nop2
  1968  0233  0BD2               	decfsz	??_main,f
  1969  0234  2A31               	goto	u2357
  1970  0235  2A1E               	goto	l4230
  1971  0236                     l7743:	
  1972                           
  1973                           ;MAIN.C: 462: else {_delay((unsigned long)((290)*(8000000/4000000.0)));}
  1974  0236  30C1               	movlw	193
  1975  0237  00D2               	movwf	??_main
  1976  0238                     u2367:	
  1977  0238  0BD2               	decfsz	??_main,f
  1978  0239  2A38               	goto	u2367
  1979  023A  2A1E               	goto	l4230
  1980  023B                     l7745:	
  1981                           
  1982                           ;MAIN.C: 463: }
  1983                           ;MAIN.C: 464: buzFre = ~buzFre;
  1984  023B  30FF               	movlw	255
  1985  023C  06D8               	xorwf	main@buzFre,f
  1986                           
  1987                           ;MAIN.C: 466: }
  1988  023D  2A4B               	goto	l7749
  1989  023E                     l7747:	
  1990                           
  1991                           ;MAIN.C: 467: else {_delay((unsigned long)((800)*(8000000/4000.0)));}
  1992  023E  3009               	movlw	9
  1993  023F  00D4               	movwf	??_main+2
  1994  0240  301E               	movlw	30
  1995  0241  00D3               	movwf	??_main+1
  1996  0242  30EB               	movlw	235
  1997  0243  00D2               	movwf	??_main
  1998  0244                     u2377:	
  1999  0244  0BD2               	decfsz	??_main,f
  2000  0245  2A44               	goto	u2377
  2001  0246  0BD3               	decfsz	??_main+1,f
  2002  0247  2A44               	goto	u2377
  2003  0248  0BD4               	decfsz	??_main+2,f
  2004  0249  2A44               	goto	u2377
  2005  024A  0064               	clrwdt
  2006  024B                     l7749:	
  2007                           
  2008                           ;MAIN.C: 470: timeTick++;
  2009  024B  1283               	bcf	3,5	;RP0=0, select bank0
  2010  024C  0ADE               	incf	_timeTick,f
  2011  024D  1903               	skipnz
  2012  024E  0ADF               	incf	_timeTick+1,f
  2013  024F  28AA               	goto	l7573
  2014  0250                     __end_of_main:	
  2015                           
  2016                           	psect	swtext1
  2017  0600                     __pswtext1:	
  2018  0600                     S7787:	
  2019  0600  28FE               	ljmp	l7609
  2020  0601  28C3               	ljmp	l7587
  2021  0602  28C3               	ljmp	l7587
  2022  0603  294C               	ljmp	l7651
  2023  0604  2994               	ljmp	l4191
  2024  0605  296A               	ljmp	l7667
  2025  0606  2923               	ljmp	l7627
  2026  0607  28C3               	ljmp	l7587
  2027                           
  2028                           	psect	text560
  2029  046B                     __ptext560:	
  2030 ;; =============== function _main ends ============
  2031                           
  2032                           
  2033 ;; *************** function _id_clear *****************
  2034 ;; Defined at:
  2035 ;;		line 135 in file "MAIN.C"
  2036 ;; Parameters:    Size  Location     Type
  2037 ;;  idMin           1    wreg     unsigned char 
  2038 ;;  idMax           1    4[BANK0 ] unsigned char 
  2039 ;; Auto vars:     Size  Location     Type
  2040 ;;  idMin           1   10[BANK0 ] unsigned char 
  2041 ;;  tmp             5    5[BANK0 ] unsigned char [5]
  2042 ;; Return value:  Size  Location     Type
  2043 ;;		None               void
  2044 ;; Registers used:
  2045 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2046 ;; Tracked objects:
  2047 ;;		On entry : 20/0
  2048 ;;		On exit  : 20/0
  2049 ;;		Unchanged: 0/0
  2050 ;; Data sizes:     COMMON   BANK0   BANK1
  2051 ;;      Params:         0       1       0
  2052 ;;      Locals:         0       6       0
  2053 ;;      Temps:          0       0       0
  2054 ;;      Totals:         0       7       0
  2055 ;;Total ram usage:        7 bytes
  2056 ;; Hardware stack levels used:    1
  2057 ;; Hardware stack levels required when called:    4
  2058 ;; This function calls:
  2059 ;;		_id_replate
  2060 ;; This function is called by:
  2061 ;;		_main
  2062 ;; This function uses a non-reentrant model
  2063 ;;
  2064  046B                     _id_clear:	
  2065                           
  2066                           ; Regs used in _id_clear: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2067                           ;id_clear@idMin stored from wreg
  2068  046B  00C8               	movwf	id_clear@idMin
  2069                           
  2070                           ;MAIN.C: 136: unsigned char tmp[5] = {0xff, 0xff, 0xff, 0xff, 0xff};
  2071  046C  3043               	movlw	id_clear@tmp& (0+255)
  2072  046D  0084               	movwf	4
  2073  046E  0820               	movf	id_clear@F1108,w
  2074  046F  1383               	bcf	3,7	;select IRP bank0
  2075  0470  0080               	movwf	0
  2076  0471  0A84               	incf	4,f
  2077  0472  0821               	movf	id_clear@F1108+1,w
  2078  0473  0080               	movwf	0
  2079  0474  0A84               	incf	4,f
  2080  0475  0822               	movf	id_clear@F1108+2,w
  2081  0476  0080               	movwf	0
  2082  0477  0A84               	incf	4,f
  2083  0478  0823               	movf	id_clear@F1108+3,w
  2084  0479  0080               	movwf	0
  2085  047A  0A84               	incf	4,f
  2086  047B  0824               	movf	id_clear@F1108+4,w
  2087  047C  0080               	movwf	0
  2088  047D                     l7503:	
  2089  047D  0848               	movf	id_clear@idMin,w
  2090  047E  0242               	subwf	id_clear@idMax,w
  2091  047F  1C03               	btfss	3,0
  2092  0480  0008               	return
  2093                           
  2094                           ;MAIN.C: 138: id_replate(idMin, tmp, buffTag);
  2095  0481  3043               	movlw	id_clear@tmp& (0+255)
  2096  0482  00BE               	movwf	?_id_replate
  2097  0483  3025               	movlw	_buffTag& (0+255)
  2098  0484  00BF               	movwf	?_id_replate+1
  2099  0485  0848               	movf	id_clear@idMin,w
  2100  0486  239A               	fcall	_id_replate
  2101  0487  1283               	bcf	3,5	;RP0=0, select bank0
  2102  0488  0AC8               	incf	id_clear@idMin,f
  2103  0489  2C7D               	goto	l7503
  2104  048A                     __end_of_id_clear:	
  2105                           
  2106                           	psect	text561
  2107  039A                     __ptext561:	
  2108 ;; =============== function _id_clear ends ============
  2109                           
  2110                           
  2111 ;; *************** function _id_replate *****************
  2112 ;; Defined at:
  2113 ;;		line 121 in file "MAIN.C"
  2114 ;; Parameters:    Size  Location     Type
  2115 ;;  id              1    wreg     unsigned char 
  2116 ;;  Cont            1    0[BANK0 ] PTR unsigned char 
  2117 ;;		 -> id_clear@tmp(5), keyID(5), 
  2118 ;;  buff            1    1[BANK0 ] PTR unsigned char 
  2119 ;;		 -> buffTag(25), 
  2120 ;; Auto vars:     Size  Location     Type
  2121 ;;  id              1   11[COMMON] unsigned char 
  2122 ;; Return value:  Size  Location     Type
  2123 ;;		None               void
  2124 ;; Registers used:
  2125 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2126 ;; Tracked objects:
  2127 ;;		On entry : 20/0
  2128 ;;		On exit  : 0/0
  2129 ;;		Unchanged: 0/0
  2130 ;; Data sizes:     COMMON   BANK0   BANK1
  2131 ;;      Params:         0       2       0
  2132 ;;      Locals:         1       0       0
  2133 ;;      Temps:          0       2       0
  2134 ;;      Totals:         1       4       0
  2135 ;;Total ram usage:        5 bytes
  2136 ;; Hardware stack levels used:    1
  2137 ;; Hardware stack levels required when called:    3
  2138 ;; This function calls:
  2139 ;;		___bmul
  2140 ;;		_eepromWriteBlock
  2141 ;; This function is called by:
  2142 ;;		_id_clear
  2143 ;;		_main
  2144 ;; This function uses a non-reentrant model
  2145 ;;
  2146  039A                     _id_replate:	
  2147                           
  2148                           ; Regs used in _id_replate: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2149                           ;id_replate@id stored from wreg
  2150  039A  00FB               	movwf	id_replate@id
  2151                           
  2152                           ;MAIN.C: 122: id = (id - 1) * 5;
  2153  039B  3005               	movlw	5
  2154  039C  00F2               	movwf	?___bmul
  2155  039D  087B               	movf	id_replate@id,w
  2156  039E  3EFF               	addlw	255
  2157  039F  25AD               	fcall	___bmul
  2158  03A0  00FB               	movwf	id_replate@id
  2159                           
  2160                           ;MAIN.C: 123: {
  2161                           ;MAIN.C: 124: {
  2162                           ;MAIN.C: 125: *(buff + id) = *Cont;
  2163  03A1  083E               	movf	id_replate@Cont,w
  2164  03A2  0084               	movwf	4
  2165  03A3  1383               	bcf	3,7	;select IRP bank0
  2166  03A4  0800               	movf	0,w
  2167  03A5  00C0               	movwf	??_id_replate
  2168  03A6  087B               	movf	id_replate@id,w
  2169  03A7  073F               	addwf	id_replate@buff,w
  2170  03A8  00C1               	movwf	??_id_replate+1
  2171  03A9  0084               	movwf	4
  2172  03AA  0840               	movf	??_id_replate,w
  2173  03AB  0080               	movwf	0
  2174                           
  2175                           ;MAIN.C: 126: *(buff + 1 + id) = *(Cont + 1);
  2176  03AC  083E               	movf	id_replate@Cont,w
  2177  03AD  3E01               	addlw	1
  2178  03AE  23CE               	fcall	PL3	;call to abstracted procedure
  2179  03AF  3E01               	addlw	1
  2180  03B0  0084               	movwf	4
  2181  03B1  0840               	movf	??_id_replate,w
  2182  03B2  0080               	movwf	0
  2183                           
  2184                           ;MAIN.C: 127: *(buff + 2 + id) = *(Cont + 2);
  2185  03B3  083E               	movf	id_replate@Cont,w
  2186  03B4  3E02               	addlw	2
  2187  03B5  23CE               	fcall	PL3	;call to abstracted procedure
  2188  03B6  3E02               	addlw	2
  2189  03B7  0084               	movwf	4
  2190  03B8  0840               	movf	??_id_replate,w
  2191  03B9  0080               	movwf	0
  2192                           
  2193                           ;MAIN.C: 128: *(buff + 3 + id) = *(Cont + 3);
  2194  03BA  083E               	movf	id_replate@Cont,w
  2195  03BB  3E03               	addlw	3
  2196  03BC  23CE               	fcall	PL3	;call to abstracted procedure
  2197  03BD  3E03               	addlw	3
  2198  03BE  0084               	movwf	4
  2199  03BF  0840               	movf	??_id_replate,w
  2200  03C0  0080               	movwf	0
  2201                           
  2202                           ;MAIN.C: 129: *(buff + 4 + id) = *(Cont + 4);
  2203  03C1  083E               	movf	id_replate@Cont,w
  2204  03C2  3E04               	addlw	4
  2205  03C3  23CE               	fcall	PL3	;call to abstracted procedure
  2206  03C4  3E04               	addlw	4
  2207  03C5  0084               	movwf	4
  2208  03C6  0840               	movf	??_id_replate,w
  2209  03C7  0080               	movwf	0
  2210                           
  2211                           ;MAIN.C: 130: }
  2212                           ;MAIN.C: 131: }
  2213                           ;MAIN.C: 133: eepromWriteBlock(0x06, buffTag, 25);
  2214  03C8  3025               	movlw	_buffTag& (0+255)
  2215  03C9  00F6               	movwf	?_eepromWriteBlock
  2216  03CA  3019               	movlw	25
  2217  03CB  00F7               	movwf	?_eepromWriteBlock+1
  2218  03CC  3006               	movlw	6
  2219  03CD  2D6B               	ljmp	_eepromWriteBlock
  2220  03CE                     __end_of_id_replate:	
  2221  03CE                     PL3:	
  2222  03CE  0084               	movwf	4
  2223  03CF  0800               	movf	0,w
  2224  03D0  00C0               	movwf	??_id_replate
  2225  03D1  087B               	movf	id_replate@id,w
  2226  03D2  073F               	addwf	id_replate@buff,w
  2227  03D3  00C1               	movwf	??_id_replate+1
  2228  03D4  0008               	return
  2229                           
  2230                           	psect	text562
  2231  0400                     __ptext562:	
  2232 ;; =============== function _id_replate ends ============
  2233                           
  2234                           
  2235 ;; *************** function _SendNum *****************
  2236 ;; Defined at:
  2237 ;;		line 42 in file "SWUART.C"
  2238 ;; Parameters:    Size  Location     Type
  2239 ;;  num             1    wreg     unsigned char 
  2240 ;; Auto vars:     Size  Location     Type
  2241 ;;  num             1    9[COMMON] unsigned char 
  2242 ;;  nib             1   10[COMMON] unsigned char 
  2243 ;; Return value:  Size  Location     Type
  2244 ;;		None               void
  2245 ;; Registers used:
  2246 ;;		wreg, status,2, status,0, pclath, cstack
  2247 ;; Tracked objects:
  2248 ;;		On entry : 20/0
  2249 ;;		On exit  : 0/0
  2250 ;;		Unchanged: 0/0
  2251 ;; Data sizes:     COMMON   BANK0   BANK1
  2252 ;;      Params:         0       0       0
  2253 ;;      Locals:         6       0       0
  2254 ;;      Temps:          0       0       0
  2255 ;;      Totals:         6       0       0
  2256 ;;Total ram usage:        6 bytes
  2257 ;; Hardware stack levels used:    1
  2258 ;; Hardware stack levels required when called:    2
  2259 ;; This function calls:
  2260 ;;		_swUartSendByte
  2261 ;; This function is called by:
  2262 ;;		_main
  2263 ;; This function uses a non-reentrant model
  2264 ;;
  2265  0400                     _SendNum:	
  2266                           
  2267                           ; Regs used in _SendNum: [wreg+status,2+status,0+pclath+cstack]
  2268                           ;SendNum@num stored from wreg
  2269  0400  00F9               	movwf	SendNum@num
  2270                           
  2271                           ;SWUART.C: 43: unsigned char nib = num>>4;
  2272  0401  0E79               	swapf	SendNum@num,w
  2273  0402  390F               	andlw	15
  2274  0403  00FA               	movwf	SendNum@nib
  2275                           
  2276                           ;SWUART.C: 44: swUartSendByte(nib <10 ? (nib+'0') :(nib+'A'-10));
  2277  0404  300A               	movlw	10
  2278  0405  027A               	subwf	SendNum@nib,w
  2279  0406  087A               	movf	SendNum@nib,w
  2280  0407  00F5               	movwf	_SendNum$5067
  2281  0408  1C03               	skipc
  2282  0409  2C0C               	goto	L6
  2283  040A  3037               	movlw	55
  2284  040B  2C0D               	goto	L4
  2285  040C                     L6:	
  2286  040C  3030               	movlw	48
  2287  040D                     L4:	
  2288  040D  01F6               	clrf	_SendNum$5067+1
  2289  040E  07F5               	addwf	_SendNum$5067,f
  2290  040F  1803               	skipnc
  2291  0410  0AF6               	incf	_SendNum$5067+1,f
  2292  0411  0875               	movf	_SendNum$5067,w
  2293  0412  2426               	fcall	_swUartSendByte
  2294                           
  2295                           ;SWUART.C: 45: nib = num&0x0f;
  2296  0413  0879               	movf	SendNum@num,w
  2297  0414  00FA               	movwf	SendNum@nib
  2298  0415  300F               	movlw	15
  2299  0416  05FA               	andwf	SendNum@nib,f
  2300                           
  2301                           ;SWUART.C: 46: swUartSendByte(nib <10 ? (nib+'0') :(nib+'A'-10));
  2302  0417  300A               	movlw	10
  2303  0418  027A               	subwf	SendNum@nib,w
  2304  0419  087A               	movf	SendNum@nib,w
  2305  041A  00F7               	movwf	_SendNum$5068
  2306  041B  1C03               	skipc
  2307  041C  2C1F               	goto	L7
  2308  041D  3037               	movlw	55
  2309  041E  2C20               	goto	L5
  2310  041F                     L7:	
  2311  041F  3030               	movlw	48
  2312  0420                     L5:	
  2313  0420  01F8               	clrf	_SendNum$5068+1
  2314  0421  07F7               	addwf	_SendNum$5068,f
  2315  0422  1803               	skipnc
  2316  0423  0AF8               	incf	_SendNum$5068+1,f
  2317  0424  0877               	movf	_SendNum$5068,w
  2318  0425  2C26               	ljmp	_swUartSendByte
  2319  0426                     __end_of_SendNum:	
  2320                           
  2321                           	psect	text563
  2322  05D6                     __ptext563:	
  2323 ;; =============== function _SendNum ends ============
  2324                           
  2325                           
  2326 ;; *************** function _swUartSendString *****************
  2327 ;; Defined at:
  2328 ;;		line 35 in file "SWUART.C"
  2329 ;; Parameters:    Size  Location     Type
  2330 ;;  str             1    wreg     PTR unsigned char 
  2331 ;;		 -> STR_1(7), 
  2332 ;; Auto vars:     Size  Location     Type
  2333 ;;  str             1    5[COMMON] PTR unsigned char 
  2334 ;;		 -> STR_1(7), 
  2335 ;; Return value:  Size  Location     Type
  2336 ;;		None               void
  2337 ;; Registers used:
  2338 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2339 ;; Tracked objects:
  2340 ;;		On entry : 20/0
  2341 ;;		On exit  : 0/0
  2342 ;;		Unchanged: 0/0
  2343 ;; Data sizes:     COMMON   BANK0   BANK1
  2344 ;;      Params:         0       0       0
  2345 ;;      Locals:         1       0       0
  2346 ;;      Temps:          0       0       0
  2347 ;;      Totals:         1       0       0
  2348 ;;Total ram usage:        1 bytes
  2349 ;; Hardware stack levels used:    1
  2350 ;; Hardware stack levels required when called:    2
  2351 ;; This function calls:
  2352 ;;		_swUartSendByte
  2353 ;; This function is called by:
  2354 ;;		_main
  2355 ;; This function uses a non-reentrant model
  2356 ;;
  2357  05D6                     _swUartSendString:	
  2358                           
  2359                           ; Regs used in _swUartSendString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2360                           ;swUartSendString@str stored from wreg
  2361  05D6  00F5               	movwf	swUartSendString@str
  2362  05D7                     l7459:	
  2363                           ;SWUART.C: 36: while(*str){
  2364                           
  2365  05D7  0875               	movf	swUartSendString@str,w
  2366  05D8  0084               	movwf	4
  2367  05D9  25C9               	fcall	stringdir
  2368  05DA  3800               	iorlw	0
  2369  05DB  1903               	btfsc	3,2
  2370  05DC  0008               	return
  2371                           
  2372                           ;SWUART.C: 37: swUartSendByte((char)*str);
  2373  05DD  0875               	movf	swUartSendString@str,w
  2374  05DE  0084               	movwf	4
  2375  05DF  25C9               	fcall	stringdir
  2376  05E0  2426               	fcall	_swUartSendByte
  2377                           
  2378                           ;SWUART.C: 38: str++;
  2379  05E1  0AF5               	incf	swUartSendString@str,f
  2380  05E2  2DD7               	goto	l7459
  2381  05E3                     __end_of_swUartSendString:	
  2382                           
  2383                           	psect	text564
  2384  03D5                     __ptext564:	
  2385 ;; =============== function _swUartSendString ends ============
  2386                           
  2387                           
  2388 ;; *************** function _beep *****************
  2389 ;; Defined at:
  2390 ;;		line 28 in file "MAIN.C"
  2391 ;; Parameters:    Size  Location     Type
  2392 ;;  delay           1    wreg     unsigned char 
  2393 ;;  rep             1    8[COMMON] unsigned char 
  2394 ;; Auto vars:     Size  Location     Type
  2395 ;;  delay           1    2[BANK0 ] unsigned char 
  2396 ;;  t               2    0[BANK0 ] unsigned int 
  2397 ;; Return value:  Size  Location     Type
  2398 ;;		None               void
  2399 ;; Registers used:
  2400 ;;		wreg, status,2, status,0, pclath, cstack
  2401 ;; Tracked objects:
  2402 ;;		On entry : 0/0
  2403 ;;		On exit  : 0/0
  2404 ;;		Unchanged: 0/0
  2405 ;; Data sizes:     COMMON   BANK0   BANK1
  2406 ;;      Params:         1       0       0
  2407 ;;      Locals:         0       3       0
  2408 ;;      Temps:          1       0       0
  2409 ;;      Totals:         2       3       0
  2410 ;;Total ram usage:        5 bytes
  2411 ;; Hardware stack levels used:    1
  2412 ;; Hardware stack levels required when called:    2
  2413 ;; This function calls:
  2414 ;;		___wmul
  2415 ;;		_delay_x10ms
  2416 ;; This function is called by:
  2417 ;;		_main
  2418 ;; This function uses a non-reentrant model
  2419 ;;
  2420  03D5                     _beep:	
  2421                           
  2422                           ; Regs used in _beep: [wreg+status,2+status,0+pclath+cstack]
  2423                           ;beep@delay stored from wreg
  2424  03D5  1283               	bcf	3,5	;RP0=0, select bank0
  2425  03D6  00C0               	movwf	beep@delay
  2426  03D7                     l7451:	
  2427                           ;MAIN.C: 29: unsigned int t;
  2428                           ;MAIN.C: 31: while (rep--) {
  2429                           
  2430  03D7  03F8               	decf	beep@rep,f
  2431  03D8  0878               	movf	beep@rep,w
  2432  03D9  3AFF               	xorlw	255
  2433  03DA  1903               	btfsc	3,2
  2434  03DB  0008               	return
  2435                           
  2436                           ;MAIN.C: 32: t = 25 * delay;
  2437  03DC  1283               	bcf	3,5	;RP0=0, select bank0
  2438  03DD  0840               	movf	beep@delay,w
  2439  03DE  00F2               	movwf	?___wmul
  2440  03DF  3019               	movlw	25
  2441  03E0  01F3               	clrf	?___wmul+1
  2442  03E1  00F4               	movwf	?___wmul+2
  2443  03E2  01F5               	clrf	?___wmul+3
  2444  03E3  253B               	fcall	___wmul
  2445  03E4  0873               	movf	?___wmul+1,w
  2446  03E5  00BF               	movwf	beep@t+1
  2447  03E6  0872               	movf	?___wmul,w
  2448  03E7  00BE               	movwf	beep@t
  2449  03E8                     l4130:	
  2450                           ;MAIN.C: 33: while (t--) {
  2451                           
  2452  03E8  3001               	movlw	1
  2453  03E9  1283               	bcf	3,5	;RP0=0, select bank0
  2454  03EA  02BE               	subwf	beep@t,f
  2455  03EB  3000               	movlw	0
  2456  03EC  1C03               	skipc
  2457  03ED  03BF               	decf	beep@t+1,f
  2458  03EE  02BF               	subwf	beep@t+1,f
  2459  03EF  0A3E               	incf	beep@t,w
  2460  03F0  1903               	skipnz
  2461  03F1  0A3F               	incf	beep@t+1,w
  2462  03F2  1903               	btfsc	3,2
  2463  03F3  2BFC               	goto	l4132
  2464                           
  2465                           ;MAIN.C: 34: RA3 = ~RA3;
  2466  03F4  3008               	movlw	8
  2467  03F5  0685               	xorwf	5,f
  2468                           
  2469                           ;MAIN.C: 35: _delay((unsigned long)((428)*(8000000/4000000.0)));
  2470  03F6  30AB               	movlw	171
  2471  03F7  00F9               	movwf	??_beep
  2472  03F8                     u2387:	
  2473  03F8  2BF9               	nop2
  2474  03F9  0BF9               	decfsz	??_beep,f
  2475  03FA  2BF8               	goto	u2387
  2476  03FB  2BE8               	goto	l4130
  2477  03FC                     l4132:	
  2478                           
  2479                           ;MAIN.C: 37: }
  2480                           ;MAIN.C: 38: RA3 = 0;
  2481  03FC  1185               	bcf	5,3
  2482                           
  2483                           ;MAIN.C: 39: delay_x10ms(delay);
  2484  03FD  0840               	movf	beep@delay,w
  2485  03FE  258E               	fcall	_delay_x10ms
  2486  03FF  2BD7               	goto	l7451
  2487  0400                     __end_of_beep:	
  2488                           
  2489                           	psect	text565
  2490  056B                     __ptext565:	
  2491 ;; =============== function _beep ends ============
  2492                           
  2493                           
  2494 ;; *************** function _eepromWriteBlock *****************
  2495 ;; Defined at:
  2496 ;;		line 43 in file "ms82_eeprom.c"
  2497 ;; Parameters:    Size  Location     Type
  2498 ;;  addStart        1    wreg     unsigned char 
  2499 ;;  buff            1    6[COMMON] PTR unsigned char 
  2500 ;;		 -> buffTag(25), 
  2501 ;;  len             1    7[COMMON] unsigned char 
  2502 ;; Auto vars:     Size  Location     Type
  2503 ;;  addStart        1    9[COMMON] unsigned char 
  2504 ;;  i               1   10[COMMON] unsigned char 
  2505 ;; Return value:  Size  Location     Type
  2506 ;;		None               void
  2507 ;; Registers used:
  2508 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2509 ;; Tracked objects:
  2510 ;;		On entry : 120/0
  2511 ;;		On exit  : 0/0
  2512 ;;		Unchanged: 0/0
  2513 ;; Data sizes:     COMMON   BANK0   BANK1
  2514 ;;      Params:         2       0       0
  2515 ;;      Locals:         2       0       0
  2516 ;;      Temps:          1       0       0
  2517 ;;      Totals:         5       0       0
  2518 ;;Total ram usage:        5 bytes
  2519 ;; Hardware stack levels used:    1
  2520 ;; Hardware stack levels required when called:    2
  2521 ;; This function calls:
  2522 ;;		_eepromWriteByte
  2523 ;; This function is called by:
  2524 ;;		_id_replate
  2525 ;; This function uses a non-reentrant model
  2526 ;;
  2527  056B                     _eepromWriteBlock:	
  2528                           
  2529                           ; Regs used in _eepromWriteBlock: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2530                           ;eepromWriteBlock@addStart stored from wreg
  2531  056B  00F9               	movwf	eepromWriteBlock@addStart
  2532                           
  2533                           ;ms82_eeprom.c: 44: unsigned char i;
  2534                           ;ms82_eeprom.c: 45: for(i=0;i<len;i++){
  2535  056C  01FA               	clrf	eepromWriteBlock@i
  2536  056D                     l7441:	
  2537  056D  0877               	movf	eepromWriteBlock@len,w
  2538  056E  027A               	subwf	eepromWriteBlock@i,w
  2539  056F  1803               	btfsc	3,0
  2540  0570  0008               	return
  2541                           
  2542                           ;ms82_eeprom.c: 46: eepromWriteByte(addStart+i,buff[i]);
  2543  0571  087A               	movf	eepromWriteBlock@i,w
  2544  0572  0776               	addwf	eepromWriteBlock@buff,w
  2545  0573  00F8               	movwf	??_eepromWriteBlock
  2546  0574  0084               	movwf	4
  2547  0575  1383               	bcf	3,7	;select IRP bank0
  2548  0576  0800               	movf	0,w
  2549  0577  00F2               	movwf	?_eepromWriteByte
  2550  0578  087A               	movf	eepromWriteBlock@i,w
  2551  0579  0779               	addwf	eepromWriteBlock@addStart,w
  2552  057A  244A               	fcall	_eepromWriteByte
  2553  057B  0AFA               	incf	eepromWriteBlock@i,f
  2554  057C  2D6D               	goto	l7441
  2555  057D                     __end_of_eepromWriteBlock:	
  2556                           
  2557                           	psect	text566
  2558  0426                     __ptext566:	
  2559 ;; =============== function _eepromWriteBlock ends ============
  2560                           
  2561                           
  2562 ;; *************** function _swUartSendByte *****************
  2563 ;; Defined at:
  2564 ;;		line 13 in file "SWUART.C"
  2565 ;; Parameters:    Size  Location     Type
  2566 ;;  dat             1    wreg     unsigned char 
  2567 ;; Auto vars:     Size  Location     Type
  2568 ;;  dat             1    3[COMMON] unsigned char 
  2569 ;;  i               1    4[COMMON] unsigned char 
  2570 ;; Return value:  Size  Location     Type
  2571 ;;		None               void
  2572 ;; Registers used:
  2573 ;;		wreg, status,2, status,0
  2574 ;; Tracked objects:
  2575 ;;		On entry : 0/0
  2576 ;;		On exit  : 0/0
  2577 ;;		Unchanged: 0/0
  2578 ;; Data sizes:     COMMON   BANK0   BANK1
  2579 ;;      Params:         0       0       0
  2580 ;;      Locals:         2       0       0
  2581 ;;      Temps:          1       0       0
  2582 ;;      Totals:         3       0       0
  2583 ;;Total ram usage:        3 bytes
  2584 ;; Hardware stack levels used:    1
  2585 ;; Hardware stack levels required when called:    1
  2586 ;; This function calls:
  2587 ;;		Nothing
  2588 ;; This function is called by:
  2589 ;;		_swUartSendString
  2590 ;;		_SendNum
  2591 ;; This function uses a non-reentrant model
  2592 ;;
  2593  0426                     _swUartSendByte:	
  2594                           
  2595                           ; Regs used in _swUartSendByte: [wreg+status,2+status,0]
  2596                           ;swUartSendByte@dat stored from wreg
  2597  0426  00F3               	movwf	swUartSendByte@dat
  2598  0427  308A               	movlw	138
  2599                           
  2600                           ;SWUART.C: 14: unsigned char i;
  2601                           ;SWUART.C: 16: RA6 = 0;
  2602  0428  1283               	bcf	3,5	;RP0=0, select bank0
  2603  0429  1305               	bcf	5,6
  2604                           
  2605                           ;SWUART.C: 18: _delay((unsigned long)(((2000000/9600))*(8000000/4000000.0)));
  2606  042A  00F2               	movwf	??_swUartSendByte
  2607  042B                     u2397:	
  2608  042B  0BF2               	decfsz	??_swUartSendByte,f
  2609  042C  2C2B               	goto	u2397
  2610  042D  0064               	clrwdt
  2611                           
  2612                           ;SWUART.C: 19: for(i=0;i<8;i++){
  2613  042E  01F4               	clrf	swUartSendByte@i
  2614  042F                     l5031:	
  2615                           
  2616                           ;SWUART.C: 20: RA6 = (dat&1);
  2617  042F  1C73               	btfss	swUartSendByte@dat,0
  2618  0430  2C34               	goto	u1820
  2619  0431  1283               	bcf	3,5	;RP0=0, select bank0
  2620  0432  1705               	bsf	5,6
  2621  0433  2C36               	goto	u1834
  2622  0434                     u1820:	
  2623  0434  1283               	bcf	3,5	;RP0=0, select bank0
  2624  0435  1305               	bcf	5,6
  2625  0436                     u1834:	
  2626  0436  308A               	movlw	138
  2627                           
  2628                           ;SWUART.C: 21: dat=dat>>1;
  2629  0437  1003               	clrc
  2630  0438  0CF3               	rrf	swUartSendByte@dat,f
  2631                           
  2632                           ;SWUART.C: 23: _delay((unsigned long)(((2000000/9600))*(8000000/4000000.0)));
  2633  0439  00F2               	movwf	??_swUartSendByte
  2634  043A                     u2407:	
  2635  043A  0BF2               	decfsz	??_swUartSendByte,f
  2636  043B  2C3A               	goto	u2407
  2637  043C  0064               	clrwdt
  2638  043D  3008               	movlw	8
  2639  043E  0AF4               	incf	swUartSendByte@i,f
  2640  043F  0274               	subwf	swUartSendByte@i,w
  2641  0440  1C03               	skipc
  2642  0441  2C2F               	goto	l5031
  2643  0442  308A               	movlw	138
  2644                           
  2645                           ;SWUART.C: 24: }
  2646                           ;SWUART.C: 29: RA6 = 1;
  2647  0443  1283               	bcf	3,5	;RP0=0, select bank0
  2648  0444  1705               	bsf	5,6
  2649                           
  2650                           ;SWUART.C: 31: _delay((unsigned long)(((2000000/9600))*(8000000/4000000.0)));
  2651  0445  00F2               	movwf	??_swUartSendByte
  2652  0446                     u2417:	
  2653  0446  0BF2               	decfsz	??_swUartSendByte,f
  2654  0447  2C46               	goto	u2417
  2655  0448  0064               	clrwdt
  2656  0449  0008               	return
  2657  044A                     __end_of_swUartSendByte:	
  2658                           
  2659                           	psect	text567
  2660  0505                     __ptext567:	
  2661 ;; =============== function _swUartSendByte ends ============
  2662                           
  2663                           
  2664 ;; *************** function _id_search *****************
  2665 ;; Defined at:
  2666 ;;		line 113 in file "MAIN.C"
  2667 ;; Parameters:    Size  Location     Type
  2668 ;;  id_input        1    wreg     PTR unsigned char 
  2669 ;;		 -> keyID(5), 
  2670 ;;  buff            1   10[COMMON] PTR unsigned char 
  2671 ;;		 -> buffTag(25), 
  2672 ;; Auto vars:     Size  Location     Type
  2673 ;;  id_input        1    0[BANK0 ] PTR unsigned char 
  2674 ;;		 -> keyID(5), 
  2675 ;;  i               1    1[BANK0 ] unsigned char 
  2676 ;; Return value:  Size  Location     Type
  2677 ;;                  1    wreg      unsigned char 
  2678 ;; Registers used:
  2679 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2680 ;; Tracked objects:
  2681 ;;		On entry : 0/0
  2682 ;;		On exit  : 20/0
  2683 ;;		Unchanged: FFEDF/0
  2684 ;; Data sizes:     COMMON   BANK0   BANK1
  2685 ;;      Params:         1       0       0
  2686 ;;      Locals:         0       2       0
  2687 ;;      Temps:          1       0       0
  2688 ;;      Totals:         2       2       0
  2689 ;;Total ram usage:        4 bytes
  2690 ;; Hardware stack levels used:    1
  2691 ;; Hardware stack levels required when called:    2
  2692 ;; This function calls:
  2693 ;;		_comArr
  2694 ;;		___lbdiv
  2695 ;; This function is called by:
  2696 ;;		_main
  2697 ;; This function uses a non-reentrant model
  2698 ;;
  2699  0505                     _id_search:	
  2700                           
  2701                           ; Regs used in _id_search: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2702                           ;id_search@id_input stored from wreg
  2703  0505  1283               	bcf	3,5	;RP0=0, select bank0
  2704  0506  00BE               	movwf	id_search@id_input
  2705                           
  2706                           ;MAIN.C: 114: unsigned char i;
  2707                           ;MAIN.C: 115: for (i = 0; i < 21; i += 5) {
  2708  0507  01BF               	clrf	id_search@i
  2709  0508                     l7403:	
  2710                           
  2711                           ;MAIN.C: 116: if (comArr(id_input, buff + i, 5, 5))
  2712  0508  083F               	movf	id_search@i,w
  2713  0509  077A               	addwf	id_search@buff,w
  2714  050A  00F2               	movwf	?_comArr
  2715  050B  3005               	movlw	5
  2716  050C  00F3               	movwf	?_comArr+1
  2717  050D  00F4               	movwf	?_comArr+2
  2718  050E  083E               	movf	id_search@id_input,w
  2719  050F  24C8               	fcall	_comArr
  2720  0510  3A00               	xorlw	0
  2721                           
  2722                           ;MAIN.C: 117: return i / 5 + 1;
  2723  0511  3005               	movlw	5
  2724  0512  1903               	skipnz
  2725  0513  2D1A               	goto	L8
  2726  0514  00F2               	movwf	?___lbdiv
  2727  0515  083F               	movf	id_search@i,w
  2728  0516  2520               	fcall	___lbdiv
  2729  0517  00FB               	movwf	??_id_search
  2730  0518  0A7B               	incf	??_id_search,w
  2731  0519  0008               	return
  2732  051A                     L8:	
  2733  051A  07BF               	addwf	id_search@i,f
  2734  051B  3015               	movlw	21
  2735  051C  023F               	subwf	id_search@i,w
  2736  051D  1803               	btfsc	3,0
  2737                           
  2738                           ;MAIN.C: 118: }
  2739                           ;MAIN.C: 119: return 255;
  2740  051E  34FF               	retlw	255
  2741  051F  2D08               	goto	l7403
  2742  0520                     __end_of_id_search:	
  2743                           
  2744                           	psect	text568
  2745  058E                     __ptext568:	
  2746 ;; =============== function _id_search ends ============
  2747                           
  2748                           
  2749 ;; *************** function _delay_x10ms *****************
  2750 ;; Defined at:
  2751 ;;		line 24 in file "MAIN.C"
  2752 ;; Parameters:    Size  Location     Type
  2753 ;;  t               1    wreg     unsigned char 
  2754 ;; Auto vars:     Size  Location     Type
  2755 ;;  t               1    4[COMMON] unsigned char 
  2756 ;; Return value:  Size  Location     Type
  2757 ;;		None               void
  2758 ;; Registers used:
  2759 ;;		wreg, status,2, status,0
  2760 ;; Tracked objects:
  2761 ;;		On entry : 20/0
  2762 ;;		On exit  : 0/0
  2763 ;;		Unchanged: 0/0
  2764 ;; Data sizes:     COMMON   BANK0   BANK1
  2765 ;;      Params:         0       0       0
  2766 ;;      Locals:         1       0       0
  2767 ;;      Temps:          2       0       0
  2768 ;;      Totals:         3       0       0
  2769 ;;Total ram usage:        3 bytes
  2770 ;; Hardware stack levels used:    1
  2771 ;; Hardware stack levels required when called:    1
  2772 ;; This function calls:
  2773 ;;		Nothing
  2774 ;; This function is called by:
  2775 ;;		_beep
  2776 ;; This function uses a non-reentrant model
  2777 ;;
  2778  058E                     _delay_x10ms:	
  2779                           
  2780                           ; Regs used in _delay_x10ms: [wreg+status,2+status,0]
  2781                           ;delay_x10ms@t stored from wreg
  2782  058E  00F4               	movwf	delay_x10ms@t
  2783  058F                     l7395:	
  2784                           ;MAIN.C: 25: while (t--)
  2785                           
  2786  058F  03F4               	decf	delay_x10ms@t,f
  2787  0590  0874               	movf	delay_x10ms@t,w
  2788  0591  3AFF               	xorlw	255
  2789  0592  1903               	btfsc	3,2
  2790  0593  0008               	return
  2791                           
  2792                           ;MAIN.C: 26: _delay((unsigned long)((10)*(8000000/4000.0)));
  2793  0594  301A               	movlw	26
  2794  0595  00F3               	movwf	??_delay_x10ms+1
  2795  0596  30F8               	movlw	248
  2796  0597  00F2               	movwf	??_delay_x10ms
  2797  0598                     u2427:	
  2798  0598  0BF2               	decfsz	??_delay_x10ms,f
  2799  0599  2D98               	goto	u2427
  2800  059A  0BF3               	decfsz	??_delay_x10ms+1,f
  2801  059B  2D98               	goto	u2427
  2802  059C  0064               	clrwdt
  2803  059D  2D8F               	goto	l7395
  2804  059E                     __end_of_delay_x10ms:	
  2805                           
  2806                           	psect	text569
  2807  0250                     __ptext569:	
  2808 ;; =============== function _delay_x10ms ends ============
  2809                           
  2810                           
  2811 ;; *************** function _get_RFID *****************
  2812 ;; Defined at:
  2813 ;;		line 21 in file "rfid125.c"
  2814 ;; Parameters:    Size  Location     Type
  2815 ;;		None
  2816 ;; Auto vars:     Size  Location     Type
  2817 ;;  RF_serial_55   11    0[BANK0 ] unsigned char [11]
  2818 ;;  timeOutVal      2   17[BANK0 ] unsigned int 
  2819 ;;  ii              1   19[BANK0 ] unsigned char 
  2820 ;;  flag_RFID_la    1   16[BANK0 ] unsigned char 
  2821 ;;  i               1   15[BANK0 ] unsigned char 
  2822 ;;  j               1   14[BANK0 ] unsigned char 
  2823 ;;  even_row        1   13[BANK0 ] unsigned char 
  2824 ;;  even_col        1   12[BANK0 ] unsigned char 
  2825 ;;  flag_RFID_sy    1   11[BANK0 ] unsigned char 
  2826 ;; Return value:  Size  Location     Type
  2827 ;;                  1    wreg      unsigned char 
  2828 ;; Registers used:
  2829 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2830 ;; Tracked objects:
  2831 ;;		On entry : 20/0
  2832 ;;		On exit  : 20/0
  2833 ;;		Unchanged: FFEDF/0
  2834 ;; Data sizes:     COMMON   BANK0   BANK1
  2835 ;;      Params:         0       0       0
  2836 ;;      Locals:         0      20       0
  2837 ;;      Temps:          1       0       0
  2838 ;;      Totals:         1      20       0
  2839 ;;Total ram usage:       21 bytes
  2840 ;; Hardware stack levels used:    1
  2841 ;; Hardware stack levels required when called:    2
  2842 ;; This function calls:
  2843 ;;		_timerOut
  2844 ;;		___lbdiv
  2845 ;; This function is called by:
  2846 ;;		_main
  2847 ;; This function uses a non-reentrant model
  2848 ;;
  2849  0250                     _get_RFID:	
  2850  0250  3010               	movlw	16
  2851                           
  2852                           ;rfid125.c: 23: unsigned char RF_serial_55bits[11];
  2853                           ;rfid125.c: 24: unsigned int timeOutVal;
  2854                           ;rfid125.c: 25: unsigned char i,ii,j;
  2855                           ;rfid125.c: 26: unsigned char flag_RFID_syn, flag_RFID_last;
  2856                           ;rfid125.c: 27: unsigned char even_row, even_col;
  2857                           ;rfid125.c: 30: flag_RFID_syn = 0;
  2858                           
  2859                           ; Regs used in _get_RFID: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2860  0251  01C9               	clrf	get_RFID@flag_RFID_syn
  2861                           
  2862                           ;rfid125.c: 33: i=16;
  2863  0252  00CD               	movwf	get_RFID@i
  2864  0253                     l7173:	
  2865                           
  2866                           ;rfid125.c: 35: {
  2867                           ;rfid125.c: 36: timeOutVal=timerOut(1,150);
  2868  0253  3096               	movlw	150
  2869  0254  00F2               	movwf	?_timerOut
  2870  0255  3001               	movlw	1
  2871  0256  01F3               	clrf	?_timerOut+1
  2872  0257  24A9               	fcall	_timerOut
  2873                           
  2874                           ;rfid125.c: 37: if(timeOutVal==0) return 0;
  2875  0258  2388               	fcall	PL2	;call to abstracted procedure
  2876  0259  1903               	btfsc	3,2
  2877  025A  3400               	retlw	0
  2878                           
  2879                           ;rfid125.c: 39: timeOutVal=timerOut(0,150);
  2880  025B  3096               	movlw	150
  2881  025C  00F2               	movwf	?_timerOut
  2882  025D  3000               	movlw	0
  2883  025E  01F3               	clrf	?_timerOut+1
  2884  025F  24A9               	fcall	_timerOut
  2885                           
  2886                           ;rfid125.c: 40: if(timeOutVal==0) return 0;
  2887  0260  2388               	fcall	PL2	;call to abstracted procedure
  2888  0261  1903               	btfsc	3,2
  2889  0262  3400               	retlw	0
  2890  0263  3000               	movlw	0
  2891                           
  2892                           ;rfid125.c: 42: i--;
  2893  0264  03CD               	decf	get_RFID@i,f
  2894                           
  2895                           ;rfid125.c: 43: }
  2896                           ;rfid125.c: 44: while(timeOutVal<72 && i>0);
  2897  0265  0250               	subwf	get_RFID@timeOutVal+1,w
  2898  0266  3048               	movlw	72
  2899  0267  1903               	skipnz
  2900  0268  024F               	subwf	get_RFID@timeOutVal,w
  2901  0269  1803               	skipnc
  2902  026A  2A6E               	goto	l2459
  2903  026B  08CD               	movf	get_RFID@i,f
  2904  026C  1D03               	skipz
  2905  026D  2A53               	goto	l7173
  2906  026E                     l2459:	
  2907                           
  2908                           ;rfid125.c: 45: flag_RFID_last = 1;
  2909  026E  01CE               	clrf	get_RFID@flag_RFID_last
  2910  026F  0ACE               	incf	get_RFID@flag_RFID_last,f
  2911                           
  2912                           ;rfid125.c: 46: i = 0;
  2913  0270  01CD               	clrf	get_RFID@i
  2914  0271                     l7261:	
  2915                           ;rfid125.c: 47: while(i<64)
  2916                           
  2917  0271  3040               	movlw	64
  2918  0272  024D               	subwf	get_RFID@i,w
  2919  0273  1803               	btfsc	3,0
  2920  0274  2AC9               	goto	l7263
  2921                           
  2922                           ;rfid125.c: 48: {
  2923                           ;rfid125.c: 49: for(ii=0;ii<9;ii++)
  2924  0275  01D1               	clrf	get_RFID@ii
  2925  0276                     l7203:	
  2926                           
  2927                           ;rfid125.c: 50: {
  2928                           ;rfid125.c: 51: timeOutVal=timerOut(flag_RFID_last,150);
  2929  0276  2395               	fcall	PL5	;call to abstracted procedure
  2930  0277  24A9               	fcall	_timerOut
  2931                           
  2932                           ;rfid125.c: 52: if(timeOutVal==0) return 0;
  2933  0278  2388               	fcall	PL2	;call to abstracted procedure
  2934  0279  1903               	btfsc	3,2
  2935  027A  3400               	retlw	0
  2936                           
  2937                           ;rfid125.c: 54: if(0==flag_RFID_last && timeOutVal<=72 ||
  2938                           ;rfid125.c: 55: 1==flag_RFID_last && timeOutVal>72)
  2939  027B  08CE               	movf	get_RFID@flag_RFID_last,f
  2940  027C  1D03               	skipz
  2941  027D  2A85               	goto	l7215
  2942  027E  3000               	movlw	0
  2943  027F  0250               	subwf	get_RFID@timeOutVal+1,w
  2944  0280  3049               	movlw	73
  2945  0281  1903               	skipnz
  2946  0282  024F               	subwf	get_RFID@timeOutVal,w
  2947  0283  1C03               	skipc
  2948  0284  2A8E               	goto	l7219
  2949  0285                     l7215:	
  2950  0285  0B4E               	decfsz	get_RFID@flag_RFID_last,w
  2951  0286  2A9C               	goto	l7233
  2952  0287  3000               	movlw	0
  2953  0288  0250               	subwf	get_RFID@timeOutVal+1,w
  2954  0289  3049               	movlw	73
  2955  028A  1903               	skipnz
  2956  028B  024F               	subwf	get_RFID@timeOutVal,w
  2957  028C  1C03               	skipc
  2958  028D  2A9C               	goto	l7233
  2959  028E                     l7219:	
  2960                           
  2961                           ;rfid125.c: 56: {
  2962                           ;rfid125.c: 57: if(!flag_RFID_last)
  2963  028E  08CE               	movf	get_RFID@flag_RFID_last,f
  2964  028F  1D03               	skipz
  2965  0290  2A99               	goto	l7229
  2966                           
  2967                           ;rfid125.c: 58: {
  2968                           ;rfid125.c: 59: timeOutVal=timerOut(1,72);
  2969  0291  3048               	movlw	72
  2970  0292  00F2               	movwf	?_timerOut
  2971  0293  3001               	movlw	1
  2972  0294  01F3               	clrf	?_timerOut+1
  2973  0295  24A9               	fcall	_timerOut
  2974                           
  2975                           ;rfid125.c: 60: if(timeOutVal==0) return 0;
  2976  0296  2388               	fcall	PL2	;call to abstracted procedure
  2977  0297  1903               	btfsc	3,2
  2978  0298  3400               	retlw	0
  2979  0299                     l7229:	
  2980                           
  2981                           ;rfid125.c: 61: }
  2982                           ;rfid125.c: 62: flag_RFID_last = 0;
  2983  0299  01CE               	clrf	get_RFID@flag_RFID_last
  2984                           
  2985                           ;rfid125.c: 63: i++;
  2986  029A  0ACD               	incf	get_RFID@i,f
  2987                           
  2988                           ;rfid125.c: 64: }
  2989  029B  2ABE               	goto	l7253
  2990  029C                     l7233:	
  2991                           
  2992                           ;rfid125.c: 65: else
  2993                           ;rfid125.c: 66: if(0==flag_RFID_last && timeOutVal>72 ||
  2994                           ;rfid125.c: 67: 1==flag_RFID_last && timeOutVal<=72)
  2995  029C  08CE               	movf	get_RFID@flag_RFID_last,f
  2996  029D  1D03               	skipz
  2997  029E  2AA6               	goto	l7237
  2998  029F  3000               	movlw	0
  2999  02A0  0250               	subwf	get_RFID@timeOutVal+1,w
  3000  02A1  3049               	movlw	73
  3001  02A2  1903               	skipnz
  3002  02A3  024F               	subwf	get_RFID@timeOutVal,w
  3003  02A4  1803               	skipnc
  3004  02A5  2AAF               	goto	l7241
  3005  02A6                     l7237:	
  3006  02A6  0B4E               	decfsz	get_RFID@flag_RFID_last,w
  3007  02A7  2ABE               	goto	l7253
  3008  02A8  3000               	movlw	0
  3009  02A9  0250               	subwf	get_RFID@timeOutVal+1,w
  3010  02AA  3049               	movlw	73
  3011  02AB  1903               	skipnz
  3012  02AC  024F               	subwf	get_RFID@timeOutVal,w
  3013  02AD  1803               	skipnc
  3014  02AE  2ABE               	goto	l7253
  3015  02AF                     l7241:	
  3016                           
  3017                           ;rfid125.c: 68: {
  3018                           ;rfid125.c: 69: if(flag_RFID_last)
  3019  02AF  084E               	movf	get_RFID@flag_RFID_last,w
  3020  02B0  1903               	btfsc	3,2
  3021  02B1  2ABA               	goto	l2478
  3022                           
  3023                           ;rfid125.c: 70: {
  3024                           ;rfid125.c: 71: timeOutVal=timerOut(0,72);
  3025  02B2  3048               	movlw	72
  3026  02B3  00F2               	movwf	?_timerOut
  3027  02B4  3000               	movlw	0
  3028  02B5  01F3               	clrf	?_timerOut+1
  3029  02B6  24A9               	fcall	_timerOut
  3030                           
  3031                           ;rfid125.c: 72: if(timeOutVal==0) return 0;
  3032  02B7  2388               	fcall	PL2	;call to abstracted procedure
  3033  02B8  1903               	btfsc	3,2
  3034  02B9  3400               	retlw	0
  3035  02BA                     l2478:	
  3036                           
  3037                           ;rfid125.c: 73: }
  3038                           ;rfid125.c: 74: flag_RFID_last = 1;
  3039  02BA  01CE               	clrf	get_RFID@flag_RFID_last
  3040  02BB  0ACE               	incf	get_RFID@flag_RFID_last,f
  3041                           
  3042                           ;rfid125.c: 75: i++;
  3043  02BC  0ACD               	incf	get_RFID@i,f
  3044                           
  3045                           ;rfid125.c: 77: break;
  3046  02BD  2AC3               	goto	l7257
  3047  02BE                     l7253:	
  3048  02BE  3009               	movlw	9
  3049  02BF  0AD1               	incf	get_RFID@ii,f
  3050  02C0  0251               	subwf	get_RFID@ii,w
  3051  02C1  1C03               	skipc
  3052  02C2  2A76               	goto	l7203
  3053  02C3                     l7257:	
  3054                           
  3055                           ;rfid125.c: 78: }
  3056                           ;rfid125.c: 80: }
  3057                           ;rfid125.c: 81: if(9==ii)
  3058  02C3  0851               	movf	get_RFID@ii,w
  3059  02C4  3A09               	xorlw	9
  3060  02C5  1D03               	skipz
  3061  02C6  2A71               	goto	l7261
  3062                           
  3063                           ;rfid125.c: 82: {
  3064                           ;rfid125.c: 83: flag_RFID_syn = 1;
  3065  02C7  01C9               	clrf	get_RFID@flag_RFID_syn
  3066  02C8  0AC9               	incf	get_RFID@flag_RFID_syn,f
  3067  02C9                     l7263:	
  3068                           ;rfid125.c: 84: break;
  3069                           
  3070                           
  3071                           ;rfid125.c: 85: }
  3072                           ;rfid125.c: 86: }
  3073                           ;rfid125.c: 88: if(!flag_RFID_syn)
  3074  02C9  08C9               	movf	get_RFID@flag_RFID_syn,f
  3075  02CA  1903               	btfsc	3,2
  3076  02CB  3400               	retlw	0
  3077                           
  3078                           ;rfid125.c: 91: }
  3079                           ;rfid125.c: 92: for(ii=0;ii<55;ii++)
  3080  02CC  01D1               	clrf	get_RFID@ii
  3081  02CD                     l7275:	
  3082                           
  3083                           ;rfid125.c: 93: {
  3084                           ;rfid125.c: 94: i = ii/5;
  3085  02CD  3005               	movlw	5
  3086  02CE  00F2               	movwf	?___lbdiv
  3087  02CF  0851               	movf	get_RFID@ii,w
  3088  02D0  2520               	fcall	___lbdiv
  3089  02D1  00CD               	movwf	get_RFID@i
  3090                           
  3091                           ;rfid125.c: 95: timeOutVal=timerOut(flag_RFID_last,150);
  3092  02D2  2395               	fcall	PL5	;call to abstracted procedure
  3093  02D3  24A9               	fcall	_timerOut
  3094                           
  3095                           ;rfid125.c: 96: if(timeOutVal==0) return 0;
  3096  02D4  2388               	fcall	PL2	;call to abstracted procedure
  3097  02D5  1903               	btfsc	3,2
  3098  02D6  3400               	retlw	0
  3099                           
  3100                           ;rfid125.c: 98: if(0==flag_RFID_last && timeOutVal<=72 ||
  3101                           ;rfid125.c: 99: 1==flag_RFID_last && timeOutVal>72)
  3102  02D7  08CE               	movf	get_RFID@flag_RFID_last,f
  3103  02D8  1D03               	skipz
  3104  02D9  2AE1               	goto	l7289
  3105  02DA  3000               	movlw	0
  3106  02DB  0250               	subwf	get_RFID@timeOutVal+1,w
  3107  02DC  3049               	movlw	73
  3108  02DD  1903               	skipnz
  3109  02DE  024F               	subwf	get_RFID@timeOutVal,w
  3110  02DF  1C03               	skipc
  3111  02E0  2AEA               	goto	l7293
  3112  02E1                     l7289:	
  3113  02E1  0B4E               	decfsz	get_RFID@flag_RFID_last,w
  3114  02E2  2AFC               	goto	l7309
  3115  02E3  3000               	movlw	0
  3116  02E4  0250               	subwf	get_RFID@timeOutVal+1,w
  3117  02E5  3049               	movlw	73
  3118  02E6  1903               	skipnz
  3119  02E7  024F               	subwf	get_RFID@timeOutVal,w
  3120  02E8  1C03               	skipc
  3121  02E9  2AFC               	goto	l7309
  3122  02EA                     l7293:	
  3123                           
  3124                           ;rfid125.c: 100: {
  3125                           ;rfid125.c: 101: if(!flag_RFID_last)
  3126  02EA  08CE               	movf	get_RFID@flag_RFID_last,f
  3127  02EB  1D03               	skipz
  3128  02EC  2AF5               	goto	l7303
  3129                           
  3130                           ;rfid125.c: 102: {
  3131                           ;rfid125.c: 103: timeOutVal=timerOut(1,72);
  3132  02ED  3048               	movlw	72
  3133  02EE  00F2               	movwf	?_timerOut
  3134  02EF  3001               	movlw	1
  3135  02F0  01F3               	clrf	?_timerOut+1
  3136  02F1  24A9               	fcall	_timerOut
  3137                           
  3138                           ;rfid125.c: 104: if(timeOutVal==0) return 0;
  3139  02F2  2388               	fcall	PL2	;call to abstracted procedure
  3140  02F3  1903               	btfsc	3,2
  3141  02F4  3400               	retlw	0
  3142  02F5                     l7303:	
  3143                           
  3144                           ;rfid125.c: 105: }
  3145                           ;rfid125.c: 106: flag_RFID_last = 0;
  3146  02F5  01CE               	clrf	get_RFID@flag_RFID_last
  3147                           
  3148                           ;rfid125.c: 107: RF_serial_55bits[i] <<= 1;
  3149  02F6  238E               	fcall	PL4	;call to abstracted procedure
  3150                           
  3151                           ;rfid125.c: 108: RF_serial_55bits[i] |= 0x01;
  3152  02F7  084D               	movf	get_RFID@i,w
  3153  02F8  3E3E               	addlw	get_RFID@RF_serial_55bits& (0+255)
  3154  02F9  0084               	movwf	4
  3155  02FA  1400               	bsf	0,0
  3156                           
  3157                           ;rfid125.c: 109: }
  3158  02FB  2B1D               	goto	l7329
  3159  02FC                     l7309:	
  3160                           
  3161                           ;rfid125.c: 110: else
  3162                           ;rfid125.c: 111: if(0==flag_RFID_last && timeOutVal>72 ||
  3163                           ;rfid125.c: 112: 1==flag_RFID_last && timeOutVal<=72)
  3164  02FC  08CE               	movf	get_RFID@flag_RFID_last,f
  3165  02FD  1D03               	skipz
  3166  02FE  2B06               	goto	l7313
  3167  02FF  3000               	movlw	0
  3168  0300  0250               	subwf	get_RFID@timeOutVal+1,w
  3169  0301  3049               	movlw	73
  3170  0302  1903               	skipnz
  3171  0303  024F               	subwf	get_RFID@timeOutVal,w
  3172  0304  1803               	skipnc
  3173  0305  2B0F               	goto	l7317
  3174  0306                     l7313:	
  3175  0306  0B4E               	decfsz	get_RFID@flag_RFID_last,w
  3176  0307  2B1D               	goto	l7329
  3177  0308  3000               	movlw	0
  3178  0309  0250               	subwf	get_RFID@timeOutVal+1,w
  3179  030A  3049               	movlw	73
  3180  030B  1903               	skipnz
  3181  030C  024F               	subwf	get_RFID@timeOutVal,w
  3182  030D  1803               	skipnc
  3183  030E  2B1D               	goto	l7329
  3184  030F                     l7317:	
  3185                           
  3186                           ;rfid125.c: 113: {
  3187                           ;rfid125.c: 114: if(flag_RFID_last)
  3188  030F  084E               	movf	get_RFID@flag_RFID_last,w
  3189  0310  1903               	btfsc	3,2
  3190  0311  2B1A               	goto	l2499
  3191                           
  3192                           ;rfid125.c: 115: {
  3193                           ;rfid125.c: 116: timeOutVal=timerOut(0,150);
  3194  0312  3096               	movlw	150
  3195  0313  00F2               	movwf	?_timerOut
  3196  0314  3000               	movlw	0
  3197  0315  01F3               	clrf	?_timerOut+1
  3198  0316  24A9               	fcall	_timerOut
  3199                           
  3200                           ;rfid125.c: 117: if(timeOutVal==0) return 0;
  3201  0317  2388               	fcall	PL2	;call to abstracted procedure
  3202  0318  1903               	btfsc	3,2
  3203  0319  3400               	retlw	0
  3204  031A                     l2499:	
  3205                           
  3206                           ;rfid125.c: 118: }
  3207                           ;rfid125.c: 119: flag_RFID_last = 1;
  3208  031A  01CE               	clrf	get_RFID@flag_RFID_last
  3209  031B  0ACE               	incf	get_RFID@flag_RFID_last,f
  3210                           
  3211                           ;rfid125.c: 120: RF_serial_55bits[i] <<= 1;
  3212  031C  238E               	fcall	PL4	;call to abstracted procedure
  3213  031D                     l7329:	
  3214  031D  3037               	movlw	55
  3215  031E  0AD1               	incf	get_RFID@ii,f
  3216  031F  0251               	subwf	get_RFID@ii,w
  3217  0320  1C03               	skipc
  3218  0321  2ACD               	goto	l7275
  3219                           
  3220                           ;rfid125.c: 121: }
  3221                           ;rfid125.c: 122: }
  3222                           ;rfid125.c: 123: if(55==ii)
  3223  0322  0851               	movf	get_RFID@ii,w
  3224  0323  3A37               	xorlw	55
  3225  0324  1D03               	skipz
  3226  0325  3400               	retlw	0
  3227                           
  3228                           ;rfid125.c: 124: {
  3229                           ;rfid125.c: 125: even_col = 0;
  3230  0326  01CA               	clrf	get_RFID@even_col
  3231                           
  3232                           ;rfid125.c: 126: for(ii=0;ii<10;ii++)
  3233  0327  01D1               	clrf	get_RFID@ii
  3234  0328                     l7341:	
  3235                           
  3236                           ;rfid125.c: 127: {
  3237                           ;rfid125.c: 128: even_row = (RF_serial_55bits[ii] & 0x01);
  3238  0328  0851               	movf	get_RFID@ii,w
  3239  0329  3E3E               	addlw	get_RFID@RF_serial_55bits& (0+255)
  3240  032A  0084               	movwf	4
  3241  032B  1383               	bcf	3,7	;select IRP bank0
  3242  032C  0800               	movf	0,w
  3243  032D  00CB               	movwf	get_RFID@even_row
  3244  032E  3001               	movlw	1
  3245  032F  05CB               	andwf	get_RFID@even_row,f
  3246                           
  3247                           ;rfid125.c: 129: for(j=1;j<5;j++)
  3248  0330  01CC               	clrf	get_RFID@j
  3249  0331  0ACC               	incf	get_RFID@j,f
  3250  0332                     l7351:	
  3251                           
  3252                           ;rfid125.c: 130: {
  3253                           ;rfid125.c: 131: even_row = even_row ^ ((RF_serial_55bits[ii]>>j) & 0x01);
  3254  0332  0851               	movf	get_RFID@ii,w
  3255  0333  3E3E               	addlw	get_RFID@RF_serial_55bits& (0+255)
  3256  0334  0084               	movwf	4
  3257  0335  0800               	movf	0,w
  3258  0336  00F7               	movwf	??_get_RFID
  3259  0337  0A4C               	incf	get_RFID@j,w
  3260  0338  2B3B               	goto	u1724
  3261  0339                     u1725:	
  3262  0339  1003               	clrc
  3263  033A  0CF7               	rrf	??_get_RFID,f
  3264  033B                     u1724:	
  3265  033B  3EFF               	addlw	-1
  3266  033C  1D03               	skipz
  3267  033D  2B39               	goto	u1725
  3268  033E  0877               	movf	??_get_RFID,w
  3269  033F  3901               	andlw	1
  3270  0340  06CB               	xorwf	get_RFID@even_row,f
  3271  0341  3005               	movlw	5
  3272  0342  0ACC               	incf	get_RFID@j,f
  3273  0343  024C               	subwf	get_RFID@j,w
  3274  0344  1C03               	skipc
  3275  0345  2B32               	goto	l7351
  3276                           
  3277                           ;rfid125.c: 132: }
  3278                           ;rfid125.c: 133: if(even_row & 0x01)
  3279  0346  184B               	btfsc	get_RFID@even_row,0
  3280  0347  3400               	retlw	0
  3281                           
  3282                           ;rfid125.c: 136: }
  3283                           ;rfid125.c: 138: RF_serial_55bits[ii] <<= 3;
  3284  0348  0851               	movf	get_RFID@ii,w
  3285  0349  3E3E               	addlw	get_RFID@RF_serial_55bits& (0+255)
  3286  034A  0084               	movwf	4
  3287  034B  0D80               	rlf	0,f
  3288  034C  0D80               	rlf	0,f
  3289  034D  0D00               	rlf	0,w
  3290  034E  39F8               	andlw	248
  3291  034F  0080               	movwf	0
  3292                           
  3293                           ;rfid125.c: 140: i = RF_serial_55bits[ii];
  3294  0350  0851               	movf	get_RFID@ii,w
  3295  0351  3E3E               	addlw	get_RFID@RF_serial_55bits& (0+255)
  3296  0352  0084               	movwf	4
  3297  0353  0800               	movf	0,w
  3298  0354  00CD               	movwf	get_RFID@i
  3299                           
  3300                           ;rfid125.c: 141: if( 0==ii%2 )
  3301  0355  1851               	btfsc	get_RFID@ii,0
  3302  0356  2B64               	goto	l7367
  3303                           
  3304                           ;rfid125.c: 142: {
  3305                           ;rfid125.c: 143: keyID[ii/2] = (i & 0xF0);
  3306  0357  1003               	clrc
  3307  0358  0C51               	rrf	get_RFID@ii,w
  3308  0359  3E62               	addlw	_keyID& (0+255)
  3309  035A  0084               	movwf	4
  3310  035B  084D               	movf	get_RFID@i,w
  3311  035C  0080               	movwf	0
  3312  035D  1003               	clrc
  3313  035E  0C51               	rrf	get_RFID@ii,w
  3314  035F  3E62               	addlw	_keyID& (0+255)
  3315  0360  0084               	movwf	4
  3316  0361  30F0               	movlw	240
  3317  0362  0580               	andwf	0,f
  3318                           
  3319                           ;rfid125.c: 144: }
  3320  0363  2B6E               	goto	l7371
  3321  0364                     l7367:	
  3322  0364  300F               	movlw	15
  3323                           
  3324                           ;rfid125.c: 145: else
  3325                           ;rfid125.c: 146: {
  3326                           ;rfid125.c: 147: i >>=4;
  3327  0365  0ECD               	swapf	get_RFID@i,f
  3328  0366  05CD               	andwf	get_RFID@i,f
  3329                           
  3330                           ;rfid125.c: 148: keyID[ii/2] |= (i & 0x0F);
  3331  0367  1003               	clrc
  3332  0368  0C51               	rrf	get_RFID@ii,w
  3333  0369  3E62               	addlw	_keyID& (0+255)
  3334  036A  0084               	movwf	4
  3335  036B  084D               	movf	get_RFID@i,w
  3336  036C  390F               	andlw	15
  3337  036D  0480               	iorwf	0,f
  3338  036E                     l7371:	
  3339                           
  3340                           ;rfid125.c: 149: }
  3341                           ;rfid125.c: 150: even_col ^= RF_serial_55bits[ii];
  3342  036E  0851               	movf	get_RFID@ii,w
  3343  036F  3E3E               	addlw	get_RFID@RF_serial_55bits& (0+255)
  3344  0370  0084               	movwf	4
  3345  0371  0800               	movf	0,w
  3346  0372  06CA               	xorwf	get_RFID@even_col,f
  3347  0373  300A               	movlw	10
  3348  0374  0AD1               	incf	get_RFID@ii,f
  3349  0375  0251               	subwf	get_RFID@ii,w
  3350  0376  1C03               	skipc
  3351  0377  2B28               	goto	l7341
  3352                           
  3353                           ;rfid125.c: 151: }
  3354                           ;rfid125.c: 152: RF_serial_55bits[10] <<= 3;
  3355  0378  0DC8               	rlf	get_RFID@RF_serial_55bits+10,f
  3356  0379  0DC8               	rlf	get_RFID@RF_serial_55bits+10,f
  3357  037A  0D48               	rlf	get_RFID@RF_serial_55bits+10,w
  3358  037B  39F8               	andlw	248
  3359  037C  00C8               	movwf	get_RFID@RF_serial_55bits+10
  3360  037D  30F0               	movlw	240
  3361                           
  3362                           ;rfid125.c: 153: keyID[0] =0x00;
  3363  037E  01E2               	clrf	_keyID
  3364                           
  3365                           ;rfid125.c: 154: if(((RF_serial_55bits[10] & 0xf0)==(even_col & 0xf0)) && (0==(RF_serial
      +                          _55bits[10]&0x08)))
  3366  037F  054A               	andwf	get_RFID@even_col,w
  3367  0380  00F7               	movwf	??_get_RFID
  3368  0381  0848               	movf	get_RFID@RF_serial_55bits+10,w
  3369  0382  39F0               	andlw	240
  3370  0383  0677               	xorwf	??_get_RFID,w
  3371  0384  1903               	btfsc	3,2
  3372  0385  19C8               	btfsc	get_RFID@RF_serial_55bits+10,3
  3373  0386  3400               	retlw	0
  3374                           
  3375                           ;rfid125.c: 155: {
  3376                           ;rfid125.c: 157: return 1;
  3377  0387  3401               	retlw	1
  3378  0388                     __end_of_get_RFID:	
  3379  0388                     PL2:	
  3380  0388  0873               	movf	?_timerOut+1,w
  3381  0389  00D0               	movwf	get_RFID@timeOutVal+1
  3382  038A  0872               	movf	?_timerOut,w
  3383  038B  00CF               	movwf	get_RFID@timeOutVal
  3384  038C  0450               	iorwf	get_RFID@timeOutVal+1,w
  3385  038D  0008               	return
  3386  038E                     PL4:	
  3387  038E  084D               	movf	get_RFID@i,w
  3388  038F  3E3E               	addlw	get_RFID@RF_serial_55bits& (0+255)
  3389  0390  0084               	movwf	4
  3390  0391  1383               	bcf	3,7	;select IRP bank0
  3391  0392  1003               	clrc
  3392  0393  0D80               	rlf	0,f
  3393  0394  0008               	return
  3394  0395                     PL5:	
  3395  0395  3096               	movlw	150
  3396  0396  00F2               	movwf	?_timerOut
  3397  0397  01F3               	clrf	?_timerOut+1
  3398  0398  084E               	movf	get_RFID@flag_RFID_last,w
  3399  0399  0008               	return
  3400                           
  3401                           	psect	text570
  3402  044A                     __ptext570:	
  3403 ;; =============== function _get_RFID ends ============
  3404                           
  3405                           
  3406 ;; *************** function _eepromWriteByte *****************
  3407 ;; Defined at:
  3408 ;;		line 26 in file "ms82_eeprom.c"
  3409 ;; Parameters:    Size  Location     Type
  3410 ;;  EEAddr          1    wreg     unsigned char 
  3411 ;;  EEData          1    2[COMMON] unsigned char 
  3412 ;; Auto vars:     Size  Location     Type
  3413 ;;  EEAddr          1    5[COMMON] unsigned char 
  3414 ;; Return value:  Size  Location     Type
  3415 ;;		None               void
  3416 ;; Registers used:
  3417 ;;		wreg
  3418 ;; Tracked objects:
  3419 ;;		On entry : 0/20
  3420 ;;		On exit  : 0/0
  3421 ;;		Unchanged: 0/0
  3422 ;; Data sizes:     COMMON   BANK0   BANK1
  3423 ;;      Params:         1       0       0
  3424 ;;      Locals:         1       0       0
  3425 ;;      Temps:          2       0       0
  3426 ;;      Totals:         4       0       0
  3427 ;;Total ram usage:        4 bytes
  3428 ;; Hardware stack levels used:    1
  3429 ;; Hardware stack levels required when called:    1
  3430 ;; This function calls:
  3431 ;;		Nothing
  3432 ;; This function is called by:
  3433 ;;		_eepromWriteBlock
  3434 ;;		_main
  3435 ;; This function uses a non-reentrant model
  3436 ;;
  3437  044A                     _eepromWriteByte:	
  3438                           
  3439                           ; Regs used in _eepromWriteByte: [wreg]
  3440                           ;eepromWriteByte@EEAddr stored from wreg
  3441  044A  00F5               	movwf	eepromWriteByte@EEAddr
  3442                           
  3443                           ;ms82_eeprom.c: 27: GIE = 0;
  3444  044B  138B               	bcf	11,7
  3445  044C                     l1597:	
  3446                           ;ms82_eeprom.c: 29: {
  3447                           ;ms82_eeprom.c: 30: while(GIE) asm("clrwdt");
  3448                           
  3449  044C  1F8B               	btfss	11,7
  3450  044D  2C50               	goto	l7159
  3451  044E  0064               	clrwdt	;#
  3452  044F  2C4C               	goto	l1597
  3453  0450                     l7159:	
  3454                           
  3455                           ;ms82_eeprom.c: 31: EEADR = EEAddr;
  3456  0450  0875               	movf	eepromWriteByte@EEAddr,w
  3457  0451  1683               	bsf	3,5	;RP0=1, select bank1
  3458  0452  009B               	movwf	27	;volatile
  3459                           
  3460                           ;ms82_eeprom.c: 32: EEDAT = EEData;
  3461  0453  0872               	movf	eepromWriteByte@EEData,w
  3462  0454  009A               	movwf	26	;volatile
  3463  0455  3034               	movlw	52
  3464                           
  3465                           ;ms82_eeprom.c: 33: EEIF = 0;
  3466  0456  1283               	bcf	3,5	;RP0=0, select bank0
  3467  0457  138C               	bcf	12,7
  3468                           
  3469                           ;ms82_eeprom.c: 34: EECON1 = 0x34;
  3470  0458  1683               	bsf	3,5	;RP0=1, select bank1
  3471  0459  009C               	movwf	28	;volatile
  3472                           
  3473                           ;ms82_eeprom.c: 35: WR = 1;
  3474  045A  141D               	bsf	29,0
  3475  045B                     l1600:	
  3476                           ;ms82_eeprom.c: 36: while(WR) asm("clrwdt");
  3477                           
  3478  045B  1683               	bsf	3,5	;RP0=1, select bank1
  3479  045C  1C1D               	btfss	29,0
  3480  045D  2C60               	goto	l7165
  3481  045E  0064               	clrwdt	;#
  3482  045F  2C5B               	goto	l1600
  3483  0460                     l7165:	
  3484                           
  3485                           ;ms82_eeprom.c: 37: _delay((unsigned long)((2)*(8000000/4000.0)));
  3486  0460  3006               	movlw	6
  3487  0461  00F4               	movwf	??_eepromWriteByte+1
  3488  0462  3030               	movlw	48
  3489  0463  00F3               	movwf	??_eepromWriteByte
  3490  0464                     u2437:	
  3491  0464  0BF3               	decfsz	??_eepromWriteByte,f
  3492  0465  2C64               	goto	u2437
  3493  0466  0BF4               	decfsz	??_eepromWriteByte+1,f
  3494  0467  2C64               	goto	u2437
  3495  0468  0064               	clrwdt
  3496                           
  3497                           ;ms82_eeprom.c: 38: }
  3498                           ;ms82_eeprom.c: 39: GIE = 1;
  3499  0469  178B               	bsf	11,7
  3500  046A  0008               	return
  3501  046B                     __end_of_eepromWriteByte:	
  3502                           
  3503                           	psect	text571
  3504  057D                     __ptext571:	
  3505 ;; =============== function _eepromWriteByte ends ============
  3506                           
  3507                           
  3508 ;; *************** function _eepromReadBlock *****************
  3509 ;; Defined at:
  3510 ;;		line 18 in file "ms82_eeprom.c"
  3511 ;; Parameters:    Size  Location     Type
  3512 ;;  addStart        1    wreg     unsigned char 
  3513 ;;  buff            1    4[COMMON] PTR unsigned char 
  3514 ;;		 -> buffTag(25), 
  3515 ;;  len             1    5[COMMON] unsigned char 
  3516 ;; Auto vars:     Size  Location     Type
  3517 ;;  addStart        1    7[COMMON] unsigned char 
  3518 ;;  i               1    8[COMMON] unsigned char 
  3519 ;; Return value:  Size  Location     Type
  3520 ;;		None               void
  3521 ;; Registers used:
  3522 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3523 ;; Tracked objects:
  3524 ;;		On entry : 0/20
  3525 ;;		On exit  : 0/0
  3526 ;;		Unchanged: FFEDF/0
  3527 ;; Data sizes:     COMMON   BANK0   BANK1
  3528 ;;      Params:         2       0       0
  3529 ;;      Locals:         2       0       0
  3530 ;;      Temps:          1       0       0
  3531 ;;      Totals:         5       0       0
  3532 ;;Total ram usage:        5 bytes
  3533 ;; Hardware stack levels used:    1
  3534 ;; Hardware stack levels required when called:    2
  3535 ;; This function calls:
  3536 ;;		_eepromReadByte
  3537 ;; This function is called by:
  3538 ;;		_main
  3539 ;; This function uses a non-reentrant model
  3540 ;;
  3541  057D                     _eepromReadBlock:	
  3542                           
  3543                           ; Regs used in _eepromReadBlock: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3544                           ;eepromReadBlock@addStart stored from wreg
  3545  057D  00F7               	movwf	eepromReadBlock@addStart
  3546                           
  3547                           ;ms82_eeprom.c: 19: unsigned char i;
  3548                           ;ms82_eeprom.c: 20: for(i=0;i<len;i++){
  3549  057E  01F8               	clrf	eepromReadBlock@i
  3550  057F                     l7155:	
  3551  057F  0875               	movf	eepromReadBlock@len,w
  3552  0580  0278               	subwf	eepromReadBlock@i,w
  3553  0581  1803               	btfsc	3,0
  3554  0582  0008               	return
  3555                           
  3556                           ;ms82_eeprom.c: 21: buff[i] = eepromReadByte(addStart+i);
  3557  0583  0878               	movf	eepromReadBlock@i,w
  3558  0584  0774               	addwf	eepromReadBlock@buff,w
  3559  0585  00F6               	movwf	??_eepromReadBlock
  3560  0586  0084               	movwf	4
  3561  0587  0878               	movf	eepromReadBlock@i,w
  3562  0588  0777               	addwf	eepromReadBlock@addStart,w
  3563  0589  2610               	fcall	_eepromReadByte
  3564  058A  1383               	bcf	3,7	;select IRP bank0
  3565  058B  0080               	movwf	0
  3566  058C  0AF8               	incf	eepromReadBlock@i,f
  3567  058D  2D7F               	goto	l7155
  3568  058E                     __end_of_eepromReadBlock:	
  3569                           
  3570                           	psect	text572
  3571  0608                     __ptext572:	
  3572 ;; =============== function _eepromReadBlock ends ============
  3573                           
  3574                           
  3575 ;; *************** function _sys_init *****************
  3576 ;; Defined at:
  3577 ;;		line 3 in file "sysinit.c"
  3578 ;; Parameters:    Size  Location     Type
  3579 ;;		None
  3580 ;; Auto vars:     Size  Location     Type
  3581 ;;		None
  3582 ;; Return value:  Size  Location     Type
  3583 ;;		None               void
  3584 ;; Registers used:
  3585 ;;		wreg
  3586 ;; Tracked objects:
  3587 ;;		On entry : 0/0
  3588 ;;		On exit  : 20/20
  3589 ;;		Unchanged: 0/0
  3590 ;; Data sizes:     COMMON   BANK0   BANK1
  3591 ;;      Params:         0       0       0
  3592 ;;      Locals:         0       0       0
  3593 ;;      Temps:          0       0       0
  3594 ;;      Totals:         0       0       0
  3595 ;;Total ram usage:        0 bytes
  3596 ;; Hardware stack levels used:    1
  3597 ;; Hardware stack levels required when called:    1
  3598 ;; This function calls:
  3599 ;;		Nothing
  3600 ;; This function is called by:
  3601 ;;		_main
  3602 ;; This function uses a non-reentrant model
  3603 ;;
  3604  0608                     _sys_init:	
  3605                           
  3606                           ;sysinit.c: 21: OSCCON = 0B01100001;
  3607                           
  3608                           ; Regs used in _sys_init: [wreg]
  3609  0608  3061               	movlw	97
  3610  0609  1683               	bsf	3,5	;RP0=1, select bank1
  3611  060A  008F               	movwf	15	;volatile
  3612                           
  3613                           ;sysinit.c: 22: _nop();
  3614  060B  0000               	nop
  3615  060C                     l787:	
  3616                           ;sysinit.c: 28: while(HTS==0);
  3617                           
  3618  060C  1683               	bsf	3,5	;RP0=1, select bank1
  3619  060D  190F               	btfsc	15,2
  3620  060E  0008               	return
  3621  060F  2E0C               	goto	l787
  3622  0610                     __end_of_sys_init:	
  3623                           
  3624                           	psect	text573
  3625  0520                     __ptext573:	
  3626 ;; =============== function _sys_init ends ============
  3627                           
  3628                           
  3629 ;; *************** function ___lbdiv *****************
  3630 ;; Defined at:
  3631 ;;		line 5 in file "D:\OneDrive\SmarRF\MCU\MC82\IDE\ORIGINIDE_V2.0.9\Program Files (x86)\HI-TECH Software\PICC\9.83\sour
      +ces\lbdiv.c"
  3632 ;; Parameters:    Size  Location     Type
  3633 ;;  dividend        1    wreg     unsigned char 
  3634 ;;  divisor         1    2[COMMON] unsigned char 
  3635 ;; Auto vars:     Size  Location     Type
  3636 ;;  dividend        1    3[COMMON] unsigned char 
  3637 ;;  quotient        1    5[COMMON] unsigned char 
  3638 ;;  counter         1    4[COMMON] unsigned char 
  3639 ;; Return value:  Size  Location     Type
  3640 ;;                  1    wreg      unsigned char 
  3641 ;; Registers used:
  3642 ;;		wreg, status,2, status,0
  3643 ;; Tracked objects:
  3644 ;;		On entry : 20/0
  3645 ;;		On exit  : 20/0
  3646 ;;		Unchanged: FFFDF/0
  3647 ;; Data sizes:     COMMON   BANK0   BANK1
  3648 ;;      Params:         1       0       0
  3649 ;;      Locals:         3       0       0
  3650 ;;      Temps:          0       0       0
  3651 ;;      Totals:         4       0       0
  3652 ;;Total ram usage:        4 bytes
  3653 ;; Hardware stack levels used:    1
  3654 ;; Hardware stack levels required when called:    1
  3655 ;; This function calls:
  3656 ;;		Nothing
  3657 ;; This function is called by:
  3658 ;;		_get_RFID
  3659 ;;		_id_search
  3660 ;; This function uses a non-reentrant model
  3661 ;;
  3662  0520                     ___lbdiv:	
  3663                           
  3664                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  3665                           ;___lbdiv@dividend stored from wreg
  3666  0520  00F3               	movwf	___lbdiv@dividend
  3667  0521  01F5               	clrf	___lbdiv@quotient
  3668  0522  0872               	movf	___lbdiv@divisor,w
  3669  0523  1903               	btfsc	3,2
  3670  0524  2D39               	goto	l7141
  3671  0525  01F4               	clrf	___lbdiv@counter
  3672  0526                     l7127:	
  3673  0526  0AF4               	incf	___lbdiv@counter,f
  3674  0527  1BF2               	btfsc	___lbdiv@divisor,7
  3675  0528  2D2C               	goto	l5749
  3676  0529  1003               	clrc
  3677  052A  0DF2               	rlf	___lbdiv@divisor,f
  3678  052B  2D26               	goto	l7127
  3679  052C                     l5749:	
  3680  052C  1003               	clrc
  3681  052D  0DF5               	rlf	___lbdiv@quotient,f
  3682  052E  0872               	movf	___lbdiv@divisor,w
  3683  052F  0273               	subwf	___lbdiv@dividend,w
  3684  0530  1C03               	skipc
  3685  0531  2D36               	goto	L9
  3686  0532  0872               	movf	___lbdiv@divisor,w
  3687  0533  02F3               	subwf	___lbdiv@dividend,f
  3688  0534  1475               	bsf	___lbdiv@quotient,0
  3689  0535  1003               	clrc
  3690  0536                     L9:	
  3691  0536  0CF2               	rrf	___lbdiv@divisor,f
  3692  0537  0BF4               	decfsz	___lbdiv@counter,f
  3693  0538  2D2C               	goto	l5749
  3694  0539                     l7141:	
  3695  0539  0875               	movf	___lbdiv@quotient,w
  3696  053A  0008               	return
  3697  053B                     __end_of___lbdiv:	
  3698                           
  3699                           	psect	text574
  3700  053B                     __ptext574:	
  3701 ;; =============== function ___lbdiv ends ============
  3702                           
  3703                           
  3704 ;; *************** function ___wmul *****************
  3705 ;; Defined at:
  3706 ;;		line 3 in file "D:\OneDrive\SmarRF\MCU\MC82\IDE\ORIGINIDE_V2.0.9\Program Files (x86)\HI-TECH Software\PICC\9.83\sour
      +ces\wmul.c"
  3707 ;; Parameters:    Size  Location     Type
  3708 ;;  multiplier      2    2[COMMON] unsigned int 
  3709 ;;  multiplicand    2    4[COMMON] unsigned int 
  3710 ;; Auto vars:     Size  Location     Type
  3711 ;;  product         2    6[COMMON] unsigned int 
  3712 ;; Return value:  Size  Location     Type
  3713 ;;                  2    2[COMMON] unsigned int 
  3714 ;; Registers used:
  3715 ;;		wreg, status,2, status,0
  3716 ;; Tracked objects:
  3717 ;;		On entry : 20/0
  3718 ;;		On exit  : 20/0
  3719 ;;		Unchanged: FFFDF/0
  3720 ;; Data sizes:     COMMON   BANK0   BANK1
  3721 ;;      Params:         4       0       0
  3722 ;;      Locals:         2       0       0
  3723 ;;      Temps:          0       0       0
  3724 ;;      Totals:         6       0       0
  3725 ;;Total ram usage:        6 bytes
  3726 ;; Hardware stack levels used:    1
  3727 ;; Hardware stack levels required when called:    1
  3728 ;; This function calls:
  3729 ;;		Nothing
  3730 ;; This function is called by:
  3731 ;;		_beep
  3732 ;; This function uses a non-reentrant model
  3733 ;;
  3734  053B                     ___wmul:	
  3735                           
  3736                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3737  053B  01F6               	clrf	___wmul@product
  3738  053C  01F7               	clrf	___wmul@product+1
  3739  053D                     l7107:	
  3740  053D  1C72               	btfss	___wmul@multiplier,0
  3741  053E  2D45               	goto	l7111
  3742  053F  0874               	movf	___wmul@multiplicand,w
  3743  0540  07F6               	addwf	___wmul@product,f
  3744  0541  1803               	skipnc
  3745  0542  0AF7               	incf	___wmul@product+1,f
  3746  0543  0875               	movf	___wmul@multiplicand+1,w
  3747  0544  07F7               	addwf	___wmul@product+1,f
  3748  0545                     l7111:	
  3749  0545  1003               	clrc
  3750  0546  0DF4               	rlf	___wmul@multiplicand,f
  3751  0547  0DF5               	rlf	___wmul@multiplicand+1,f
  3752  0548  1003               	clrc
  3753  0549  0CF3               	rrf	___wmul@multiplier+1,f
  3754  054A  0CF2               	rrf	___wmul@multiplier,f
  3755  054B  0873               	movf	___wmul@multiplier+1,w
  3756  054C  0472               	iorwf	___wmul@multiplier,w
  3757  054D  1D03               	skipz
  3758  054E  2D3D               	goto	l7107
  3759  054F  0877               	movf	___wmul@product+1,w
  3760  0550  00F3               	movwf	?___wmul+1
  3761  0551  0876               	movf	___wmul@product,w
  3762  0552  00F2               	movwf	?___wmul
  3763  0553  0008               	return
  3764  0554                     __end_of___wmul:	
  3765                           
  3766                           	psect	text575
  3767  05AD                     __ptext575:	
  3768 ;; =============== function ___wmul ends ============
  3769                           
  3770                           
  3771 ;; *************** function ___bmul *****************
  3772 ;; Defined at:
  3773 ;;		line 3 in file "D:\OneDrive\SmarRF\MCU\MC82\IDE\ORIGINIDE_V2.0.9\Program Files (x86)\HI-TECH Software\PICC\9.83\sour
      +ces\bmul.c"
  3774 ;; Parameters:    Size  Location     Type
  3775 ;;  multiplier      1    wreg     unsigned char 
  3776 ;;  multiplicand    1    2[COMMON] unsigned char 
  3777 ;; Auto vars:     Size  Location     Type
  3778 ;;  multiplier      1    4[COMMON] unsigned char 
  3779 ;;  product         1    3[COMMON] unsigned char 
  3780 ;; Return value:  Size  Location     Type
  3781 ;;                  1    wreg      unsigned char 
  3782 ;; Registers used:
  3783 ;;		wreg, status,2, status,0
  3784 ;; Tracked objects:
  3785 ;;		On entry : 20/0
  3786 ;;		On exit  : 20/0
  3787 ;;		Unchanged: FFFDF/0
  3788 ;; Data sizes:     COMMON   BANK0   BANK1
  3789 ;;      Params:         1       0       0
  3790 ;;      Locals:         2       0       0
  3791 ;;      Temps:          0       0       0
  3792 ;;      Totals:         3       0       0
  3793 ;;Total ram usage:        3 bytes
  3794 ;; Hardware stack levels used:    1
  3795 ;; Hardware stack levels required when called:    1
  3796 ;; This function calls:
  3797 ;;		Nothing
  3798 ;; This function is called by:
  3799 ;;		_id_replate
  3800 ;; This function uses a non-reentrant model
  3801 ;;
  3802  05AD                     ___bmul:	
  3803                           
  3804                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  3805                           ;___bmul@multiplier stored from wreg
  3806  05AD  00F4               	movwf	___bmul@multiplier
  3807  05AE  01F3               	clrf	___bmul@product
  3808  05AF                     l7091:	
  3809  05AF  0872               	movf	___bmul@multiplicand,w
  3810  05B0  1874               	btfsc	___bmul@multiplier,0
  3811  05B1  07F3               	addwf	___bmul@product,f
  3812  05B2  1003               	clrc
  3813  05B3  0DF2               	rlf	___bmul@multiplicand,f
  3814  05B4  1003               	clrc
  3815  05B5  0CF4               	rrf	___bmul@multiplier,f
  3816  05B6  08F4               	movf	___bmul@multiplier,f
  3817  05B7  1D03               	skipz
  3818  05B8  2DAF               	goto	l7091
  3819  05B9  0873               	movf	___bmul@product,w
  3820  05BA  0008               	return
  3821  05BB                     __end_of___bmul:	
  3822                           
  3823                           	psect	text576
  3824  05EF                     __ptext576:	
  3825 ;; =============== function ___bmul ends ============
  3826                           
  3827                           
  3828 ;; *************** function _setState *****************
  3829 ;; Defined at:
  3830 ;;		line 106 in file "MAIN.C"
  3831 ;; Parameters:    Size  Location     Type
  3832 ;;  stt             1    wreg     unsigned char 
  3833 ;;  _tOut           2    2[COMMON] unsigned int 
  3834 ;; Auto vars:     Size  Location     Type
  3835 ;;  stt             1    4[COMMON] unsigned char 
  3836 ;; Return value:  Size  Location     Type
  3837 ;;		None               void
  3838 ;; Registers used:
  3839 ;;		wreg, status,2
  3840 ;; Tracked objects:
  3841 ;;		On entry : 0/20
  3842 ;;		On exit  : 20/0
  3843 ;;		Unchanged: FFFDF/0
  3844 ;; Data sizes:     COMMON   BANK0   BANK1
  3845 ;;      Params:         2       0       0
  3846 ;;      Locals:         1       0       0
  3847 ;;      Temps:          0       0       0
  3848 ;;      Totals:         3       0       0
  3849 ;;Total ram usage:        3 bytes
  3850 ;; Hardware stack levels used:    1
  3851 ;; Hardware stack levels required when called:    1
  3852 ;; This function calls:
  3853 ;;		Nothing
  3854 ;; This function is called by:
  3855 ;;		_main
  3856 ;; This function uses a non-reentrant model
  3857 ;;
  3858  05EF                     _setState:	
  3859                           
  3860                           ; Regs used in _setState: [wreg+status,2]
  3861                           ;setState@stt stored from wreg
  3862  05EF  00F4               	movwf	setState@stt
  3863                           
  3864                           ;MAIN.C: 108: mtState = stt;
  3865  05F0  1283               	bcf	3,5	;RP0=0, select bank0
  3866  05F1  00E1               	movwf	_mtState
  3867                           
  3868                           ;MAIN.C: 109: timeTick = 0;
  3869  05F2  01DE               	clrf	_timeTick
  3870  05F3  01DF               	clrf	_timeTick+1
  3871                           
  3872                           ;MAIN.C: 110: timeOut = _tOut;
  3873  05F4  0873               	movf	setState@_tOut+1,w
  3874  05F5  00DD               	movwf	_timeOut+1
  3875  05F6  0872               	movf	setState@_tOut,w
  3876  05F7  00DC               	movwf	_timeOut
  3877  05F8  0008               	return
  3878  05F9                     __end_of_setState:	
  3879                           
  3880                           	psect	text577
  3881  048A                     __ptext577:	
  3882 ;; =============== function _setState ends ============
  3883                           
  3884                           
  3885 ;; *************** function _SET_EPWM_ON *****************
  3886 ;; Defined at:
  3887 ;;		line 11 in file "ms82_pwm.c"
  3888 ;; Parameters:    Size  Location     Type
  3889 ;;		None
  3890 ;; Auto vars:     Size  Location     Type
  3891 ;;		None
  3892 ;; Return value:  Size  Location     Type
  3893 ;;		None               void
  3894 ;; Registers used:
  3895 ;;		wreg, status,2
  3896 ;; Tracked objects:
  3897 ;;		On entry : 20/20
  3898 ;;		On exit  : 20/20
  3899 ;;		Unchanged: FFE00/0
  3900 ;; Data sizes:     COMMON   BANK0   BANK1
  3901 ;;      Params:         0       0       0
  3902 ;;      Locals:         0       0       0
  3903 ;;      Temps:          0       0       0
  3904 ;;      Totals:         0       0       0
  3905 ;;Total ram usage:        0 bytes
  3906 ;; Hardware stack levels used:    1
  3907 ;; Hardware stack levels required when called:    1
  3908 ;; This function calls:
  3909 ;;		Nothing
  3910 ;; This function is called by:
  3911 ;;		_main
  3912 ;; This function uses a non-reentrant model
  3913 ;;
  3914  048A                     _SET_EPWM_ON:	
  3915                           
  3916                           ;ms82_pwm.c: 12: TRISC |= 0B00100000;
  3917                           
  3918                           ; Regs used in _SET_EPWM_ON: [wreg+status,2]
  3919  048A  1687               	bsf	7,5	;volatile
  3920                           
  3921                           ;ms82_pwm.c: 13: T2CON0 = 0B00000001;
  3922  048B  3001               	movlw	1
  3923  048C  1283               	bcf	3,5	;RP0=0, select bank0
  3924  048D  0092               	movwf	18	;volatile
  3925                           
  3926                           ;ms82_pwm.c: 14: T2CON1 = 0B00000000;
  3927  048E  1683               	bsf	3,5	;RP0=1, select bank1
  3928  048F  019E               	clrf	30	;volatile
  3929                           
  3930                           ;ms82_pwm.c: 15: PR2H = 0;
  3931  0490  0192               	clrf	18	;volatile
  3932                           
  3933                           ;ms82_pwm.c: 16: PR2L = 7;
  3934  0491  3007               	movlw	7
  3935  0492  0091               	movwf	17	;volatile
  3936                           
  3937                           ;ms82_pwm.c: 17: P1ADTH = 0;
  3938  0493  1283               	bcf	3,5	;RP0=0, select bank0
  3939  0494  0194               	clrf	20	;volatile
  3940                           
  3941                           ;ms82_pwm.c: 18: P1ADTL = 4;
  3942  0495  3004               	movlw	4
  3943  0496  008E               	movwf	14	;volatile
  3944                           
  3945                           ;ms82_pwm.c: 20: P1OE = 0B00000001;
  3946  0497  3001               	movlw	1
  3947  0498  1683               	bsf	3,5	;RP0=1, select bank1
  3948  0499  0090               	movwf	16	;volatile
  3949                           
  3950                           ;ms82_pwm.c: 21: P1POL = 0B00000000;
  3951  049A  0199               	clrf	25	;volatile
  3952                           
  3953                           ;ms82_pwm.c: 22: P1CON = 0B00000000;
  3954  049B  1283               	bcf	3,5	;RP0=0, select bank0
  3955  049C  0196               	clrf	22	;volatile
  3956                           
  3957                           ;ms82_pwm.c: 24: TMR2H = 0;
  3958  049D  0193               	clrf	19	;volatile
  3959                           
  3960                           ;ms82_pwm.c: 25: TMR2L = 0;
  3961  049E  0191               	clrf	17	;volatile
  3962                           
  3963                           ;ms82_pwm.c: 26: TMR2IF = 0;
  3964  049F  108C               	bcf	12,1
  3965                           
  3966                           ;ms82_pwm.c: 27: TMR2ON = 1;
  3967  04A0  1512               	bsf	18,2
  3968  04A1                     l3294:	
  3969                           ;ms82_pwm.c: 28: while(TMR2IF==0) asm("clrwdt");
  3970                           
  3971  04A1  1283               	bcf	3,5	;RP0=0, select bank0
  3972  04A2  188C               	btfsc	12,1
  3973  04A3  2CA6               	goto	l3296
  3974  04A4  0064               	clrwdt	;#
  3975  04A5  2CA1               	goto	l3294
  3976  04A6                     l3296:	
  3977                           
  3978                           ;ms82_pwm.c: 29: TRISC &= 0B11011111;
  3979  04A6  1683               	bsf	3,5	;RP0=1, select bank1
  3980  04A7  1287               	bcf	7,5	;volatile
  3981  04A8  0008               	return
  3982  04A9                     __end_of_SET_EPWM_ON:	
  3983                           
  3984                           	psect	text578
  3985  04A9                     __ptext578:	
  3986 ;; =============== function _SET_EPWM_ON ends ============
  3987                           
  3988                           
  3989 ;; *************** function _timerOut *****************
  3990 ;; Defined at:
  3991 ;;		line 6 in file "rfid125.c"
  3992 ;; Parameters:    Size  Location     Type
  3993 ;;  Logic           1    wreg     unsigned char 
  3994 ;;  time            2    2[COMMON] unsigned int 
  3995 ;; Auto vars:     Size  Location     Type
  3996 ;;  Logic           1    4[COMMON] unsigned char 
  3997 ;;  CurTimer        2    5[COMMON] unsigned int 
  3998 ;; Return value:  Size  Location     Type
  3999 ;;                  2    2[COMMON] unsigned int 
  4000 ;; Registers used:
  4001 ;;		wreg, status,2
  4002 ;; Tracked objects:
  4003 ;;		On entry : 20/0
  4004 ;;		On exit  : 20/0
  4005 ;;		Unchanged: FFFDF/0
  4006 ;; Data sizes:     COMMON   BANK0   BANK1
  4007 ;;      Params:         2       0       0
  4008 ;;      Locals:         3       0       0
  4009 ;;      Temps:          0       0       0
  4010 ;;      Totals:         5       0       0
  4011 ;;Total ram usage:        5 bytes
  4012 ;; Hardware stack levels used:    1
  4013 ;; Hardware stack levels required when called:    1
  4014 ;; This function calls:
  4015 ;;		Nothing
  4016 ;; This function is called by:
  4017 ;;		_get_RFID
  4018 ;; This function uses a non-reentrant model
  4019 ;;
  4020  04A9                     _timerOut:	
  4021                           
  4022                           ; Regs used in _timerOut: [wreg+status,2]
  4023                           ;timerOut@Logic stored from wreg
  4024  04A9  00F4               	movwf	timerOut@Logic
  4025                           
  4026                           ;rfid125.c: 7: unsigned int CurTimer;
  4027                           ;rfid125.c: 8: T0ON = 0;
  4028  04AA  119F               	bcf	31,3
  4029                           
  4030                           ;rfid125.c: 10: TMR0 = 0;
  4031  04AB  0181               	clrf	1	;volatile
  4032                           
  4033                           ;rfid125.c: 11: T0IF = 0;
  4034  04AC  110B               	bcf	11,2
  4035                           
  4036                           ;rfid125.c: 12: T0ON = 1;
  4037  04AD  159F               	bsf	31,3
  4038  04AE                     l7051:	
  4039                           ;rfid125.c: 13: while(RA5==Logic){
  4040                           
  4041  04AE  3000               	movlw	0
  4042  04AF  1A85               	btfsc	5,5
  4043  04B0  3001               	movlw	1
  4044  04B1  0674               	xorwf	timerOut@Logic,w
  4045  04B2  1D03               	btfss	3,2
  4046  04B3  2CC3               	goto	l7053
  4047                           
  4048                           ;rfid125.c: 14: CurTimer= (0 <<8 )| TMR0;
  4049  04B4  01F5               	clrf	timerOut@CurTimer
  4050  04B5  01F6               	clrf	timerOut@CurTimer+1
  4051  04B6  0801               	movf	1,w	;volatile
  4052  04B7  04F5               	iorwf	timerOut@CurTimer,f
  4053                           
  4054                           ;rfid125.c: 15: if(CurTimer>time)
  4055  04B8  0876               	movf	timerOut@CurTimer+1,w
  4056  04B9  0273               	subwf	timerOut@time+1,w
  4057  04BA  1D03               	skipz
  4058  04BB  2CBE               	goto	u1215
  4059  04BC  0875               	movf	timerOut@CurTimer,w
  4060  04BD  0272               	subwf	timerOut@time,w
  4061  04BE                     u1215:	
  4062  04BE  1803               	skipnc
  4063  04BF  2CAE               	goto	l7051
  4064                           
  4065                           ;rfid125.c: 16: return 0;
  4066  04C0  01F2               	clrf	?_timerOut
  4067  04C1  01F3               	clrf	?_timerOut+1
  4068  04C2  0008               	return
  4069  04C3                     l7053:	
  4070                           
  4071                           ;rfid125.c: 17: }
  4072                           ;rfid125.c: 18: return CurTimer;
  4073  04C3  0876               	movf	timerOut@CurTimer+1,w
  4074  04C4  00F3               	movwf	?_timerOut+1
  4075  04C5  0875               	movf	timerOut@CurTimer,w
  4076  04C6  00F2               	movwf	?_timerOut
  4077  04C7  0008               	return
  4078  04C8                     __end_of_timerOut:	
  4079                           
  4080                           	psect	text579
  4081  04C8                     __ptext579:	
  4082 ;; =============== function _timerOut ends ============
  4083                           
  4084                           
  4085 ;; *************** function _comArr *****************
  4086 ;; Defined at:
  4087 ;;		line 52 in file "ms82_eeprom.c"
  4088 ;; Parameters:    Size  Location     Type
  4089 ;;  arr1            1    wreg     PTR unsigned char 
  4090 ;;		 -> keyID(5), 
  4091 ;;  arr2            1    2[COMMON] PTR unsigned char 
  4092 ;;		 -> buffTag(25), 
  4093 ;;  len1            1    3[COMMON] unsigned char 
  4094 ;;  len2            1    4[COMMON] unsigned char 
  4095 ;; Auto vars:     Size  Location     Type
  4096 ;;  arr1            1    8[COMMON] PTR unsigned char 
  4097 ;;		 -> keyID(5), 
  4098 ;;  i               1    9[COMMON] unsigned char 
  4099 ;; Return value:  Size  Location     Type
  4100 ;;                  1    wreg      unsigned char 
  4101 ;; Registers used:
  4102 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4103 ;; Tracked objects:
  4104 ;;		On entry : 20/0
  4105 ;;		On exit  : 20/0
  4106 ;;		Unchanged: FFEDF/0
  4107 ;; Data sizes:     COMMON   BANK0   BANK1
  4108 ;;      Params:         3       0       0
  4109 ;;      Locals:         2       0       0
  4110 ;;      Temps:          3       0       0
  4111 ;;      Totals:         8       0       0
  4112 ;;Total ram usage:        8 bytes
  4113 ;; Hardware stack levels used:    1
  4114 ;; Hardware stack levels required when called:    1
  4115 ;; This function calls:
  4116 ;;		Nothing
  4117 ;; This function is called by:
  4118 ;;		_id_search
  4119 ;; This function uses a non-reentrant model
  4120 ;;
  4121  04C8                     _comArr:	
  4122                           
  4123                           ; Regs used in _comArr: [wreg-fsr0h+status,2+status,0]
  4124                           ;comArr@arr1 stored from wreg
  4125  04C8  00F8               	movwf	comArr@arr1
  4126                           
  4127                           ;ms82_eeprom.c: 53: unsigned char i;
  4128                           ;ms82_eeprom.c: 55: if(len1!=len2)
  4129  04C9  0873               	movf	comArr@len1,w
  4130  04CA  0674               	xorwf	comArr@len2,w
  4131  04CB  1D03               	btfss	3,2
  4132                           
  4133                           ;ms82_eeprom.c: 56: return 0;
  4134  04CC  3400               	retlw	0
  4135                           
  4136                           ;ms82_eeprom.c: 57: else{
  4137                           ;ms82_eeprom.c: 58: for(i=0;i<len1;i++){
  4138  04CD  01F9               	clrf	comArr@i
  4139  04CE                     l7019:	
  4140  04CE  0873               	movf	comArr@len1,w
  4141  04CF  0279               	subwf	comArr@i,w
  4142                           
  4143                           ;ms82_eeprom.c: 59: if(*(arr1+i) != *(arr2+i)){
  4144  04D0  0879               	movf	comArr@i,w
  4145  04D1  1803               	btfsc	3,0
  4146  04D2  2CE3               	goto	L10
  4147  04D3  0772               	addwf	comArr@arr2,w
  4148  04D4  00F5               	movwf	??_comArr
  4149  04D5  0084               	movwf	4
  4150  04D6  1383               	bcf	3,7	;select IRP bank0
  4151  04D7  0800               	movf	0,w
  4152  04D8  00F6               	movwf	??_comArr+1
  4153  04D9  0879               	movf	comArr@i,w
  4154  04DA  0778               	addwf	comArr@arr1,w
  4155  04DB  00F7               	movwf	??_comArr+2
  4156  04DC  0084               	movwf	4
  4157  04DD  0800               	movf	0,w
  4158  04DE  0676               	xorwf	??_comArr+1,w
  4159  04DF  1D03               	btfss	3,2
  4160  04E0  3400               	retlw	0
  4161  04E1  0AF9               	incf	comArr@i,f
  4162  04E2  2CCE               	goto	l7019
  4163  04E3                     L10:	
  4164                           ;ms82_eeprom.c: 61: }
  4165                           ;ms82_eeprom.c: 62: }
  4166                           ;ms82_eeprom.c: 63: if(i==len1)
  4167                           
  4168  04E3  0673               	xorwf	comArr@len1,w
  4169  04E4  1903               	btfsc	3,2
  4170                           
  4171                           ;ms82_eeprom.c: 64: return 1;
  4172  04E5  3401               	retlw	1
  4173  04E6  3400               	retlw	0
  4174  04E7                     __end_of_comArr:	
  4175                           
  4176                           	psect	text580
  4177  0610                     __ptext580:	
  4178 ;; =============== function _comArr ends ============
  4179                           
  4180                           
  4181 ;; *************** function _eepromReadByte *****************
  4182 ;; Defined at:
  4183 ;;		line 7 in file "ms82_eeprom.c"
  4184 ;; Parameters:    Size  Location     Type
  4185 ;;  EEAddr          1    wreg     unsigned char 
  4186 ;; Auto vars:     Size  Location     Type
  4187 ;;  EEAddr          1    2[COMMON] unsigned char 
  4188 ;;  ReEepromData    1    3[COMMON] unsigned char 
  4189 ;; Return value:  Size  Location     Type
  4190 ;;                  1    wreg      unsigned char 
  4191 ;; Registers used:
  4192 ;;		wreg
  4193 ;; Tracked objects:
  4194 ;;		On entry : 0/20
  4195 ;;		On exit  : 20/20
  4196 ;;		Unchanged: FFFDF/0
  4197 ;; Data sizes:     COMMON   BANK0   BANK1
  4198 ;;      Params:         0       0       0
  4199 ;;      Locals:         2       0       0
  4200 ;;      Temps:          0       0       0
  4201 ;;      Totals:         2       0       0
  4202 ;;Total ram usage:        2 bytes
  4203 ;; Hardware stack levels used:    1
  4204 ;; Hardware stack levels required when called:    1
  4205 ;; This function calls:
  4206 ;;		Nothing
  4207 ;; This function is called by:
  4208 ;;		_eepromReadBlock
  4209 ;;		_main
  4210 ;; This function uses a non-reentrant model
  4211 ;;
  4212  0610                     _eepromReadByte:	
  4213                           
  4214                           ; Regs used in _eepromReadByte: [wreg]
  4215                           ;eepromReadByte@EEAddr stored from wreg
  4216  0610  00F2               	movwf	eepromReadByte@EEAddr
  4217                           
  4218                           ;ms82_eeprom.c: 8: unsigned char ReEepromData;
  4219                           ;ms82_eeprom.c: 10: EEADR = EEAddr;
  4220  0611  1683               	bsf	3,5	;RP0=1, select bank1
  4221  0612  009B               	movwf	27	;volatile
  4222                           
  4223                           ;ms82_eeprom.c: 11: RD = 1;
  4224  0613  141C               	bsf	28,0
  4225                           
  4226                           ;ms82_eeprom.c: 12: ReEepromData = EEDAT;
  4227  0614  081A               	movf	26,w	;volatile
  4228  0615  00F3               	movwf	eepromReadByte@ReEepromData
  4229                           
  4230                           ;ms82_eeprom.c: 13: RD = 0;
  4231  0616  101C               	bcf	28,0
  4232                           
  4233                           ;ms82_eeprom.c: 14: return ReEepromData;
  4234  0617  0008               	return
  4235  0618                     __end_of_eepromReadByte:	
  4236                           
  4237                           	psect	text581
  4238  05E3                     __ptext581:	
  4239 ;; =============== function _eepromReadByte ends ============
  4240                           
  4241                           
  4242 ;; *************** function _int_init *****************
  4243 ;; Defined at:
  4244 ;;		line 67 in file "sysinit.c"
  4245 ;; Parameters:    Size  Location     Type
  4246 ;;		None
  4247 ;; Auto vars:     Size  Location     Type
  4248 ;;		None
  4249 ;; Return value:  Size  Location     Type
  4250 ;;		None               void
  4251 ;; Registers used:
  4252 ;;		status,2
  4253 ;; Tracked objects:
  4254 ;;		On entry : 20/20
  4255 ;;		On exit  : 20/20
  4256 ;;		Unchanged: FFFDF/0
  4257 ;; Data sizes:     COMMON   BANK0   BANK1
  4258 ;;      Params:         0       0       0
  4259 ;;      Locals:         0       0       0
  4260 ;;      Temps:          0       0       0
  4261 ;;      Totals:         0       0       0
  4262 ;;Total ram usage:        0 bytes
  4263 ;; Hardware stack levels used:    1
  4264 ;; Hardware stack levels required when called:    1
  4265 ;; This function calls:
  4266 ;;		Nothing
  4267 ;; This function is called by:
  4268 ;;		_main
  4269 ;; This function uses a non-reentrant model
  4270 ;;
  4271  05E3                     _int_init:	
  4272                           
  4273                           ;sysinit.c: 72: INTCON = 0B00000000;
  4274                           
  4275                           ; Regs used in _int_init: [status,2]
  4276  05E3  018B               	clrf	11	;volatile
  4277                           
  4278                           ;sysinit.c: 73: PIE1 = 0B00000000;
  4279  05E4  018C               	clrf	12	;volatile
  4280                           
  4281                           ;sysinit.c: 74: PIR1 = 0B00000000;
  4282  05E5  1283               	bcf	3,5	;RP0=0, select bank0
  4283  05E6  018C               	clrf	12	;volatile
  4284                           
  4285                           ;sysinit.c: 87: T0IF = 0;
  4286  05E7  110B               	bcf	11,2
  4287                           
  4288                           ;sysinit.c: 88: T0IE = 0;
  4289  05E8  128B               	bcf	11,5
  4290                           
  4291                           ;sysinit.c: 92: TMR2IF = 0;
  4292  05E9  108C               	bcf	12,1
  4293                           
  4294                           ;sysinit.c: 93: TMR2IE = 1;
  4295  05EA  1683               	bsf	3,5	;RP0=1, select bank1
  4296  05EB  148C               	bsf	12,1
  4297                           
  4298                           ;sysinit.c: 99: PEIE = 0;
  4299  05EC  130B               	bcf	11,6
  4300                           
  4301                           ;sysinit.c: 101: GIE = 1;
  4302  05ED  178B               	bsf	11,7
  4303  05EE  0008               	return
  4304  05EF                     __end_of_int_init:	
  4305                           
  4306                           	psect	text582
  4307  061F                     __ptext582:	
  4308 ;; =============== function _int_init ends ============
  4309                           
  4310                           
  4311 ;; *************** function _timer_init *****************
  4312 ;; Defined at:
  4313 ;;		line 44 in file "sysinit.c"
  4314 ;; Parameters:    Size  Location     Type
  4315 ;;		None
  4316 ;; Auto vars:     Size  Location     Type
  4317 ;;		None
  4318 ;; Return value:  Size  Location     Type
  4319 ;;		None               void
  4320 ;; Registers used:
  4321 ;;		wreg
  4322 ;; Tracked objects:
  4323 ;;		On entry : 20/20
  4324 ;;		On exit  : 20/20
  4325 ;;		Unchanged: FFFDF/0
  4326 ;; Data sizes:     COMMON   BANK0   BANK1
  4327 ;;      Params:         0       0       0
  4328 ;;      Locals:         0       0       0
  4329 ;;      Temps:          0       0       0
  4330 ;;      Totals:         0       0       0
  4331 ;;Total ram usage:        0 bytes
  4332 ;; Hardware stack levels used:    1
  4333 ;; Hardware stack levels required when called:    1
  4334 ;; This function calls:
  4335 ;;		Nothing
  4336 ;; This function is called by:
  4337 ;;		_main
  4338 ;; This function uses a non-reentrant model
  4339 ;;
  4340  061F                     _timer_init:	
  4341                           
  4342                           ;sysinit.c: 46: OPTION = 0B00000011;
  4343                           
  4344                           ; Regs used in _timer_init: [wreg]
  4345  061F  3003               	movlw	3
  4346  0620  0081               	movwf	1	;volatile
  4347  0621  0008               	return
  4348  0622                     __end_of_timer_init:	
  4349                           
  4350                           	psect	text583
  4351  05BB                     __ptext583:	
  4352 ;; =============== function _timer_init ends ============
  4353                           
  4354                           
  4355 ;; *************** function _gpio_init *****************
  4356 ;; Defined at:
  4357 ;;		line 32 in file "sysinit.c"
  4358 ;; Parameters:    Size  Location     Type
  4359 ;;		None
  4360 ;; Auto vars:     Size  Location     Type
  4361 ;;		None
  4362 ;; Return value:  Size  Location     Type
  4363 ;;		None               void
  4364 ;; Registers used:
  4365 ;;		wreg, status,2
  4366 ;; Tracked objects:
  4367 ;;		On entry : 20/20
  4368 ;;		On exit  : 20/20
  4369 ;;		Unchanged: FFFDF/0
  4370 ;; Data sizes:     COMMON   BANK0   BANK1
  4371 ;;      Params:         0       0       0
  4372 ;;      Locals:         0       0       0
  4373 ;;      Temps:          0       0       0
  4374 ;;      Totals:         0       0       0
  4375 ;;Total ram usage:        0 bytes
  4376 ;; Hardware stack levels used:    1
  4377 ;; Hardware stack levels required when called:    1
  4378 ;; This function calls:
  4379 ;;		Nothing
  4380 ;; This function is called by:
  4381 ;;		_main
  4382 ;; This function uses a non-reentrant model
  4383 ;;
  4384  05BB                     _gpio_init:	
  4385                           
  4386                           ;sysinit.c: 34: PORTA = 0B00000000;
  4387                           
  4388                           ; Regs used in _gpio_init: [wreg+status,2]
  4389  05BB  1283               	bcf	3,5	;RP0=0, select bank0
  4390  05BC  0185               	clrf	5	;volatile
  4391                           
  4392                           ;sysinit.c: 35: TRISA = 0B00110111;
  4393  05BD  3037               	movlw	55
  4394  05BE  1683               	bsf	3,5	;RP0=1, select bank1
  4395  05BF  0085               	movwf	5	;volatile
  4396                           
  4397                           ;sysinit.c: 36: WPUA = 0B10000000;
  4398  05C0  3080               	movlw	128
  4399  05C1  0095               	movwf	21	;volatile
  4400                           
  4401                           ;sysinit.c: 37: PORTC = 0B00000000;
  4402  05C2  1283               	bcf	3,5	;RP0=0, select bank0
  4403  05C3  0187               	clrf	7	;volatile
  4404                           
  4405                           ;sysinit.c: 38: TRISC = 0B11111101;
  4406  05C4  30FD               	movlw	253
  4407  05C5  1683               	bsf	3,5	;RP0=1, select bank1
  4408  05C6  0087               	movwf	7	;volatile
  4409                           
  4410                           ;sysinit.c: 39: WPUC = 0B00000000;
  4411  05C7  0193               	clrf	19	;volatile
  4412  05C8  0008               	return
  4413  05C9                     __end_of_gpio_init:	
  4414                           
  4415                           	psect	text584
  4416  0618                     __ptext584:	
  4417 ;; =============== function _gpio_init ends ============
  4418                           
  4419                           
  4420 ;; *************** function _ISR *****************
  4421 ;; Defined at:
  4422 ;;		line 46 in file "MAIN.C"
  4423 ;; Parameters:    Size  Location     Type
  4424 ;;		None
  4425 ;; Auto vars:     Size  Location     Type
  4426 ;;		None
  4427 ;; Return value:  Size  Location     Type
  4428 ;;		None               void
  4429 ;; Registers used:
  4430 ;;		None
  4431 ;; Tracked objects:
  4432 ;;		On entry : 0/0
  4433 ;;		On exit  : 0/0
  4434 ;;		Unchanged: FFFFF/0
  4435 ;; Data sizes:     COMMON   BANK0   BANK1
  4436 ;;      Params:         0       0       0
  4437 ;;      Locals:         0       0       0
  4438 ;;      Temps:          2       0       0
  4439 ;;      Totals:         2       0       0
  4440 ;;Total ram usage:        2 bytes
  4441 ;; Hardware stack levels used:    1
  4442 ;; This function calls:
  4443 ;;		Nothing
  4444 ;; This function is called by:
  4445 ;;		Interrupt level 1
  4446 ;; This function uses a non-reentrant model
  4447 ;;
  4448  0618                     _ISR:	
  4449  0618  0871               	movf	??_ISR+1,w
  4450  0619  008A               	movwf	10
  4451  061A  0E70               	swapf	??_ISR^(0+-128),w
  4452  061B  0083               	movwf	3
  4453  061C  0EFE               	swapf	126,f
  4454  061D  0E7E               	swapf	126,w
  4455  061E  0009               	retfie
  4456  061F                     __end_of_ISR:	
  4457                           
  4458                           	psect	intentry
  4459  0004                     __pintentry:	
  4460                           ; Regs used in _ISR: []
  4461                           
  4462  0004                     interrupt_function:	
  4463  007E                     saved_w	set	btemp
  4464  0004  00FE               	movwf	btemp
  4465  0005  0E03               	swapf	3,w
  4466  0006  00F0               	movwf	??_ISR
  4467  0007  080A               	movf	10,w
  4468  0008  00F1               	movwf	??_ISR+1
  4469  0009  2E18               	ljmp	_ISR
  4470                           
  4471                           	psect	text585
  4472  0000                     __ptext585:	
  4473 ;; =============== function _ISR ends ============
  4474                           
  4475  007E                     btemp	set	126	;btemp
  4476  007E                     wtemp0	set	126


HI-TECH Software PICC Macro Assembler V9.83 build 10920 
Symbol Table                                                                                   Sat May 16 09:20:25 2020

                         pc 0002              ___bmul@product 0073                          _RD 04E0  
                        _WR 04E8                          fsr 0004         ___wmul@multiplicand 0074  
                       _C1R 08CA                         _C2R 08D2                         l790 0000  
                       l793 0000                         l787 060C                         l796 0000  
                       l799 0000                         _GIE 005F                         _RA2 002A  
                       _RA3 002B                         _RC1 0039                         _RA5 002D  
                       _RA6 002E                         _HTS 047A                         _ISR 0618  
                       _SR0 0CF6                         _SR1 0CF7                         _VR0 08C0  
                       _VR1 08C1                         _VR2 08C2                         _VR3 08C3  
                       _VRR 08C5                         fsr0 0004                         indf 0000  
          get_RFID@even_col 004A            get_RFID@even_row 004B                 main@idState 0059  
                      S7787 0600                        ?_ISR 0070                        _C1OE 08CD  
                      l1600 045B                        l1603 0000                        _C2OE 08D5  
                      _C1ON 08CF                        l1609 0000                        l4130 03E8  
                      l4140 0000                        l4132 03FC                        _C2ON 08D7  
                      l4125 0000                        l4134 0000                        l4230 021E  
                      l4222 01DC                        l4214 01B6                        l5031 042F  
                      l5033 0000                        l4225 020E                        l1594 0000  
                      l5050 0000                        l2459 026E                        l1588 0000  
                      l1597 044C                        l4149 0000                        l4157 0000  
                      l3294 04A1                        l2478 02BA                        l5039 0000  
                      l4191 0194                        l3296 04A6                        l7001 0000  
                      l3297 0000                        l2499 031A                        l4188 00E4  
                      l7111 0545                        l7033 0000                        l7113 0000  
                      l7105 0000                        l7121 0000                        l7019 04CE  
                      l7043 0000                        l7051 04AE                        l7035 0000  
                      l7115 0000                        l7107 053D                        l7131 0000  
                      l7123 0000                        l7203 0276                        l7053 04C3  
                      l7045 0000                        l7037 0000                        l7061 0000  
                      l7125 0000                        l7141 0539                        l7205 0000  
                      l7039 0000                        l7071 0000                        l7063 0000  
                      l7135 0000                        l7127 0526                        l7303 02F5  
                      l7231 0000                        l7223 0000                        l7215 0285  
                      l7081 0000                        l7073 0000                        l7065 0000  
                      l7057 0000                        l7145 0000                        l7153 0000  
                      l7161 0000                        l7321 0000                        l7313 0306  
                      l7305 0000                        l7241 02AF                        l7217 0000  
                      l7233 029C                        l5722 0000                        l7075 0000  
                      l7067 0000                        l7059 0000                        l7083 0000  
                      l7091 05AF                        l7139 0000                        l7147 0000  
                      l7155 057F                        l7163 0000                        l7331 0000  
                      l7315 0000                        l7307 0000                        l7251 0000  
                      l7243 0000                        l7219 028E                        l7171 0000  
                      l7411 0000                        l7403 0508                        l5716 0000  
                      l7077 0000                        l7069 0000                        l7085 0000  
                      l7149 0000                        l7165 0460                        l7157 0000  
                      l7341 0328                        l7317 030F                        l7309 02FC  
                      l7245 0000                        l7237 02A6                        l7253 02BE  
                      l7229 0299                        l7261 0271                        l7173 0253  
                      l7421 0000                        l7501 0000                        l7079 0000  
                      l7087 0000                        l7167 0000                        l7159 0450  
                      l7351 0332                        l7343 0000                        l7327 0000  
                      l7319 0000                        l7263 02C9                        l7255 0000  
                      l7239 0000                        l7191 0000                        l7183 0000  
                      l7175 0000                        l7431 0000                        l7503 047D  
                      l7511 0000                        l5752 0000                        l7097 0000  
                      l7089 0000                        l7353 0000                        l7345 0000  
                      l7329 031D                        l7257 02C3                        l7169 0000  
                      l7433 0000                        l7417 0000                        l7441 056D  
                      l7601 0000                        l7521 0000                        l7513 0000  
                      l7505 0000                        l7099 0000                        l7371 036E  
                      l7363 0000                        l7355 0000                        l7291 0000  
                      l7275 02CD                        l7195 0000                        l7427 0000  
                      l7419 0000                        l7435 0000                        l7451 03D7  
                      l7443 0000                        l7603 0000                        l7523 0000  
                      l7515 0000                        l7507 0000                        l5749 052C  
                      l7373 0000                        l7293 02EA                        l7277 0000  
                      l7429 0000                        l7453 0000                        l7461 0000  
                      l7701 01C4                        l7621 0000                        l7605 0000  
                      l7533 002D                        l7525 0000                        l7517 0000  
                      l7509 0000                        l7375 0000                        l7367 0364  
                      l7279 0000                        l7391 0000                        l7439 0000  
                      l7471 0000                        l7463 0000                        l7711 0000  
                      l7703 01CA                        l7623 0000                        l7607 0000  
                      l7543 0000                        l7519 0000                        l7377 0000  
                      l7369 0000                        l7297 0000                        l7289 02E1  
                      l7449 0000                        l7457 0000                        l7473 0000  
                      l7721 0000                        l7713 0000                        l7705 01D0  
                      l7633 0000                        l7625 0000                        l7617 0112  
                      l7609 00FE                        l7561 0000                        l7545 0000  
                      l7537 0044                        l7529 0025                        l7379 0000  
                      l7395 058F                        l7459 05D7                        l7475 0000  
                      l7491 0000                        l7483 0000                        l7731 020F  
                      l7651 014C                        l7635 0000                        l7627 0123  
                      l7619 0000                        l7571 00A8                        l7563 0000  
                      l7555 0072                        l7539 0000                        l7397 0000  
                      l7493 0000                        l7485 0000                        l7741 0000  
                      l7717 0000                        l7709 0000                        l7725 01FA  
                      l7661 0000                        l7645 0000                        l7637 0000  
                      l7629 0000                        l7581 0000                        l7573 00AA  
                      l7557 008B                        l7565 009A                        l7495 0000  
                      l7487 0000                        l7743 0236                        l7735 0000  
                      l7719 01F0                        l7727 0208                        l7663 0000  
                      l7647 0000                        l7639 0137                        l7583 0000  
                      l7575 0000                        l7559 0000                        l7567 009F  
                      l7489 0000                        l7497 0000                        l7745 023B  
                      l7737 021A                        l7673 0000                        l7681 0184  
                      l7657 0000                        l7665 0165                        l7649 0000  
                      l7585 0000                        l7577 0000                        l6971 0000  
                      l7747 023E                        l7667 016A                        l7595 00D3  
                      l7587 00C3                        l7579 0000                        l7691 01A5  
                      l6973 0000                        l6981 0000                        l7749 024B  
                      l7693 0000                        l7677 0000                        l7685 0189  
                      l6975 0000                        l6967 0000                        l6991 0000  
                      l6983 0000                        l7687 0000                        l7679 0000  
                      l7599 00ED                        l6969 0000                        l6977 0000  
                      l6985 0000                        l6993 0000                        l6987 0000  
                      l6979 0000                        l6995 0000                        l6989 0000  
                      l6997 0000                        _EEIF 0067                        _ANS0 08F0  
                      STR_1 05CF                        _ANS1 08F1                        _ANS2 08F2  
                      _ANS3 08F3                        _ANS4 08F4                        _ANS5 08F5  
                      _ANS6 08F6                        _ANS7 08F7                        _ANS8 08F8  
                      _ANS9 08F9                        _P1OE 0090                        _T0IE 005D  
                      _T0IF 005A                        u1215 04BE                        _T0ON 00FB  
                      _IOCB 0116                        u2245 01C1                        u2407 043A  
                      u2417 0446                        u2337 019F                        u2427 0598  
                      u2347 01B0                        u1724 033B                        u1820 0434  
                      u2437 0464                        u1725 0339                        u2357 0231  
                      u2367 0238                        _PIE1 008C                        u2377 0244  
                      u1834 0436                        u2387 03F8                        u2397 042B  
                      _PEIE 005E                        _PR2H 0092                        _PR2L 0091  
                      _PIR1 000C                        _TMR0 0001                        _STRA 0CE8  
                      _STRB 0CE9                        _STRC 0CEA                        _STRD 0CEB  
                      _WREN 0C62                        _WPUA 0095                        _WPUB 0115  
                      _WPUC 0093                        _beep 03D5                        _main 000B  
                      btemp 007E                        start 000A           ___bmul@multiplier 0074  
                     ??_ISR 0070             __end_of_SendNum 0426                       _C1CH0 08C8  
                     _C1CH1 08C9                       _C2CH0 08D0                       _C2CH1 08D1  
                     ?_beep 0078                       _C1SEN 0CF5                       _C2REN 0CF4  
                     _C1POL 08CC                       _C2POL 08D4                       _C1OUT 08CE  
                     _C2OUT 08D6                       ?_main 0070             __end_of___lbdiv 053B  
                     _EEADR 009B                       _EEDAT 009A                       _ANS10 08FA  
                     _ANS11 08FB                       _P1CON 0016                       _EEPGD 0C67  
                     _ANSEL 011E                       _P1POL 0099                       _IOCB4 08B4  
                     _IOCB5 08B5                       _IOCB6 08B6                       _IOCB7 08B7  
                     _T1GSS 08D9                       _VP6EN 08C4                       _TMR2H 0013  
                     _TMR2L 0011                       _PORTA 0005                       _PORTC 0007  
                     _SRCON 019E                       _PULSR 0CF2                       _PULSS 0CF3  
                     _TRISA 0085                       _TRISC 0087                       _VRCON 0118  
                     _WPUB4 08AC                       _WPUB5 08AD                       _WPUB6 08AE  
                     _WPUB7 08AF    __size_of_eepromReadBlock 0011                       beep@t 003E  
                     _keyID 0062            ??_swUartSendByte 0072                       main@t 0055  
                     pclath 000A                       status 0003                       wtemp0 007E  
           ___lbdiv@divisor 0072             ___lbdiv@counter 0074        __size_of_delay_x10ms 0010  
          ??_eepromReadByte 0072                  SendNum@nib 007A                  SendNum@num 0079  
          _eepromWriteBlock 056B                __end_of_beep 0400                __end_of_main 0250  
  __end_of_swUartSendString 05E3                      ??_beep 0079                      ??_main 0052  
          eepromReadBlock@i 0078                      _C1VREN 08C7                      _C2VREN 08C6  
                    _C2SYNC 08D8                      _EEADRH 010F                      _EEDATH 010E  
                    _EECON1 009C                      _P1ADTH 0014    __size_of_eepromWriteByte 0021  
                    _P1ADTL 000E                      _ANSELH 011F                      _MC1OUT 08DF  
                    _MC2OUT 08DE                      _T2CON0 0012                      _T2CON1 009E  
                    i1l4137 0000                      _INTCON 000B                      _OSCCON 008F  
                    _TMR2IE 0461                      _TMR2IF 0061                      _OPTION 0081  
                    _TMR2ON 0092                ?_SET_EPWM_ON 0070            __end_of_get_RFID 0388  
          __end_of_id_clear 048A                   ??_SendNum 0075          get_RFID@timeOutVal 004F  
                    ___bmul 05AD                      ___wmul 053B                   ??___lbdiv 0073  
                    _comArr 04C8            __end_of_int_init 05EF                      main@t1 0057  
          __end_of_setState 05F9                      saved_w 007E            __end_of_timerOut 04C8  
       eepromReadBlock@buff 0074            ___lbdiv@dividend 0073            __end_of_sys_init 0610  
         ??_eepromReadBlock 0076         ___bmul@multiplicand 0072              __pcstackCOMMON 0070  
              __pidataBANK0 04E7            ___lbdiv@quotient 0075          __size_of_id_search 001B  
                __pbssBANK0 005C          __size_of_gpio_init 000E           ??_eepromWriteByte 0073  
                __pmaintext 000B                     ?___bmul 0072                     ?___wmul 0072  
                   ?_comArr 0072                  __pintentry 0004                     _CM1CON0 0119  
                   _CM2CON0 011A                     _CM2CON1 011B                  _id_replate 039A  
                 ?_get_RFID 0070                   ?_id_clear 0042    __end_of_eepromWriteBlock 057D  
                   _PSTRCON 019D                     _STRSYNC 0CEC                   ?_int_init 0070  
  get_RFID@RF_serial_55bits 003E                     _PwInNum 0060           __end_of_id_search 0520  
               setState@stt 0074                     _SendNum 0400        __size_of_SET_EPWM_ON 001F  
                 ?_setState 0072                   ?_timerOut 0072             __size_of___bmul 000E  
                   ___lbdiv 0520             __size_of___wmul 0019             __size_of_comArr 001F  
                   _buffTag 0025                     beep@rep 0078           __end_of_gpio_init 05C9  
                 ?_sys_init 0070           ?_swUartSendString 0070                __size_of_ISR 0007  
                   _mtState 0061          ??_swUartSendString 0075                     comArr@i 0079  
                ??_get_RFID 0077                  ??_id_clear 007C                     _timeOut 005C  
                comArr@arr1 0078                  comArr@arr2 0072                  comArr@len1 0073  
                comArr@len2 0074                     main@tmp 005B        end_of_initialization 0569  
             ??_delay_x10ms 0072                     init_ram 05A2                  get_RFID@ii 0051  
                ??_int_init 0072                  ??_setState 0074         eepromWriteBlock@len 0077  
                ??_timerOut 0074       get_RFID@flag_RFID_syn 0049                  id_search@i 003F  
                _timer_init 061F                 ?_id_replate 003E                  ??_sys_init 0072  
           _eepromReadBlock 057D                  main@buzFre 0058     __size_of_swUartSendByte 0024  
       __end_of_delay_x10ms 059E              __end_of___bmul 05BB              __end_of___wmul 0554  
            __end_of_comArr 04E7     __size_of_eepromReadByte 0008        eepromReadByte@EEAddr 0072  
       start_initialization 0554                 __end_of_ISR 061F             _eepromWriteByte 044A  
             setState@_tOut 0072  eepromReadByte@ReEepromData 0073         __size_of_id_replate 0034  
                  ??___bmul 0073                    ??___wmul 0076                    ??_comArr 0075  
               __pdataBANK0 0020               id_clear@F1108 0020     __end_of_eepromReadBlock 058E  
               ?_timer_init 0070          eepromReadBlock@len 0075               __pcstackBANK0 003E  
             id_clear@idMax 0042               id_clear@idMin 0048           ?_eepromWriteBlock 0076  
         __size_of_get_RFID 0138           __size_of_id_clear 001F          ??_eepromWriteBlock 0078  
               _delay_x10ms 058E                    ?_SendNum 0070           __size_of_int_init 000C  
                  ?___lbdiv 0072           __size_of_setState 000A                   __ptext560 046B  
                 __ptext561 039A                   __ptext570 044A                   __ptext562 0400  
                 __ptext571 057D                   __ptext563 05D6                   __ptext580 0610  
                 __ptext572 0608                   __ptext564 03D5                   __ptext581 05E3  
                 __ptext573 0520                   __ptext565 056B                   __ptext582 061F  
                 __ptext574 053B                   __ptext566 0426                   __ptext583 05BB  
                 __ptext575 05AD                   __ptext567 0505                   __ptext584 0618  
                 __ptext576 05EF                   __ptext568 058E                   __ptext585 0000  
                 __ptext577 048A                   __ptext569 0250                   __ptext578 04A9  
                 __ptext579 04C8                   _id_search 0505                   beep@delay 0040  
              _SendNum$5067 0075                _SendNum$5068 0077           __size_of_timerOut 001F  
                 __pstrings 05C9                   __pswtext1 0600     __end_of_eepromWriteByte 046B  
         __size_of_sys_init 0008                   _gpio_init 05BB   __size_of_swUartSendString 000D  
         interrupt_function 0004               ??_SET_EPWM_ON 0072              ___wmul@product 0076  
       __size_of_timer_init 0003                   get_RFID@i 004D                   get_RFID@j 004C  
            _swUartSendByte 0426                  ?_id_search 007A                delay_x10ms@t 0074  
          timerOut@CurTimer 0075              _eepromReadByte 0610            ?_eepromReadBlock 0074  
              ??_id_replate 0040                 __stringbase 05CE           ___wmul@multiplier 0072  
                ?_gpio_init 0070      __end_of_swUartSendByte 044A          __end_of_id_replate 03CE  
          __size_of_SendNum 0026                   init_fetch 059E         __end_of_SET_EPWM_ON 04A9  
            id_replate@Cont 003E      __end_of_eepromReadByte 0618            __size_of___lbdiv 001B  
            id_replate@buff 003F           id_search@id_input 003E            ?_eepromWriteByte 0072  
   eepromReadBlock@addStart 0077                    _get_RFID 0250                    _id_clear 046B  
             __size_of_beep 002B             ?_swUartSendByte 0070               __size_of_main 0245  
                  _int_init 05E3               id_search@buff 007A                    _setState 05EF  
         eepromWriteBlock@i 007A                    _timeTick 005E                    _timerOut 04A9  
               ??_id_search 007B             ?_eepromReadByte 0070                    main@idop 005A  
              ??_timer_init 0072                    _sys_init 0608    eepromWriteBlock@addStart 0079  
               ??_gpio_init 0072                 id_clear@tmp 0043                    intlevel1 0000  
          _swUartSendString 05D6                ?_delay_x10ms 0070                 _SET_EPWM_ON 048A  
        __end_of_timer_init 0622                   stringcode 05C9        eepromWriteBlock@buff 0076  
 __size_of_eepromWriteBlock 0012       eepromWriteByte@EEAddr 0075       eepromWriteByte@EEData 0072  
    get_RFID@flag_RFID_last 004E           swUartSendByte@dat 0073                id_replate@id 007B  
       swUartSendString@str 0075                    stringdir 05C9                    stringtab 05C9  
             timerOut@Logic 0074             swUartSendByte@i 0074                timerOut@time 0072  
