

HI-TECH Software PIC PRO Macro Assembler V9.83 build 10920 
                                                                                               Fri May 15 18:47:15 2020

HI-TECH Software Omniscient Code Generator (PRO mode) build 10920
     1                           	processor	16F685
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	inittext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,delta=2
    13                           	psect	swtext1,local,class=CONST,delta=2
    14                           	psect	text560,local,class=CODE,delta=2
    15                           	psect	text561,local,class=CODE,delta=2
    16                           	psect	text562,local,class=CODE,delta=2
    17                           	psect	text563,local,class=CODE,delta=2
    18                           	psect	text564,local,class=CODE,delta=2
    19                           	psect	text565,local,class=CODE,delta=2
    20                           	psect	text566,local,class=CODE,delta=2
    21                           	psect	text567,local,class=CODE,delta=2
    22                           	psect	text568,local,class=CODE,delta=2
    23                           	psect	text569,local,class=CODE,delta=2
    24                           	psect	text570,local,class=CODE,delta=2
    25                           	psect	text571,local,class=CODE,delta=2
    26                           	psect	text572,local,class=CODE,delta=2
    27                           	psect	text573,local,class=CODE,delta=2
    28                           	psect	text574,local,class=CODE,delta=2
    29                           	psect	text575,local,class=CODE,delta=2
    30                           	psect	text576,local,class=CODE,delta=2
    31                           	psect	text577,local,class=CODE,delta=2
    32                           	psect	text578,local,class=CODE,delta=2
    33                           	psect	text579,local,class=CODE,delta=2
    34                           	psect	text580,local,class=CODE,delta=2
    35                           	psect	text581,local,class=CODE,delta=2
    36                           	psect	text582,local,class=CODE,delta=2
    37                           	psect	text583,local,class=CODE,delta=2
    38                           	psect	text584,local,class=CODE,delta=2
    39                           	psect	intentry,global,class=CODE,delta=2
    40                           	psect	text585,local,class=CODE,delta=2
    41                           	psect	pa_nodes,global,class=CODE,delta=2
    42                           	dabs	1,0x11E,1
    43                           	dabs	1,0x11F,1
    44                           	dabs	1,0x119,1
    45                           	dabs	1,0x11A,1
    46                           	dabs	1,0x11B,1
    47                           	dabs	1,0x10F,1
    48                           	dabs	1,0x10E,1
    49                           	dabs	1,0x116,1
    50                           	dabs	1,0x19D,1
    51                           	dabs	1,0x19E,1
    52                           	dabs	1,0x118,1
    53                           	dabs	1,0x115,1
    54                           	dabs	1,0x11E,1
    55                           	dabs	1,0x11E,1
    56                           	dabs	1,0x11F,1
    57                           	dabs	1,0x11F,1
    58                           	dabs	1,0x11E,1
    59                           	dabs	1,0x11E,1
    60                           	dabs	1,0x11E,1
    61                           	dabs	1,0x11E,1
    62                           	dabs	1,0x11E,1
    63                           	dabs	1,0x11E,1
    64                           	dabs	1,0x11F,1
    65                           	dabs	1,0x11F,1
    66                           	dabs	1,0x119,1
    67                           	dabs	1,0x119,1
    68                           	dabs	1,0x119,1
    69                           	dabs	1,0x119,1
    70                           	dabs	1,0x119,1
    71                           	dabs	1,0x119,1
    72                           	dabs	1,0x119,1
    73                           	dabs	1,0x19E,1
    74                           	dabs	1,0x118,1
    75                           	dabs	1,0x11A,1
    76                           	dabs	1,0x11A,1
    77                           	dabs	1,0x11A,1
    78                           	dabs	1,0x11A,1
    79                           	dabs	1,0x11A,1
    80                           	dabs	1,0x11A,1
    81                           	dabs	1,0x11A,1
    82                           	dabs	1,0x19E,1
    83                           	dabs	1,0x11B,1
    84                           	dabs	1,0x118,1
    85                           	dabs	1,0x18C,1
    86                           	dabs	1,0x116,1
    87                           	dabs	1,0x116,1
    88                           	dabs	1,0x116,1
    89                           	dabs	1,0x116,1
    90                           	dabs	1,0x11B,1
    91                           	dabs	1,0x11B,1
    92                           	dabs	1,0x19E,1
    93                           	dabs	1,0x19E,1
    94                           	dabs	1,0x19E,1
    95                           	dabs	1,0x19E,1
    96                           	dabs	1,0x19D,1
    97                           	dabs	1,0x19D,1
    98                           	dabs	1,0x19D,1
    99                           	dabs	1,0x19D,1
   100                           	dabs	1,0x19D,1
   101                           	dabs	1,0x11B,1
   102                           	dabs	1,0x118,1
   103                           	dabs	1,0x118,1
   104                           	dabs	1,0x118,1
   105                           	dabs	1,0x118,1
   106                           	dabs	1,0x118,1
   107                           	dabs	1,0x118,1
   108                           	dabs	1,0x115,1
   109                           	dabs	1,0x115,1
   110                           	dabs	1,0x115,1
   111                           	dabs	1,0x115,1
   112                           	dabs	1,0x18C,1
   113                           	dabs	1,0x7E,2
   114  000A                     
   115                           	psect	idataBANK0
   116  04E7                     __pidataBANK0:	
   117                           
   118                           ;initializer for id_clear@F1108
   119  04E7  34FF               	retlw	255
   120  04E8  34FF               	retlw	255
   121  04E9  34FF               	retlw	255
   122  04EA  34FF               	retlw	255
   123  04EB  34FF               	retlw	255
   124                           
   125                           ;initializer for _buffTag
   126  04EC  3400               	retlw	0
   127  04ED  3400               	retlw	0
   128  04EE  3411               	retlw	17
   129  04EF  340B               	retlw	11
   130  04F0  344F               	retlw	79
   131  04F1  3400               	retlw	0
   132  04F2  3400               	retlw	0
   133  04F3  3481               	retlw	129
   134  04F4  342F               	retlw	47
   135  04F5  3422               	retlw	34
   136  04F6  3400               	retlw	0
   137  04F7  3400               	retlw	0
   138  04F8  347D               	retlw	125
   139  04F9  3467               	retlw	103
   140  04FA  3405               	retlw	5
   141  04FB  3400               	retlw	0
   142  04FC  3400               	retlw	0
   143  04FD  347E               	retlw	126
   144  04FE  3431               	retlw	49
   145  04FF  34E7               	retlw	231
   146  0500  3400               	retlw	0
   147  0501  3400               	retlw	0
   148  0502  347E               	retlw	126
   149  0503  3451               	retlw	81
   150  0504  34E6               	retlw	230
   151  011E                     _ANSEL	set	286	;_ANSEL
   152  011F                     _ANSELH	set	287	;_ANSELH
   153  0119                     _CM1CON0	set	281	;_CM1CON0
   154  011A                     _CM2CON0	set	282	;_CM2CON0
   155  011B                     _CM2CON1	set	283	;_CM2CON1
   156  010F                     _EEADRH	set	271	;_EEADRH
   157  010E                     _EEDATH	set	270	;_EEDATH
   158  0116                     _IOCB	set	278	;_IOCB
   159  019D                     _PSTRCON	set	413	;_PSTRCON
   160  019E                     _SRCON	set	414	;_SRCON
   161  0118                     _VRCON	set	280	;_VRCON
   162  0115                     _WPUB	set	277	;_WPUB
   163  08F0                     _ANS0	set	2288	;_ANS0
   164  08F1                     _ANS1	set	2289	;_ANS1
   165  08FA                     _ANS10	set	2298	;_ANS10
   166  08FB                     _ANS11	set	2299	;_ANS11
   167  08F2                     _ANS2	set	2290	;_ANS2
   168  08F3                     _ANS3	set	2291	;_ANS3
   169  08F4                     _ANS4	set	2292	;_ANS4
   170  08F5                     _ANS5	set	2293	;_ANS5
   171  08F6                     _ANS6	set	2294	;_ANS6
   172  08F7                     _ANS7	set	2295	;_ANS7
   173  08F8                     _ANS8	set	2296	;_ANS8
   174  08F9                     _ANS9	set	2297	;_ANS9
   175  08C8                     _C1CH0	set	2248	;_C1CH0
   176  08C9                     _C1CH1	set	2249	;_C1CH1
   177  08CD                     _C1OE	set	2253	;_C1OE
   178  08CF                     _C1ON	set	2255	;_C1ON
   179  08CE                     _C1OUT	set	2254	;_C1OUT
   180  08CC                     _C1POL	set	2252	;_C1POL
   181  08CA                     _C1R	set	2250	;_C1R
   182  0CF5                     _C1SEN	set	3317	;_C1SEN
   183  08C7                     _C1VREN	set	2247	;_C1VREN
   184  08D0                     _C2CH0	set	2256	;_C2CH0
   185  08D1                     _C2CH1	set	2257	;_C2CH1
   186  08D5                     _C2OE	set	2261	;_C2OE
   187  08D7                     _C2ON	set	2263	;_C2ON
   188  08D6                     _C2OUT	set	2262	;_C2OUT
   189  08D4                     _C2POL	set	2260	;_C2POL
   190  08D2                     _C2R	set	2258	;_C2R
   191  0CF4                     _C2REN	set	3316	;_C2REN
   192  08D8                     _C2SYNC	set	2264	;_C2SYNC
   193  08C6                     _C2VREN	set	2246	;_C2VREN
   194  0C67                     _EEPGD	set	3175	;_EEPGD
   195  08B4                     _IOCB4	set	2228	;_IOCB4
   196  08B5                     _IOCB5	set	2229	;_IOCB5
   197  08B6                     _IOCB6	set	2230	;_IOCB6
   198  08B7                     _IOCB7	set	2231	;_IOCB7
   199  08DF                     _MC1OUT	set	2271	;_MC1OUT
   200  08DE                     _MC2OUT	set	2270	;_MC2OUT
   201  0CF2                     _PULSR	set	3314	;_PULSR
   202  0CF3                     _PULSS	set	3315	;_PULSS
   203  0CF6                     _SR0	set	3318	;_SR0
   204  0CF7                     _SR1	set	3319	;_SR1
   205  0CE8                     _STRA	set	3304	;_STRA
   206  0CE9                     _STRB	set	3305	;_STRB
   207  0CEA                     _STRC	set	3306	;_STRC
   208  0CEB                     _STRD	set	3307	;_STRD
   209  0CEC                     _STRSYNC	set	3308	;_STRSYNC
   210  08D9                     _T1GSS	set	2265	;_T1GSS
   211  08C4                     _VP6EN	set	2244	;_VP6EN
   212  08C0                     _VR0	set	2240	;_VR0
   213  08C1                     _VR1	set	2241	;_VR1
   214  08C2                     _VR2	set	2242	;_VR2
   215  08C3                     _VR3	set	2243	;_VR3
   216  08C5                     _VRR	set	2245	;_VRR
   217  08AC                     _WPUB4	set	2220	;_WPUB4
   218  08AD                     _WPUB5	set	2221	;_WPUB5
   219  08AE                     _WPUB6	set	2222	;_WPUB6
   220  08AF                     _WPUB7	set	2223	;_WPUB7
   221  0C62                     _WREN	set	3170	;_WREN
   222  000B                     _INTCON	set	11
   223  0014                     _P1ADTH	set	20
   224  000E                     _P1ADTL	set	14
   225  0016                     _P1CON	set	22
   226  000C                     _PIR1	set	12
   227  0005                     _PORTA	set	5
   228  0007                     _PORTC	set	7
   229  0012                     _T2CON0	set	18
   230  0013                     _TMR2H	set	19
   231  0011                     _TMR2L	set	17
   232  0067                     _EEIF	set	103
   233  005F                     _GIE	set	95
   234  005E                     _PEIE	set	94
   235  002B                     _RA3	set	43
   236  002D                     _RA5	set	45
   237  002E                     _RA6	set	46
   238  0039                     _RC1	set	57
   239  005D                     _T0IE	set	93
   240  005A                     _T0IF	set	90
   241  00FB                     _T0ON	set	251
   242  0061                     _TMR2IF	set	97
   243  0092                     _TMR2ON	set	146
   244  009B                     _EEADR	set	155
   245  009C                     _EECON1	set	156
   246  009A                     _EEDAT	set	154
   247  0081                     _OPTION	set	129
   248  008F                     _OSCCON	set	143
   249  0090                     _P1OE	set	144
   250  0099                     _P1POL	set	153
   251  008C                     _PIE1	set	140
   252  0092                     _PR2H	set	146
   253  0091                     _PR2L	set	145
   254  009E                     _T2CON1	set	158
   255  0085                     _TRISA	set	133
   256  0087                     _TRISC	set	135
   257  0095                     _WPUA	set	149
   258  0093                     _WPUC	set	147
   259  047A                     _HTS	set	1146
   260  04E0                     _RD	set	1248
   261  0461                     _TMR2IE	set	1121
   262  04E8                     _WR	set	1256
   263  0001                     _TMR0	set	1
   264                           
   265                           	psect	strings
   266  05C9                     __pstrings:	
   267  05C9                     stringtab:	
   268                           ;	global	stringdir,stringtab,__stringbase
   269                           
   270  05C9                     stringcode:	
   271                           ;	String table - string pointers are 1 byte each
   272                           
   273  05C9                     stringdir:	
   274  05C9  3005               	movlw	high stringdir
   275  05CA  008A               	movwf	10
   276  05CB  0804               	movf	4,w
   277  05CC  0A84               	incf	4,f
   278  05CD  0782               	addwf	2,f
   279  05CE                     __stringbase:	
   280  05CE  3400               	retlw	0
   281  05CF                     STR_1:	
   282  05CF  340A               	retlw	10
   283  05D0  3454               	retlw	84	;'T'
   284  05D1  3461               	retlw	97	;'a'
   285  05D2  3467               	retlw	103	;'g'
   286  05D3  343A               	retlw	58	;':'
   287  05D4  3420               	retlw	32	;' '
   288  05D5  3400               	retlw	0
   289                           
   290                           	psect	cinit
   291  0554                     start_initialization:	
   292  0554  303E               	movlw	low (__pdataBANK0+30)
   293                           
   294                           ; Clear objects allocated to BANK0
   295  0555  01DC               	clrf	__pbssBANK0& (0+127)
   296  0556  01DD               	clrf	(__pbssBANK0+1)& (0+127)
   297  0557  01DE               	clrf	(__pbssBANK0+2)& (0+127)
   298  0558  01DF               	clrf	(__pbssBANK0+3)& (0+127)
   299  0559  01E0               	clrf	(__pbssBANK0+4)& (0+127)
   300  055A  01E1               	clrf	(__pbssBANK0+5)& (0+127)
   301  055B  01E2               	clrf	(__pbssBANK0+6)& (0+127)
   302  055C  01E3               	clrf	(__pbssBANK0+7)& (0+127)
   303  055D  01E4               	clrf	(__pbssBANK0+8)& (0+127)
   304  055E  01E5               	clrf	(__pbssBANK0+9)& (0+127)
   305  055F  01E6               	clrf	(__pbssBANK0+10)& (0+127)
   306                           
   307                           ; Initialize objects allocated to BANK0
   308  0560  1383               	bcf	3,7	;select IRP bank0
   309  0561  00FD               	movwf	125
   310  0562  3004               	movlw	high __pidataBANK0
   311  0563  00FE               	movwf	126
   312  0564  30E7               	movlw	low __pidataBANK0
   313  0565  00FF               	movwf	127
   314  0566  3020               	movlw	low __pdataBANK0
   315  0567  0084               	movwf	4
   316  0568  25A2               	fcall	init_ram
   317  0569                     end_of_initialization:	
   318                           ;End of C runtime variable initialization code
   319                           
   320  0569  0183               	clrf	3
   321  056A  280B               	ljmp	_main	;jump to C main() function
   322                           
   323                           	psect	bssBANK0
   324  005C                     __pbssBANK0:	
   325  005C                     _timeOut:	
   326  005C                     	ds	2
   327  005E                     _timeTick:	
   328  005E                     	ds	2
   329  0060                     _PwInNum:	
   330  0060                     	ds	1
   331  0061                     _mtState:	
   332  0061                     	ds	1
   333  0062                     _keyID:	
   334  0062                     	ds	5
   335                           
   336                           	psect	dataBANK0
   337  0020                     __pdataBANK0:	
   338  0020                     id_clear@F1108:	
   339  0020                     	ds	5
   340  0025                     _buffTag:	
   341  0025                     	ds	25
   342                           
   343                           	psect	inittext
   344  059E                     init_fetch:	
   345                           ;	Called with low address in FSR and high address in W
   346                           
   347  059E  087E               	movf	126,w
   348  059F  008A               	movwf	10
   349  05A0  087F               	movf	127,w
   350  05A1  0082               	movwf	2
   351  05A2                     init_ram:	
   352                           ;Called with:
   353                           ;	high address of idata address in btemp 
   354                           ;	low address of idata address in btemp+1 
   355                           ;	low address of data in FSR
   356                           ;	high address + 1 of data in btemp-1
   357                           
   358  05A2  259E               	fcall	init_fetch
   359  05A3  0080               	movwf	0
   360  05A4  0A84               	incf	4,f
   361  05A5  0804               	movf	4,w
   362  05A6  067D               	xorwf	125,w
   363  05A7  1903               	btfsc	3,2
   364  05A8  3400               	retlw	0
   365  05A9  0AFF               	incf	127,f
   366  05AA  1903               	btfsc	3,2
   367  05AB  0AFE               	incf	126,f
   368  05AC  2DA2               	goto	init_ram
   369                           
   370                           	psect	cstackCOMMON
   371  0070                     __pcstackCOMMON:	
   372  0070                     ?_swUartSendString:	
   373  0070                     ?_SendNum:	
   374                           ; 0 bytes @ 0x0
   375                           
   376  0070                     ?_sys_init:	
   377                           ; 0 bytes @ 0x0
   378                           
   379  0070                     ?_gpio_init:	
   380                           ; 0 bytes @ 0x0
   381                           
   382  0070                     ?_timer_init:	
   383                           ; 0 bytes @ 0x0
   384                           
   385  0070                     ?_int_init:	
   386                           ; 0 bytes @ 0x0
   387                           
   388  0070                     ?_SET_EPWM_ON:	
   389                           ; 0 bytes @ 0x0
   390                           
   391  0070                     ?_delay_x10ms:	
   392                           ; 0 bytes @ 0x0
   393                           
   394  0070                     ?_ISR:	
   395                           ; 0 bytes @ 0x0
   396                           
   397  0070                     ??_ISR:	
   398                           ; 0 bytes @ 0x0
   399                           
   400  0070                     ?_main:	
   401                           ; 0 bytes @ 0x0
   402                           
   403  0070                     ?_swUartSendByte:	
   404                           ; 0 bytes @ 0x0
   405                           
   406  0070                     ?_eepromReadByte:	
   407                           ; 0 bytes @ 0x0
   408                           
   409  0070                     ?_get_RFID:	
   410                           ; 1 bytes @ 0x0
   411                           
   412                           
   413                           ; 1 bytes @ 0x0
   414  0070                     	ds	2
   415  0072                     ??_sys_init:	
   416  0072                     ??_gpio_init:	
   417                           ; 0 bytes @ 0x2
   418                           
   419  0072                     ??_timer_init:	
   420                           ; 0 bytes @ 0x2
   421                           
   422  0072                     ??_int_init:	
   423                           ; 0 bytes @ 0x2
   424                           
   425  0072                     ??_eepromReadByte:	
   426                           ; 0 bytes @ 0x2
   427                           
   428  0072                     ?_eepromWriteByte:	
   429                           ; 0 bytes @ 0x2
   430                           
   431  0072                     ??_SET_EPWM_ON:	
   432                           ; 0 bytes @ 0x2
   433                           
   434  0072                     ??_delay_x10ms:	
   435                           ; 0 bytes @ 0x2
   436                           
   437  0072                     ?_setState:	
   438                           ; 0 bytes @ 0x2
   439                           
   440  0072                     ??_swUartSendByte:	
   441                           ; 0 bytes @ 0x2
   442                           
   443  0072                     ?_comArr:	
   444                           ; 0 bytes @ 0x2
   445                           
   446  0072                     ?___bmul:	
   447                           ; 1 bytes @ 0x2
   448                           
   449  0072                     ?___lbdiv:	
   450                           ; 1 bytes @ 0x2
   451                           
   452  0072                     ?_timerOut:	
   453                           ; 1 bytes @ 0x2
   454                           
   455  0072                     ?___wmul:	
   456                           ; 2 bytes @ 0x2
   457                           
   458  0072                     eepromReadByte@EEAddr:	
   459                           ; 2 bytes @ 0x2
   460                           
   461  0072                     eepromWriteByte@EEData:	
   462                           ; 1 bytes @ 0x2
   463                           
   464  0072                     comArr@arr2:	
   465                           ; 1 bytes @ 0x2
   466                           
   467  0072                     ___bmul@multiplicand:	
   468                           ; 1 bytes @ 0x2
   469                           
   470  0072                     ___lbdiv@divisor:	
   471                           ; 1 bytes @ 0x2
   472                           
   473  0072                     timerOut@time:	
   474                           ; 1 bytes @ 0x2
   475                           
   476  0072                     setState@_tOut:	
   477                           ; 2 bytes @ 0x2
   478                           
   479  0072                     ___wmul@multiplier:	
   480                           ; 2 bytes @ 0x2
   481                           
   482                           
   483                           ; 2 bytes @ 0x2
   484  0072                     	ds	1
   485  0073                     ??_eepromWriteByte:	
   486  0073                     ??___bmul:	
   487                           ; 0 bytes @ 0x3
   488                           
   489  0073                     ??___lbdiv:	
   490                           ; 0 bytes @ 0x3
   491                           
   492  0073                     eepromReadByte@ReEepromData:	
   493                           ; 0 bytes @ 0x3
   494                           
   495  0073                     comArr@len1:	
   496                           ; 1 bytes @ 0x3
   497                           
   498  0073                     swUartSendByte@dat:	
   499                           ; 1 bytes @ 0x3
   500                           
   501  0073                     ___bmul@product:	
   502                           ; 1 bytes @ 0x3
   503                           
   504  0073                     ___lbdiv@dividend:	
   505                           ; 1 bytes @ 0x3
   506                           
   507                           
   508                           ; 1 bytes @ 0x3
   509  0073                     	ds	1
   510  0074                     ?_eepromReadBlock:	
   511  0074                     ??_timerOut:	
   512                           ; 0 bytes @ 0x4
   513                           
   514  0074                     ??_setState:	
   515                           ; 0 bytes @ 0x4
   516                           
   517  0074                     eepromReadBlock@buff:	
   518                           ; 0 bytes @ 0x4
   519                           
   520  0074                     comArr@len2:	
   521                           ; 1 bytes @ 0x4
   522                           
   523  0074                     timerOut@Logic:	
   524                           ; 1 bytes @ 0x4
   525                           
   526  0074                     delay_x10ms@t:	
   527                           ; 1 bytes @ 0x4
   528                           
   529  0074                     setState@stt:	
   530                           ; 1 bytes @ 0x4
   531                           
   532  0074                     swUartSendByte@i:	
   533                           ; 1 bytes @ 0x4
   534                           
   535  0074                     ___bmul@multiplier:	
   536                           ; 1 bytes @ 0x4
   537                           
   538  0074                     ___lbdiv@counter:	
   539                           ; 1 bytes @ 0x4
   540                           
   541  0074                     ___wmul@multiplicand:	
   542                           ; 1 bytes @ 0x4
   543                           
   544                           
   545                           ; 2 bytes @ 0x4
   546  0074                     	ds	1
   547  0075                     ??_swUartSendString:	
   548  0075                     ??_SendNum:	
   549                           ; 0 bytes @ 0x5
   550                           
   551  0075                     ??_comArr:	
   552                           ; 0 bytes @ 0x5
   553                           
   554  0075                     eepromReadBlock@len:	
   555                           ; 0 bytes @ 0x5
   556                           
   557  0075                     eepromWriteByte@EEAddr:	
   558                           ; 1 bytes @ 0x5
   559                           
   560  0075                     swUartSendString@str:	
   561                           ; 1 bytes @ 0x5
   562                           
   563  0075                     ___lbdiv@quotient:	
   564                           ; 1 bytes @ 0x5
   565                           
   566  0075                     timerOut@CurTimer:	
   567                           ; 1 bytes @ 0x5
   568                           
   569  0075                     _SendNum$5067:	
   570                           ; 2 bytes @ 0x5
   571                           
   572                           
   573                           ; 2 bytes @ 0x5
   574  0075                     	ds	1
   575  0076                     ??_eepromReadBlock:	
   576  0076                     ?_eepromWriteBlock:	
   577                           ; 0 bytes @ 0x6
   578                           
   579  0076                     ??___wmul:	
   580                           ; 0 bytes @ 0x6
   581                           
   582  0076                     eepromWriteBlock@buff:	
   583                           ; 0 bytes @ 0x6
   584                           
   585  0076                     ___wmul@product:	
   586                           ; 1 bytes @ 0x6
   587                           
   588                           
   589                           ; 2 bytes @ 0x6
   590  0076                     	ds	1
   591  0077                     ??_get_RFID:	
   592  0077                     eepromReadBlock@addStart:	
   593                           ; 0 bytes @ 0x7
   594                           
   595  0077                     eepromWriteBlock@len:	
   596                           ; 1 bytes @ 0x7
   597                           
   598  0077                     _SendNum$5068:	
   599                           ; 1 bytes @ 0x7
   600                           
   601                           
   602                           ; 2 bytes @ 0x7
   603  0077                     	ds	1
   604  0078                     ??_eepromWriteBlock:	
   605  0078                     ?_beep:	
   606                           ; 0 bytes @ 0x8
   607                           
   608  0078                     eepromReadBlock@i:	
   609                           ; 0 bytes @ 0x8
   610                           
   611  0078                     comArr@arr1:	
   612                           ; 1 bytes @ 0x8
   613                           
   614  0078                     beep@rep:	
   615                           ; 1 bytes @ 0x8
   616                           
   617                           
   618                           ; 1 bytes @ 0x8
   619  0078                     	ds	1
   620  0079                     ??_beep:	
   621  0079                     eepromWriteBlock@addStart:	
   622                           ; 0 bytes @ 0x9
   623                           
   624  0079                     comArr@i:	
   625                           ; 1 bytes @ 0x9
   626                           
   627  0079                     SendNum@num:	
   628                           ; 1 bytes @ 0x9
   629                           
   630                           
   631                           ; 1 bytes @ 0x9
   632  0079                     	ds	1
   633  007A                     ?_id_search:	
   634  007A                     eepromWriteBlock@i:	
   635                           ; 1 bytes @ 0xA
   636                           
   637  007A                     id_search@buff:	
   638                           ; 1 bytes @ 0xA
   639                           
   640  007A                     SendNum@nib:	
   641                           ; 1 bytes @ 0xA
   642                           
   643                           
   644                           ; 1 bytes @ 0xA
   645  007A                     	ds	1
   646  007B                     ??_id_search:	
   647  007B                     id_replate@id:	
   648                           ; 0 bytes @ 0xB
   649                           
   650                           
   651                           ; 1 bytes @ 0xB
   652  007B                     	ds	1
   653  007C                     ??_id_clear:	
   654                           
   655                           	psect	cstackBANK0
   656  003E                     __pcstackBANK0:	
   657                           ; 0 bytes @ 0xC
   658                           
   659  003E                     ?_id_replate:	
   660  003E                     id_search@id_input:	
   661                           ; 0 bytes @ 0x0
   662                           
   663  003E                     id_replate@Cont:	
   664                           ; 1 bytes @ 0x0
   665                           
   666  003E                     beep@t:	
   667                           ; 1 bytes @ 0x0
   668                           
   669  003E                     get_RFID@RF_serial_55bits:	
   670                           ; 2 bytes @ 0x0
   671                           
   672                           
   673                           ; 11 bytes @ 0x0
   674  003E                     	ds	1
   675  003F                     id_search@i:	
   676  003F                     id_replate@buff:	
   677                           ; 1 bytes @ 0x1
   678                           
   679                           
   680                           ; 1 bytes @ 0x1
   681  003F                     	ds	1
   682  0040                     ??_id_replate:	
   683  0040                     beep@delay:	
   684                           ; 0 bytes @ 0x2
   685                           
   686                           
   687                           ; 1 bytes @ 0x2
   688  0040                     	ds	2
   689  0042                     ?_id_clear:	
   690  0042                     id_clear@idMax:	
   691                           ; 0 bytes @ 0x4
   692                           
   693                           
   694                           ; 1 bytes @ 0x4
   695  0042                     	ds	1
   696  0043                     id_clear@tmp:	
   697                           
   698                           ; 5 bytes @ 0x5
   699  0043                     	ds	5
   700  0048                     id_clear@idMin:	
   701                           
   702                           ; 1 bytes @ 0xA
   703  0048                     	ds	1
   704  0049                     get_RFID@flag_RFID_syn:	
   705                           
   706                           ; 1 bytes @ 0xB
   707  0049                     	ds	1
   708  004A                     get_RFID@even_col:	
   709                           
   710                           ; 1 bytes @ 0xC
   711  004A                     	ds	1
   712  004B                     get_RFID@even_row:	
   713                           
   714                           ; 1 bytes @ 0xD
   715  004B                     	ds	1
   716  004C                     get_RFID@j:	
   717                           
   718                           ; 1 bytes @ 0xE
   719  004C                     	ds	1
   720  004D                     get_RFID@i:	
   721                           
   722                           ; 1 bytes @ 0xF
   723  004D                     	ds	1
   724  004E                     get_RFID@flag_RFID_last:	
   725                           
   726                           ; 1 bytes @ 0x10
   727  004E                     	ds	1
   728  004F                     get_RFID@timeOutVal:	
   729                           
   730                           ; 2 bytes @ 0x11
   731  004F                     	ds	2
   732  0051                     get_RFID@ii:	
   733                           
   734                           ; 1 bytes @ 0x13
   735  0051                     	ds	1
   736  0052                     ??_main:	
   737                           
   738                           ; 0 bytes @ 0x14
   739  0052                     	ds	3
   740  0055                     main@t:	
   741                           
   742                           ; 2 bytes @ 0x17
   743  0055                     	ds	2
   744  0057                     main@t1:	
   745                           
   746                           ; 1 bytes @ 0x19
   747  0057                     	ds	1
   748  0058                     main@buzFre:	
   749                           
   750                           ; 1 bytes @ 0x1A
   751  0058                     	ds	1
   752  0059                     main@idState:	
   753                           
   754                           ; 1 bytes @ 0x1B
   755  0059                     	ds	1
   756  005A                     main@idop:	
   757                           
   758                           ; 1 bytes @ 0x1C
   759  005A                     	ds	1
   760  005B                     main@tmp:	
   761                           
   762                           ; 1 bytes @ 0x1D
   763  005B                     	ds	1
   764                           
   765                           	psect	maintext
   766  000B                     __pmaintext:	
   767 ;;Data sizes: Strings 7, constant 0, data 30, bss 11, persistent 0 stack 0
   768 ;;Auto spaces:   Size  Autos    Used
   769 ;; COMMON          14     12      12
   770 ;; BANK0           80     30      71
   771 ;; BANK1           32      0       0
   772 ;;
   773 ;; Pointer list with targets:
   774 ;; ?___wmul	unsigned int  size(1) Largest target is 0
   775 ;;
   776 ;; ?_timerOut	unsigned int  size(1) Largest target is 1
   777 ;;		 -> TMR0(BITSFR0[1]), 
   778 ;;
   779 ;; swUartSendString@str	PTR unsigned char  size(1) Largest target is 7
   780 ;;		 -> STR_1(CODE[7]), 
   781 ;;
   782 ;; id_replate@Cont	PTR unsigned char  size(1) Largest target is 5
   783 ;;		 -> id_clear@tmp(BANK0[5]), keyID(BANK0[5]), 
   784 ;;
   785 ;; id_replate@buff	PTR unsigned char  size(1) Largest target is 25
   786 ;;		 -> buffTag(BANK0[25]), 
   787 ;;
   788 ;; id_search@buff	PTR unsigned char  size(1) Largest target is 25
   789 ;;		 -> buffTag(BANK0[25]), 
   790 ;;
   791 ;; id_search@id_input	PTR unsigned char  size(1) Largest target is 5
   792 ;;		 -> keyID(BANK0[5]), 
   793 ;;
   794 ;; comArr@arr2	PTR unsigned char  size(1) Largest target is 25
   795 ;;		 -> buffTag(BANK0[25]), 
   796 ;;
   797 ;; comArr@arr1	PTR unsigned char  size(1) Largest target is 5
   798 ;;		 -> keyID(BANK0[5]), 
   799 ;;
   800 ;; eepromWriteBlock@buff	PTR unsigned char  size(1) Largest target is 25
   801 ;;		 -> buffTag(BANK0[25]), 
   802 ;;
   803 ;; eepromReadBlock@buff	PTR unsigned char  size(1) Largest target is 25
   804 ;;		 -> buffTag(BANK0[25]), 
   805 ;;
   806 ;;
   807 ;; Critical Paths under _main in COMMON
   808 ;;
   809 ;;   _main->_id_search
   810 ;;   _main->_id_replate
   811 ;;   _id_clear->_id_replate
   812 ;;   _id_replate->_eepromWriteBlock
   813 ;;   _SendNum->_swUartSendByte
   814 ;;   _swUartSendString->_swUartSendByte
   815 ;;   _beep->___wmul
   816 ;;   _eepromWriteBlock->_eepromWriteByte
   817 ;;   _id_search->_comArr
   818 ;;   _get_RFID->_timerOut
   819 ;;   _eepromReadBlock->_eepromReadByte
   820 ;;
   821 ;; Critical Paths under _ISR in COMMON
   822 ;;
   823 ;;   None.
   824 ;;
   825 ;; Critical Paths under _main in BANK0
   826 ;;
   827 ;;   _main->_get_RFID
   828 ;;   _id_clear->_id_replate
   829 ;;
   830 ;; Critical Paths under _ISR in BANK0
   831 ;;
   832 ;;   None.
   833 ;;
   834 ;; Critical Paths under _main in BANK1
   835 ;;
   836 ;;   None.
   837 ;;
   838 ;; Critical Paths under _ISR in BANK1
   839 ;;
   840 ;;   None.
   841 ;;
   842 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   843 ;;
   844 ;;
   845 ;;Call Graph Tables:
   846 ;;
   847 ;; ---------------------------------------------------------------------------------
   848 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   849 ;; ---------------------------------------------------------------------------------
   850 ;; (0) _main                                                10    10      0    5343
   851 ;;                                             20 BANK0     10    10      0
   852 ;;                           _sys_init
   853 ;;                          _gpio_init
   854 ;;                         _timer_init
   855 ;;                           _int_init
   856 ;;                    _eepromWriteByte
   857 ;;                        _SET_EPWM_ON
   858 ;;                     _eepromReadByte
   859 ;;                    _eepromReadBlock
   860 ;;                           _setState
   861 ;;                               _beep
   862 ;;                           _get_RFID
   863 ;;                   _swUartSendString
   864 ;;                            _SendNum
   865 ;;                          _id_search
   866 ;;                           _id_clear
   867 ;;                         _id_replate
   868 ;; ---------------------------------------------------------------------------------
   869 ;; (1) _id_clear                                             7     6      1     718
   870 ;;                                              4 BANK0      7     6      1
   871 ;;                         _id_replate
   872 ;; ---------------------------------------------------------------------------------
   873 ;; (1) _id_replate                                           5     3      2     623
   874 ;;                                             11 COMMON     1     1      0
   875 ;;                                              0 BANK0      4     2      2
   876 ;;                             ___bmul
   877 ;;                   _eepromWriteBlock
   878 ;; ---------------------------------------------------------------------------------
   879 ;; (1) _SendNum                                              6     6      0     300
   880 ;;                                              5 COMMON     6     6      0
   881 ;;                     _swUartSendByte
   882 ;; ---------------------------------------------------------------------------------
   883 ;; (1) _swUartSendString                                     1     1      0     114
   884 ;;                                              5 COMMON     1     1      0
   885 ;;                     _swUartSendByte
   886 ;; ---------------------------------------------------------------------------------
   887 ;; (1) _beep                                                 5     4      1     203
   888 ;;                                              8 COMMON     2     1      1
   889 ;;                                              0 BANK0      3     3      0
   890 ;;                             ___wmul
   891 ;;                        _delay_x10ms
   892 ;; ---------------------------------------------------------------------------------
   893 ;; (2) _eepromWriteBlock                                     5     3      2     178
   894 ;;                                              6 COMMON     5     3      2
   895 ;;                    _eepromWriteByte
   896 ;; ---------------------------------------------------------------------------------
   897 ;; (2) _swUartSendByte                                       3     3      0      69
   898 ;;                                              2 COMMON     3     3      0
   899 ;; ---------------------------------------------------------------------------------
   900 ;; (1) _id_search                                            4     3      1     518
   901 ;;                                             10 COMMON     2     1      1
   902 ;;                                              0 BANK0      2     2      0
   903 ;;                             _comArr
   904 ;;                            ___lbdiv
   905 ;; ---------------------------------------------------------------------------------
   906 ;; (2) _delay_x10ms                                          3     3      0      22
   907 ;;                                              2 COMMON     3     3      0
   908 ;; ---------------------------------------------------------------------------------
   909 ;; (1) _get_RFID                                            21    21      0    1917
   910 ;;                                              7 COMMON     1     1      0
   911 ;;                                              0 BANK0     20    20      0
   912 ;;                           _timerOut
   913 ;;                            ___lbdiv
   914 ;; ---------------------------------------------------------------------------------
   915 ;; (3) _eepromWriteByte                                      4     3      1      44
   916 ;;                                              2 COMMON     4     3      1
   917 ;; ---------------------------------------------------------------------------------
   918 ;; (1) _eepromReadBlock                                      5     3      2     179
   919 ;;                                              4 COMMON     5     3      2
   920 ;;                     _eepromReadByte
   921 ;; ---------------------------------------------------------------------------------
   922 ;; (1) _sys_init                                             0     0      0       0
   923 ;; ---------------------------------------------------------------------------------
   924 ;; (2) ___lbdiv                                              4     3      1     162
   925 ;;                                              2 COMMON     4     3      1
   926 ;; ---------------------------------------------------------------------------------
   927 ;; (2) ___wmul                                               6     2      4      92
   928 ;;                                              2 COMMON     6     2      4
   929 ;; ---------------------------------------------------------------------------------
   930 ;; (2) ___bmul                                               3     2      1      92
   931 ;;                                              2 COMMON     3     2      1
   932 ;; ---------------------------------------------------------------------------------
   933 ;; (1) _setState                                             3     1      2      44
   934 ;;                                              2 COMMON     3     1      2
   935 ;; ---------------------------------------------------------------------------------
   936 ;; (1) _SET_EPWM_ON                                          0     0      0       0
   937 ;; ---------------------------------------------------------------------------------
   938 ;; (2) _timerOut                                             5     3      2      90
   939 ;;                                              2 COMMON     5     3      2
   940 ;; ---------------------------------------------------------------------------------
   941 ;; (2) _comArr                                               8     5      3     222
   942 ;;                                              2 COMMON     8     5      3
   943 ;; ---------------------------------------------------------------------------------
   944 ;; (2) _eepromReadByte                                       2     2      0      45
   945 ;;                                              2 COMMON     2     2      0
   946 ;; ---------------------------------------------------------------------------------
   947 ;; (1) _int_init                                             0     0      0       0
   948 ;; ---------------------------------------------------------------------------------
   949 ;; (1) _timer_init                                           0     0      0       0
   950 ;; ---------------------------------------------------------------------------------
   951 ;; (1) _gpio_init                                            0     0      0       0
   952 ;; ---------------------------------------------------------------------------------
   953 ;; Estimated maximum stack depth 3
   954 ;; ---------------------------------------------------------------------------------
   955 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   956 ;; ---------------------------------------------------------------------------------
   957 ;; (5) _ISR                                                  2     2      0       0
   958 ;;                                              0 COMMON     2     2      0
   959 ;; ---------------------------------------------------------------------------------
   960 ;; Estimated maximum stack depth 5
   961 ;; ---------------------------------------------------------------------------------
   962 ;; Call Graph Graphs:
   963 ;; _main (ROOT)
   964 ;;   _sys_init
   965 ;;   _gpio_init
   966 ;;   _timer_init
   967 ;;   _int_init
   968 ;;   _eepromWriteByte
   969 ;;   _SET_EPWM_ON
   970 ;;   _eepromReadByte
   971 ;;   _eepromReadBlock
   972 ;;     _eepromReadByte
   973 ;;   _setState
   974 ;;   _beep
   975 ;;     ___wmul
   976 ;;     _delay_x10ms
   977 ;;   _get_RFID
   978 ;;     _timerOut
   979 ;;     ___lbdiv
   980 ;;   _swUartSendString
   981 ;;     _swUartSendByte
   982 ;;   _SendNum
   983 ;;     _swUartSendByte
   984 ;;   _id_search
   985 ;;     _comArr
   986 ;;     ___lbdiv
   987 ;;   _id_clear
   988 ;;     _id_replate
   989 ;;       ___bmul
   990 ;;       _eepromWriteBlock
   991 ;;         _eepromWriteByte
   992 ;;   _id_replate
   993 ;;     ___bmul
   994 ;;     _eepromWriteBlock
   995 ;;       _eepromWriteByte
   996 ;;
   997 ;; _ISR (ROOT)
   998 ;;
   999 ;; Address spaces:
  1000 ;;Name               Size   Autos  Total    Cost      Usage
  1001 ;;SFR1                 0      0       0       2        0.0%
  1002 ;;BITSFR1              0      0       0       2        0.0%
  1003 ;;BANK1               20      0       0       5        0.0%
  1004 ;;BITBANK1            20      0       0       7        0.0%
  1005 ;;CODE                 0      0       0       0        0.0%
  1006 ;;DATA                 0      0      57       8        0.0%
  1007 ;;ABS                  0      0      53       6        0.0%
  1008 ;;NULL                 0      0       0       0        0.0%
  1009 ;;STACK                0      0       4       2        0.0%
  1010 ;;BANK0               50     1E      47       4       88.8%
  1011 ;;BITBANK0            50      0       0       3        0.0%
  1012 ;;SFR0                 0      0       0       1        0.0%
  1013 ;;BITSFR0              0      0       0       1        0.0%
  1014 ;;COMMON               E      C       C       1       85.7%
  1015 ;;BITCOMMON            E      0       0       0        0.0%
  1016 ;;EEDATA             100      0       0       0        0.0%
  1017                           
  1018                           
  1019 ;; *************** function _main *****************
  1020 ;; Defined at:
  1021 ;;		line 154 in file "MAIN.C"
  1022 ;; Parameters:    Size  Location     Type
  1023 ;;		None
  1024 ;; Auto vars:     Size  Location     Type
  1025 ;;  t               2   23[BANK0 ] unsigned int 
  1026 ;;  tmp             1   29[BANK0 ] unsigned char 
  1027 ;;  idop            1   28[BANK0 ] unsigned char 
  1028 ;;  idState         1   27[BANK0 ] unsigned char 
  1029 ;;  buzFre          1   26[BANK0 ] unsigned char 
  1030 ;;  t1              1   25[BANK0 ] unsigned char 
  1031 ;; Return value:  Size  Location     Type
  1032 ;;		None               void
  1033 ;; Registers used:
  1034 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1035 ;; Tracked objects:
  1036 ;;		On entry : 17F/0
  1037 ;;		On exit  : 20/0
  1038 ;;		Unchanged: 0/0
  1039 ;; Data sizes:     COMMON   BANK0   BANK1
  1040 ;;      Params:         0       0       0
  1041 ;;      Locals:         0       7       0
  1042 ;;      Temps:          0       3       0
  1043 ;;      Totals:         0      10       0
  1044 ;;Total ram usage:       10 bytes
  1045 ;; Hardware stack levels required when called:    5
  1046 ;; This function calls:
  1047 ;;		_sys_init
  1048 ;;		_gpio_init
  1049 ;;		_timer_init
  1050 ;;		_int_init
  1051 ;;		_eepromWriteByte
  1052 ;;		_SET_EPWM_ON
  1053 ;;		_eepromReadByte
  1054 ;;		_eepromReadBlock
  1055 ;;		_setState
  1056 ;;		_beep
  1057 ;;		_get_RFID
  1058 ;;		_swUartSendString
  1059 ;;		_SendNum
  1060 ;;		_id_search
  1061 ;;		_id_clear
  1062 ;;		_id_replate
  1063 ;; This function is called by:
  1064 ;;		Startup code after reset
  1065 ;; This function uses a non-reentrant model
  1066 ;;
  1067  000B                     _main:	
  1068                           
  1069                           ;MAIN.C: 162: unsigned char idop, tmp, idState = 0;
  1070                           
  1071                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1072  000B  01D9               	clrf	main@idState
  1073                           
  1074                           ;MAIN.C: 163: unsigned char t1;
  1075                           ;MAIN.C: 164: unsigned char buzFre = 0;
  1076  000C  01D8               	clrf	main@buzFre
  1077  000D  0064               	clrwdt	;#
  1078                           
  1079                           ;MAIN.C: 168: sys_init();
  1080  000E  2608               	fcall	_sys_init
  1081                           
  1082                           ;MAIN.C: 169: gpio_init();
  1083  000F  25BB               	fcall	_gpio_init
  1084                           
  1085                           ;MAIN.C: 171: timer_init();
  1086  0010  261F               	fcall	_timer_init
  1087                           
  1088                           ;MAIN.C: 172: int_init();
  1089  0011  25E3               	fcall	_int_init
  1090                           
  1091                           ;MAIN.C: 178: eepromWriteByte(0xFF, 0xAA);
  1092  0012  30AA               	movlw	170
  1093  0013  00F2               	movwf	?_eepromWriteByte
  1094  0014  30FF               	movlw	255
  1095  0015  244A               	fcall	_eepromWriteByte
  1096                           
  1097                           ;MAIN.C: 179: eepromWriteByte(0xFF, 0xAA);
  1098  0016  30AA               	movlw	170
  1099  0017  00F2               	movwf	?_eepromWriteByte
  1100  0018  30FF               	movlw	255
  1101  0019  244A               	fcall	_eepromWriteByte
  1102                           
  1103                           ;MAIN.C: 182: TRISC &= 0xfe;
  1104  001A  1683               	bsf	3,5	;RP0=1, select bank1
  1105  001B  1007               	bcf	7,0	;volatile
  1106                           
  1107                           ;MAIN.C: 184: SET_EPWM_ON();
  1108  001C  248A               	fcall	_SET_EPWM_ON
  1109                           
  1110                           ;MAIN.C: 193: if (eepromReadByte(0x02) == 0xff) eepromWriteByte(0x02, 0);
  1111  001D  3002               	movlw	2
  1112  001E  2610               	fcall	_eepromReadByte
  1113  001F  3AFF               	xorlw	255
  1114  0020  1D03               	skipz
  1115  0021  2825               	goto	l7529
  1116  0022  3002               	movlw	2
  1117  0023  01F2               	clrf	?_eepromWriteByte
  1118  0024  244A               	fcall	_eepromWriteByte
  1119  0025                     l7529:	
  1120                           
  1121                           ;MAIN.C: 194: if (eepromReadByte(0x01) == 0xff)eepromWriteByte(0x01, 0);
  1122  0025  3001               	movlw	1
  1123  0026  2610               	fcall	_eepromReadByte
  1124  0027  3AFF               	xorlw	255
  1125  0028  1D03               	skipz
  1126  0029  282D               	goto	l7533
  1127  002A  3001               	movlw	1
  1128  002B  01F2               	clrf	?_eepromWriteByte
  1129  002C  244A               	fcall	_eepromWriteByte
  1130  002D                     l7533:	
  1131                           
  1132                           ;MAIN.C: 196: if (eepromReadByte(0x06) != 0) {
  1133  002D  3006               	movlw	6
  1134  002E  2610               	fcall	_eepromReadByte
  1135  002F  3A00               	xorlw	0
  1136  0030  1903               	skipnz
  1137  0031  2844               	goto	l7537
  1138  0032  3006               	movlw	6
  1139                           
  1140                           ;MAIN.C: 200: eepromWriteByte(0x06, 0);
  1141  0033  01F2               	clrf	?_eepromWriteByte
  1142  0034  244A               	fcall	_eepromWriteByte
  1143  0035  3007               	movlw	7
  1144                           
  1145                           ;MAIN.C: 201: eepromWriteByte(0x06 + 1, 0);
  1146  0036  01F2               	clrf	?_eepromWriteByte
  1147  0037  244A               	fcall	_eepromWriteByte
  1148                           
  1149                           ;MAIN.C: 202: eepromWriteByte(0x06 + 2, 0x87);
  1150  0038  3087               	movlw	135
  1151  0039  00F2               	movwf	?_eepromWriteByte
  1152  003A  3008               	movlw	8
  1153  003B  244A               	fcall	_eepromWriteByte
  1154                           
  1155                           ;MAIN.C: 203: eepromWriteByte(0x06 + 3, 0x3a);
  1156  003C  303A               	movlw	58
  1157  003D  00F2               	movwf	?_eepromWriteByte
  1158  003E  3009               	movlw	9
  1159  003F  244A               	fcall	_eepromWriteByte
  1160                           
  1161                           ;MAIN.C: 204: eepromWriteByte(0x06 + 4, 0xf8);
  1162  0040  30F8               	movlw	248
  1163  0041  00F2               	movwf	?_eepromWriteByte
  1164  0042  300A               	movlw	10
  1165  0043  244A               	fcall	_eepromWriteByte
  1166  0044                     l7537:	
  1167                           
  1168                           ;MAIN.C: 206: }
  1169                           ;MAIN.C: 207: eepromReadBlock(0x06, buffTag, 5 * 5);
  1170  0044  3025               	movlw	_buffTag& (0+255)
  1171  0045  00F4               	movwf	?_eepromReadBlock
  1172  0046  3019               	movlw	25
  1173  0047  00F5               	movwf	?_eepromReadBlock+1
  1174  0048  3006               	movlw	6
  1175  0049  257D               	fcall	_eepromReadBlock
  1176                           
  1177                           ;MAIN.C: 210: {
  1178                           ;MAIN.C: 211: if ( eepromReadByte(0x00) == 7) {
  1179  004A  3000               	movlw	0
  1180  004B  2610               	fcall	_eepromReadByte
  1181  004C  3A07               	xorlw	7
  1182  004D  1D03               	skipz
  1183  004E  289A               	goto	l7565
  1184                           
  1185                           ;MAIN.C: 212: tmp = eepromReadByte(0x02);
  1186  004F  3002               	movlw	2
  1187  0050  2610               	fcall	_eepromReadByte
  1188  0051  1283               	bcf	3,5	;RP0=0, select bank0
  1189  0052  00DB               	movwf	main@tmp
  1190                           
  1191                           ;MAIN.C: 213: t1 = tmp;
  1192  0053  00D7               	movwf	main@t1
  1193                           
  1194                           ;MAIN.C: 215: if (t1 == 3) {
  1195  0054  3A03               	xorlw	3
  1196  0055  1D03               	skipz
  1197  0056  288B               	goto	l7557
  1198                           
  1199                           ;MAIN.C: 220: if ((eepromReadByte(0x03) == 8) && (eepromReadByte(0x04) == 3) && (eepromR
      +                          eadByte(0x05) == 3)) {
  1200  0057  3003               	movlw	3
  1201  0058  2610               	fcall	_eepromReadByte
  1202  0059  3A08               	xorlw	8
  1203  005A  1D03               	skipz
  1204  005B  2872               	goto	l7555
  1205  005C  3004               	movlw	4
  1206  005D  2610               	fcall	_eepromReadByte
  1207  005E  3A03               	xorlw	3
  1208  005F  1D03               	skipz
  1209  0060  2872               	goto	l7555
  1210  0061  3005               	movlw	5
  1211  0062  2610               	fcall	_eepromReadByte
  1212  0063  3A03               	xorlw	3
  1213  0064  1D03               	skipz
  1214  0065  2872               	goto	l7555
  1215  0066  3001               	movlw	1
  1216                           
  1217                           ;MAIN.C: 221: eepromWriteByte(0x01, 1);
  1218  0067  01F2               	clrf	?_eepromWriteByte
  1219  0068  0AF2               	incf	?_eepromWriteByte,f
  1220  0069  244A               	fcall	_eepromWriteByte
  1221  006A  3000               	movlw	0
  1222                           
  1223                           ;MAIN.C: 222: setState(0, 0);
  1224  006B  01F2               	clrf	?_setState
  1225  006C  01F3               	clrf	?_setState+1
  1226  006D  25EF               	fcall	_setState
  1227                           
  1228                           ;MAIN.C: 223: beep(20, 2);
  1229  006E  3002               	movlw	2
  1230  006F  00F8               	movwf	?_beep
  1231  0070  3014               	movlw	20
  1232  0071  287A               	goto	L1
  1233  0072                     l7555:	
  1234                           ;MAIN.C: 224: }
  1235                           
  1236                           
  1237                           ;MAIN.C: 225: else {
  1238                           ;MAIN.C: 226: setState(1, 12);
  1239  0072  300C               	movlw	12
  1240  0073  00F2               	movwf	?_setState
  1241  0074  3001               	movlw	1
  1242  0075  01F3               	clrf	?_setState+1
  1243  0076  25EF               	fcall	_setState
  1244                           
  1245                           ;MAIN.C: 227: beep(10, 5);
  1246  0077  3005               	movlw	5
  1247  0078  00F8               	movwf	?_beep
  1248  0079  300A               	movlw	10
  1249  007A                     L1:	
  1250  007A  23D5               	fcall	_beep
  1251  007B  3000               	movlw	0
  1252                           
  1253                           ;MAIN.C: 228: }
  1254                           ;MAIN.C: 230: eepromWriteByte(0x00, 0);
  1255  007C  01F2               	clrf	?_eepromWriteByte
  1256  007D  244A               	fcall	_eepromWriteByte
  1257  007E  3002               	movlw	2
  1258                           
  1259                           ;MAIN.C: 231: eepromWriteByte(0x02, 0);
  1260  007F  01F2               	clrf	?_eepromWriteByte
  1261  0080  244A               	fcall	_eepromWriteByte
  1262  0081  3005               	movlw	5
  1263                           
  1264                           ;MAIN.C: 232: eepromWriteByte(0x05, 0);
  1265  0082  01F2               	clrf	?_eepromWriteByte
  1266  0083  244A               	fcall	_eepromWriteByte
  1267  0084  3004               	movlw	4
  1268                           
  1269                           ;MAIN.C: 233: eepromWriteByte(0x04, 0);
  1270  0085  01F2               	clrf	?_eepromWriteByte
  1271  0086  244A               	fcall	_eepromWriteByte
  1272  0087  3003               	movlw	3
  1273                           
  1274                           ;MAIN.C: 234: eepromWriteByte(0x03, 0);
  1275  0088  01F2               	clrf	?_eepromWriteByte
  1276  0089  244A               	fcall	_eepromWriteByte
  1277                           
  1278                           ;MAIN.C: 236: }
  1279  008A  289F               	goto	l7567
  1280  008B                     l7557:	
  1281                           
  1282                           ;MAIN.C: 237: else {
  1283                           ;MAIN.C: 238: tmp = eepromReadByte(0x02) ;
  1284  008B  3002               	movlw	2
  1285  008C  2610               	fcall	_eepromReadByte
  1286  008D  1283               	bcf	3,5	;RP0=0, select bank0
  1287  008E  00DB               	movwf	main@tmp
  1288                           
  1289                           ;MAIN.C: 239: tmp++;
  1290  008F  0ADB               	incf	main@tmp,f
  1291                           
  1292                           ;MAIN.C: 240: eepromWriteByte(0x02, tmp);
  1293  0090  085B               	movf	main@tmp,w
  1294  0091  00F2               	movwf	?_eepromWriteByte
  1295  0092  3002               	movlw	2
  1296  0093  244A               	fcall	_eepromWriteByte
  1297  0094  3007               	movlw	7
  1298                           
  1299                           ;MAIN.C: 241: PwInNum = 0;
  1300  0095  1283               	bcf	3,5	;RP0=0, select bank0
  1301  0096  01E0               	clrf	_PwInNum
  1302  0097  01F2               	clrf	?_setState
  1303  0098  0AF2               	incf	?_setState,f
  1304  0099  289D               	goto	L2
  1305  009A                     l7565:	
  1306                           
  1307                           ;MAIN.C: 246: else {
  1308                           ;MAIN.C: 247: setState(1, 12);
  1309  009A  300C               	movlw	12
  1310  009B  00F2               	movwf	?_setState
  1311  009C  3001               	movlw	1
  1312  009D                     L2:	
  1313  009D  01F3               	clrf	?_setState+1
  1314  009E  25EF               	fcall	_setState
  1315  009F                     l7567:	
  1316                           
  1317                           ;MAIN.C: 248: }
  1318                           ;MAIN.C: 250: if (eepromReadByte(0x01) == 1) {
  1319  009F  3001               	movlw	1
  1320  00A0  2610               	fcall	_eepromReadByte
  1321  00A1  3A01               	xorlw	1
  1322  00A2  1D03               	skipz
  1323  00A3  28A8               	goto	l7571
  1324  00A4  3000               	movlw	0
  1325                           
  1326                           ;MAIN.C: 251: setState(0, 0);
  1327  00A5  01F2               	clrf	?_setState
  1328  00A6  01F3               	clrf	?_setState+1
  1329  00A7  25EF               	fcall	_setState
  1330  00A8                     l7571:	
  1331                           
  1332                           ;MAIN.C: 252: }
  1333                           ;MAIN.C: 253: }
  1334                           ;MAIN.C: 258: tmp = 0;
  1335  00A8  1283               	bcf	3,5	;RP0=0, select bank0
  1336  00A9  01DB               	clrf	main@tmp
  1337  00AA                     l7573:	
  1338                           
  1339                           ;MAIN.C: 263: idop = get_RFID();
  1340  00AA  2250               	fcall	_get_RFID
  1341  00AB  00DA               	movwf	main@idop
  1342                           
  1343                           ;MAIN.C: 265: if (idop) {
  1344  00AC  085A               	movf	main@idop,w
  1345  00AD  1903               	btfsc	3,2
  1346  00AE  29A5               	goto	l7691
  1347                           
  1348                           ;MAIN.C: 266: swUartSendString("\nTag: ");
  1349  00AF  3001               	movlw	(STR_1-__stringbase)& (0+255)
  1350  00B0  25D6               	fcall	_swUartSendString
  1351                           
  1352                           ;MAIN.C: 268: SendNum(keyID[1]);
  1353  00B1  1283               	bcf	3,5	;RP0=0, select bank0
  1354  00B2  0863               	movf	_keyID+1,w
  1355  00B3  2400               	fcall	_SendNum
  1356                           
  1357                           ;MAIN.C: 269: SendNum(keyID[2]);
  1358  00B4  1283               	bcf	3,5	;RP0=0, select bank0
  1359  00B5  0864               	movf	_keyID+2,w
  1360  00B6  2400               	fcall	_SendNum
  1361                           
  1362                           ;MAIN.C: 270: SendNum(keyID[3]);
  1363  00B7  1283               	bcf	3,5	;RP0=0, select bank0
  1364  00B8  0865               	movf	_keyID+3,w
  1365  00B9  2400               	fcall	_SendNum
  1366                           
  1367                           ;MAIN.C: 271: SendNum(keyID[4]);
  1368  00BA  1283               	bcf	3,5	;RP0=0, select bank0
  1369  00BB  0866               	movf	_keyID+4,w
  1370  00BC  2400               	fcall	_SendNum
  1371                           
  1372                           ;MAIN.C: 272: idop = id_search(keyID, buffTag);
  1373  00BD  3025               	movlw	_buffTag& (0+255)
  1374  00BE  00FA               	movwf	?_id_search
  1375  00BF  3062               	movlw	_keyID& (0+255)
  1376  00C0  2505               	fcall	_id_search
  1377  00C1  00DA               	movwf	main@idop
  1378                           
  1379                           ;MAIN.C: 273: switch (mtState) {
  1380  00C2  2989               	goto	l7685
  1381  00C3                     l7587:	
  1382                           
  1383                           ;MAIN.C: 276: case 1:
  1384                           ;MAIN.C: 277: case 2:
  1385                           ;MAIN.C: 279: if ((idop > 1) && (idop < 6))
  1386  00C3  3002               	movlw	2
  1387  00C4  025A               	subwf	main@idop,w
  1388  00C5  1C03               	skipc
  1389  00C6  28ED               	goto	l7599
  1390  00C7  3006               	movlw	6
  1391  00C8  025A               	subwf	main@idop,w
  1392  00C9  1803               	skipnc
  1393  00CA  28ED               	goto	l7599
  1394                           
  1395                           ;MAIN.C: 280: {
  1396                           ;MAIN.C: 281: if ( eepromReadByte(0x00) == 7) eepromWriteByte(0x00, 0);
  1397  00CB  3000               	movlw	0
  1398  00CC  2610               	fcall	_eepromReadByte
  1399  00CD  3A07               	xorlw	7
  1400  00CE  1D03               	skipz
  1401  00CF  28D3               	goto	l7595
  1402  00D0  3000               	movlw	0
  1403  00D1  01F2               	clrf	?_eepromWriteByte
  1404  00D2  244A               	fcall	_eepromWriteByte
  1405  00D3                     l7595:	
  1406                           
  1407                           ;MAIN.C: 282: if (mtState == 7) {
  1408  00D3  1283               	bcf	3,5	;RP0=0, select bank0
  1409  00D4  0861               	movf	_mtState,w
  1410  00D5  3A07               	xorlw	7
  1411  00D6  1D03               	skipz
  1412  00D7  28E4               	goto	l4188
  1413  00D8  3002               	movlw	2
  1414                           
  1415                           ;MAIN.C: 283: eepromWriteByte(0x02, 0);
  1416  00D9  01F2               	clrf	?_eepromWriteByte
  1417  00DA  244A               	fcall	_eepromWriteByte
  1418  00DB  3005               	movlw	5
  1419                           
  1420                           ;MAIN.C: 284: eepromWriteByte(0x05, 0);
  1421  00DC  01F2               	clrf	?_eepromWriteByte
  1422  00DD  244A               	fcall	_eepromWriteByte
  1423  00DE  3004               	movlw	4
  1424                           
  1425                           ;MAIN.C: 285: eepromWriteByte(0x04, 0);
  1426  00DF  01F2               	clrf	?_eepromWriteByte
  1427  00E0  244A               	fcall	_eepromWriteByte
  1428  00E1  3003               	movlw	3
  1429                           
  1430                           ;MAIN.C: 286: eepromWriteByte(0x03, 0);
  1431  00E2  01F2               	clrf	?_eepromWriteByte
  1432  00E3  244A               	fcall	_eepromWriteByte
  1433  00E4                     l4188:	
  1434  00E4  3000               	movlw	0
  1435                           
  1436                           ;MAIN.C: 287: }
  1437                           ;MAIN.C: 288: setState(0, 0);
  1438  00E5  01F2               	clrf	?_setState
  1439  00E6  01F3               	clrf	?_setState+1
  1440  00E7  25EF               	fcall	_setState
  1441  00E8  300A               	movlw	10
  1442                           
  1443                           ;MAIN.C: 289: beep(10, 1);
  1444  00E9  01F8               	clrf	?_beep
  1445  00EA  0AF8               	incf	?_beep,f
  1446  00EB  23D5               	fcall	_beep
  1447                           
  1448                           ;MAIN.C: 290: }
  1449  00EC  2994               	goto	l4191
  1450  00ED                     l7599:	
  1451                           
  1452                           ;MAIN.C: 292: else if (idop == 1)
  1453  00ED  0B5A               	decfsz	main@idop,w
  1454  00EE  2994               	goto	l4191
  1455                           
  1456                           ;MAIN.C: 293: {
  1457                           ;MAIN.C: 295: id_clear(2, 5);
  1458  00EF  3005               	movlw	5
  1459  00F0  00C2               	movwf	?_id_clear
  1460  00F1  3002               	movlw	2
  1461  00F2  246B               	fcall	_id_clear
  1462  00F3  3003               	movlw	3
  1463                           
  1464                           ;MAIN.C: 296: setState(3, 0);
  1465  00F4  01F2               	clrf	?_setState
  1466  00F5  01F3               	clrf	?_setState+1
  1467  00F6  25EF               	fcall	_setState
  1468  00F7  3003               	movlw	3
  1469                           
  1470                           ;MAIN.C: 297: tmp = 1;
  1471  00F8  01DB               	clrf	main@tmp
  1472  00F9  0ADB               	incf	main@tmp,f
  1473                           
  1474                           ;MAIN.C: 298: beep(10, 3);
  1475  00FA  00F8               	movwf	?_beep
  1476  00FB  300A               	movlw	10
  1477  00FC  23D5               	fcall	_beep
  1478  00FD  2994               	goto	l4191
  1479  00FE                     l7609:	
  1480                           
  1481                           ;MAIN.C: 304: if (idop <= 5 && idop != 1 ) {
  1482  00FE  3006               	movlw	6
  1483  00FF  025A               	subwf	main@idop,w
  1484  0100  1803               	skipnc
  1485  0101  2912               	goto	l7617
  1486  0102  035A               	decf	main@idop,w
  1487  0103  1903               	skipnz
  1488  0104  2912               	goto	l7617
  1489                           
  1490                           ;MAIN.C: 305: if (eepromReadByte(0x01) == 1) {
  1491  0105  3001               	movlw	1
  1492  0106  2610               	fcall	_eepromReadByte
  1493  0107  3A01               	xorlw	1
  1494  0108  1D03               	skipz
  1495  0109  2994               	goto	l4191
  1496  010A  3001               	movlw	1
  1497                           
  1498                           ;MAIN.C: 306: eepromWriteByte(0x01, 0);
  1499  010B  01F2               	clrf	?_eepromWriteByte
  1500  010C  244A               	fcall	_eepromWriteByte
  1501                           
  1502                           ;MAIN.C: 307: beep(10, 2);
  1503  010D  3002               	movlw	2
  1504  010E  00F8               	movwf	?_beep
  1505  010F  300A               	movlw	10
  1506  0110  23D5               	fcall	_beep
  1507  0111  2994               	goto	l4191
  1508  0112                     l7617:	
  1509                           
  1510                           ;MAIN.C: 311: else if (idop == 1) {
  1511  0112  0B5A               	decfsz	main@idop,w
  1512  0113  2994               	goto	l4191
  1513                           
  1514                           ;MAIN.C: 312: id_clear(2, 5);
  1515  0114  3005               	movlw	5
  1516  0115  00C2               	movwf	?_id_clear
  1517  0116  3002               	movlw	2
  1518  0117  246B               	fcall	_id_clear
  1519  0118  3003               	movlw	3
  1520                           
  1521                           ;MAIN.C: 313: setState(3, 0);
  1522  0119  01F2               	clrf	?_setState
  1523  011A  01F3               	clrf	?_setState+1
  1524  011B  25EF               	fcall	_setState
  1525  011C  3003               	movlw	3
  1526                           
  1527                           ;MAIN.C: 314: tmp = 1;
  1528  011D  01DB               	clrf	main@tmp
  1529  011E  0ADB               	incf	main@tmp,f
  1530                           
  1531                           ;MAIN.C: 315: beep(10, 3);
  1532  011F  00F8               	movwf	?_beep
  1533  0120  300A               	movlw	10
  1534  0121  23D5               	fcall	_beep
  1535  0122  2994               	goto	l4191
  1536  0123                     l7627:	
  1537                           
  1538                           ;MAIN.C: 321: if (idop == 1 && idState == 0) {
  1539  0123  0B5A               	decfsz	main@idop,w
  1540  0124  2937               	goto	l7639
  1541  0125  08D9               	movf	main@idState,f
  1542  0126  1D03               	skipz
  1543  0127  2937               	goto	l7639
  1544                           
  1545                           ;MAIN.C: 323: id_clear(2, 5);
  1546  0128  3005               	movlw	5
  1547  0129  00C2               	movwf	?_id_clear
  1548  012A  3002               	movlw	2
  1549  012B  246B               	fcall	_id_clear
  1550  012C  3003               	movlw	3
  1551                           
  1552                           ;MAIN.C: 324: setState(3, 0);
  1553  012D  01F2               	clrf	?_setState
  1554  012E  01F3               	clrf	?_setState+1
  1555  012F  25EF               	fcall	_setState
  1556  0130  3003               	movlw	3
  1557                           
  1558                           ;MAIN.C: 325: tmp = 1;
  1559  0131  01DB               	clrf	main@tmp
  1560  0132  0ADB               	incf	main@tmp,f
  1561                           
  1562                           ;MAIN.C: 326: beep(10, 3);
  1563  0133  00F8               	movwf	?_beep
  1564  0134  300A               	movlw	10
  1565  0135  23D5               	fcall	_beep
  1566                           
  1567                           ;MAIN.C: 327: }
  1568  0136  2994               	goto	l4191
  1569  0137                     l7639:	
  1570                           
  1571                           ;MAIN.C: 329: else if (idop == 2 && idState == 0) {
  1572  0137  085A               	movf	main@idop,w
  1573  0138  3A02               	xorlw	2
  1574  0139  1D03               	skipz
  1575  013A  2994               	goto	l4191
  1576  013B  08D9               	movf	main@idState,f
  1577  013C  1D03               	skipz
  1578  013D  2994               	goto	l4191
  1579                           
  1580                           ;MAIN.C: 331: id_clear(3, 5);
  1581  013E  3005               	movlw	5
  1582  013F  00C2               	movwf	?_id_clear
  1583  0140  3003               	movlw	3
  1584  0141  246B               	fcall	_id_clear
  1585  0142  3005               	movlw	5
  1586                           
  1587                           ;MAIN.C: 332: setState(5, 0);
  1588  0143  01F2               	clrf	?_setState
  1589  0144  01F3               	clrf	?_setState+1
  1590  0145  25EF               	fcall	_setState
  1591                           
  1592                           ;MAIN.C: 333: tmp = 2;
  1593  0146  3002               	movlw	2
  1594  0147  00DB               	movwf	main@tmp
  1595                           
  1596                           ;MAIN.C: 334: beep(10, 2);
  1597  0148  00F8               	movwf	?_beep
  1598  0149  300A               	movlw	10
  1599  014A  23D5               	fcall	_beep
  1600  014B  2994               	goto	l4191
  1601  014C                     l7651:	
  1602                           
  1603                           ;MAIN.C: 340: if (idState == 0) {
  1604  014C  08D9               	movf	main@idState,f
  1605  014D  1D03               	skipz
  1606  014E  2965               	goto	l7665
  1607                           
  1608                           ;MAIN.C: 347: if ( idop != 1) {
  1609  014F  035A               	decf	main@idop,w
  1610  0150  1903               	skipnz
  1611  0151  2994               	goto	l4191
  1612  0152  3006               	movlw	6
  1613                           
  1614                           ;MAIN.C: 348: tmp++;
  1615  0153  0ADB               	incf	main@tmp,f
  1616                           
  1617                           ;MAIN.C: 350: if (tmp <= 5) {
  1618  0154  025B               	subwf	main@tmp,w
  1619  0155  1803               	skipnc
  1620  0156  2994               	goto	l4191
  1621                           
  1622                           ;MAIN.C: 351: id_replate(tmp, keyID, buffTag);
  1623  0157  3062               	movlw	_keyID& (0+255)
  1624  0158  00BE               	movwf	?_id_replate
  1625  0159  3025               	movlw	_buffTag& (0+255)
  1626  015A  00BF               	movwf	?_id_replate+1
  1627  015B  085B               	movf	main@tmp,w
  1628  015C  239A               	fcall	_id_replate
  1629  015D  300A               	movlw	10
  1630                           
  1631                           ;MAIN.C: 352: timeTick = 0;
  1632  015E  1283               	bcf	3,5	;RP0=0, select bank0
  1633  015F  01DE               	clrf	_timeTick
  1634  0160  01DF               	clrf	_timeTick+1
  1635  0161  01F8               	clrf	?_beep
  1636  0162  0AF8               	incf	?_beep,f
  1637  0163  23D5               	fcall	_beep
  1638  0164  2994               	goto	l4191
  1639  0165                     l7665:	
  1640  0165  300A               	movlw	10
  1641                           
  1642                           ;MAIN.C: 359: beep(10, 1);
  1643  0166  01F8               	clrf	?_beep
  1644  0167  0AF8               	incf	?_beep,f
  1645  0168  23D5               	fcall	_beep
  1646  0169  2994               	goto	l4191
  1647  016A                     l7667:	
  1648                           
  1649                           ;MAIN.C: 365: if (idState == 0) {
  1650  016A  08D9               	movf	main@idState,f
  1651  016B  1D03               	skipz
  1652  016C  2984               	goto	l7681
  1653                           
  1654                           ;MAIN.C: 366: if ( idop > 2) {
  1655  016D  3003               	movlw	3
  1656  016E  025A               	subwf	main@idop,w
  1657  016F  1C03               	skipc
  1658  0170  2994               	goto	l4191
  1659  0171  3006               	movlw	6
  1660                           
  1661                           ;MAIN.C: 367: tmp++;
  1662  0172  0ADB               	incf	main@tmp,f
  1663                           
  1664                           ;MAIN.C: 369: if (tmp <= 5) {
  1665  0173  025B               	subwf	main@tmp,w
  1666  0174  1803               	skipnc
  1667  0175  2994               	goto	l4191
  1668                           
  1669                           ;MAIN.C: 370: id_replate(tmp, keyID, buffTag);
  1670  0176  3062               	movlw	_keyID& (0+255)
  1671  0177  00BE               	movwf	?_id_replate
  1672  0178  3025               	movlw	_buffTag& (0+255)
  1673  0179  00BF               	movwf	?_id_replate+1
  1674  017A  085B               	movf	main@tmp,w
  1675  017B  239A               	fcall	_id_replate
  1676  017C  300A               	movlw	10
  1677                           
  1678                           ;MAIN.C: 371: timeTick = 0;
  1679  017D  1283               	bcf	3,5	;RP0=0, select bank0
  1680  017E  01DE               	clrf	_timeTick
  1681  017F  01DF               	clrf	_timeTick+1
  1682  0180  01F8               	clrf	?_beep
  1683  0181  0AF8               	incf	?_beep,f
  1684  0182  23D5               	fcall	_beep
  1685  0183  2994               	goto	l4191
  1686  0184                     l7681:	
  1687  0184  300A               	movlw	10
  1688                           
  1689                           ;MAIN.C: 378: beep(10, 1);
  1690  0185  01F8               	clrf	?_beep
  1691  0186  0AF8               	incf	?_beep,f
  1692  0187  23D5               	fcall	_beep
  1693  0188  2994               	goto	l4191
  1694  0189                     l7685:	
  1695  0189  0861               	movf	_mtState,w
  1696                           
  1697                           ; Switch size 1, requested type "space"
  1698                           ; Number of cases is 7, Range of values is 0 to 7
  1699                           ; switch strategies available:
  1700                           ; Name         Instructions Cycles
  1701                           ; direct_byte           14     6 (fixed)
  1702                           ; simple_byte           22    12 (average)
  1703                           ; jumptable            260     6 (fixed)
  1704                           ; rangetable            12     6 (fixed)
  1705                           ; spacedrange           22     9 (fixed)
  1706                           ; locatedrange           8     3 (fixed)
  1707                           ;	Chosen strategy is direct_byte
  1708  018A  0084               	movwf	4
  1709  018B  3008               	movlw	8
  1710  018C  0204               	subwf	4,w
  1711  018D  1803               	skipnc
  1712  018E  2994               	goto	l4191
  1713  018F  3006               	movlw	high S7787
  1714  0190  008A               	movwf	10
  1715  0191  3000               	movlw	low S7787
  1716  0192  0704               	addwf	4,w
  1717  0193  0082               	movwf	2
  1718  0194                     l4191:	
  1719                           
  1720                           ;MAIN.C: 384: idState = 1;
  1721  0194  1283               	bcf	3,5	;RP0=0, select bank0
  1722  0195  01D9               	clrf	main@idState
  1723  0196  0AD9               	incf	main@idState,f
  1724                           
  1725                           ;MAIN.C: 385: if (mtState != 2) _delay((unsigned long)((61)*(8000000/4000.0)));
  1726  0197  0861               	movf	_mtState,w
  1727  0198  3A02               	xorlw	2
  1728  0199  1903               	skipnz
  1729  019A  29B6               	goto	l4214
  1730  019B  309F               	movlw	159
  1731  019C  00D3               	movwf	??_main+1
  1732  019D  306F               	movlw	111
  1733  019E  00D2               	movwf	??_main
  1734  019F                     u2337:	
  1735  019F  0BD2               	decfsz	??_main,f
  1736  01A0  299F               	goto	u2337
  1737  01A1  0BD3               	decfsz	??_main+1,f
  1738  01A2  299F               	goto	u2337
  1739  01A3  29A4               	nop2
  1740  01A4  29B6               	goto	l4214
  1741  01A5                     l7691:	
  1742                           
  1743                           ;MAIN.C: 387: else {
  1744                           ;MAIN.C: 388: idState = 0;
  1745  01A5  01D9               	clrf	main@idState
  1746                           
  1747                           ;MAIN.C: 389: if (mtState != 2) _delay((unsigned long)((150)*(8000000/4000.0)));
  1748  01A6  0861               	movf	_mtState,w
  1749  01A7  3A02               	xorlw	2
  1750  01A8  1903               	skipnz
  1751  01A9  29B6               	goto	l4214
  1752  01AA  3002               	movlw	2
  1753  01AB  00D4               	movwf	??_main+2
  1754  01AC  3086               	movlw	134
  1755  01AD  00D3               	movwf	??_main+1
  1756  01AE  3099               	movlw	153
  1757  01AF  00D2               	movwf	??_main
  1758  01B0                     u2347:	
  1759  01B0  0BD2               	decfsz	??_main,f
  1760  01B1  29B0               	goto	u2347
  1761  01B2  0BD3               	decfsz	??_main+1,f
  1762  01B3  29B0               	goto	u2347
  1763  01B4  0BD4               	decfsz	??_main+2,f
  1764  01B5  29B0               	goto	u2347
  1765  01B6                     l4214:	
  1766                           
  1767                           ;MAIN.C: 390: }
  1768                           ;MAIN.C: 394: if ((timeOut != 0) && ( timeTick > timeOut)) {
  1769  01B6  1283               	bcf	3,5	;RP0=0, select bank0
  1770  01B7  085D               	movf	_timeOut+1,w
  1771  01B8  045C               	iorwf	_timeOut,w
  1772  01B9  1903               	skipnz
  1773  01BA  2A08               	goto	l7727
  1774  01BB  085F               	movf	_timeTick+1,w
  1775  01BC  025D               	subwf	_timeOut+1,w
  1776  01BD  1D03               	skipz
  1777  01BE  29C1               	goto	u2245
  1778  01BF  085E               	movf	_timeTick,w
  1779  01C0  025C               	subwf	_timeOut,w
  1780  01C1                     u2245:	
  1781  01C1  1C03               	btfss	3,0
  1782  01C2  29FA               	goto	l7725
  1783  01C3  2A08               	goto	l7727
  1784  01C4                     l7701:	
  1785                           
  1786                           ;MAIN.C: 399: setState(2, 15);
  1787  01C4  300F               	movlw	15
  1788  01C5  00F2               	movwf	?_setState
  1789  01C6  3002               	movlw	2
  1790  01C7  01F3               	clrf	?_setState+1
  1791  01C8  25EF               	fcall	_setState
  1792                           
  1793                           ;MAIN.C: 401: break;
  1794  01C9  2A08               	goto	l7727
  1795  01CA                     l7703:	
  1796                           
  1797                           ;MAIN.C: 403: setState(6, 7);
  1798  01CA  3007               	movlw	7
  1799  01CB  00F2               	movwf	?_setState
  1800  01CC  3006               	movlw	6
  1801  01CD  01F3               	clrf	?_setState+1
  1802  01CE  25EF               	fcall	_setState
  1803                           
  1804                           ;MAIN.C: 404: break;
  1805  01CF  2A08               	goto	l7727
  1806  01D0                     l7705:	
  1807  01D0  3002               	movlw	2
  1808                           
  1809                           ;MAIN.C: 406: setState(2, 0);
  1810  01D1  01F2               	clrf	?_setState
  1811  01D2  01F3               	clrf	?_setState+1
  1812  01D3  25EF               	fcall	_setState
  1813                           
  1814                           ;MAIN.C: 408: eepromWriteByte(0x00, 7);
  1815  01D4  3007               	movlw	7
  1816  01D5  00F2               	movwf	?_eepromWriteByte
  1817  01D6  3000               	movlw	0
  1818  01D7  244A               	fcall	_eepromWriteByte
  1819  01D8  3002               	movlw	2
  1820                           
  1821                           ;MAIN.C: 409: eepromWriteByte(0x02, 0);
  1822  01D9  01F2               	clrf	?_eepromWriteByte
  1823  01DA  244A               	fcall	_eepromWriteByte
  1824                           
  1825                           ;MAIN.C: 410: break;
  1826  01DB  2A08               	goto	l7727
  1827  01DC                     l4222:	
  1828                           ;MAIN.C: 411: case 7:
  1829                           
  1830                           
  1831                           ;MAIN.C: 413: if (RC1 == 1) {
  1832  01DC  1C87               	btfss	7,1
  1833  01DD  2A08               	goto	l7727
  1834  01DE  3002               	movlw	2
  1835                           
  1836                           ;MAIN.C: 414: PwInNum++;
  1837  01DF  0AE0               	incf	_PwInNum,f
  1838                           
  1839                           ;MAIN.C: 415: tmp = eepromReadByte(0x02);
  1840  01E0  2610               	fcall	_eepromReadByte
  1841  01E1  1283               	bcf	3,5	;RP0=0, select bank0
  1842  01E2  00DB               	movwf	main@tmp
  1843                           
  1844                           ;MAIN.C: 416: if (tmp > 0 && tmp < 4) {
  1845  01E3  085B               	movf	main@tmp,w
  1846  01E4  1903               	btfsc	3,2
  1847  01E5  29F0               	goto	l7719
  1848  01E6  3004               	movlw	4
  1849  01E7  025B               	subwf	main@tmp,w
  1850  01E8  1803               	skipnc
  1851  01E9  29F0               	goto	l7719
  1852                           
  1853                           ;MAIN.C: 417: tmp--;
  1854  01EA  03DB               	decf	main@tmp,f
  1855                           
  1856                           ;MAIN.C: 418: eepromWriteByte(0x03 + tmp, PwInNum);
  1857  01EB  0860               	movf	_PwInNum,w
  1858  01EC  00F2               	movwf	?_eepromWriteByte
  1859  01ED  085B               	movf	main@tmp,w
  1860  01EE  3E03               	addlw	3
  1861  01EF  244A               	fcall	_eepromWriteByte
  1862  01F0                     l7719:	
  1863  01F0  300A               	movlw	10
  1864                           
  1865                           ;MAIN.C: 419: }
  1866                           ;MAIN.C: 421: beep(10, 1);
  1867  01F1  01F8               	clrf	?_beep
  1868  01F2  0AF8               	incf	?_beep,f
  1869  01F3  23D5               	fcall	_beep
  1870  01F4  3007               	movlw	7
  1871                           
  1872                           ;MAIN.C: 422: setState(7, 1);
  1873  01F5  01F2               	clrf	?_setState
  1874  01F6  0AF2               	incf	?_setState,f
  1875  01F7  01F3               	clrf	?_setState+1
  1876  01F8  25EF               	fcall	_setState
  1877  01F9  2A08               	goto	l7727
  1878  01FA                     l7725:	
  1879  01FA  0861               	movf	_mtState,w
  1880                           
  1881                           ; Switch size 1, requested type "space"
  1882                           ; Number of cases is 4, Range of values is 1 to 7
  1883                           ; switch strategies available:
  1884                           ; Name         Instructions Cycles
  1885                           ; simple_byte           13     7 (average)
  1886                           ; direct_byte           16     9 (fixed)
  1887                           ; jumptable            263     9 (fixed)
  1888                           ;	Chosen strategy is simple_byte
  1889  01FB  3A01               	xorlw	1	; case 1
  1890  01FC  1903               	skipnz
  1891  01FD  29C4               	goto	l7701
  1892  01FE  3A03               	xorlw	3	; case 2
  1893  01FF  1903               	skipnz
  1894  0200  29CA               	goto	l7703
  1895  0201  3A04               	xorlw	4	; case 6
  1896  0202  1903               	skipnz
  1897  0203  29D0               	goto	l7705
  1898  0204  3A01               	xorlw	1	; case 7
  1899  0205  1903               	skipnz
  1900  0206  29DC               	goto	l4222
  1901  0207  2A08               	goto	l7727
  1902  0208                     l7727:	
  1903                           
  1904                           ;MAIN.C: 442: }
  1905                           ;MAIN.C: 445: if (mtState == 0) RC1 = 1;
  1906  0208  1283               	bcf	3,5	;RP0=0, select bank0
  1907  0209  08E1               	movf	_mtState,f
  1908  020A  1D03               	skipz
  1909  020B  2A0E               	goto	l4225
  1910  020C  1487               	bsf	7,1
  1911  020D  2A0F               	goto	l7731
  1912  020E                     l4225:	
  1913                           
  1914                           ;MAIN.C: 446: else RC1 = 0;
  1915  020E  1087               	bcf	7,1
  1916  020F                     l7731:	
  1917                           
  1918                           ;MAIN.C: 452: if (mtState == 2) {
  1919  020F  0861               	movf	_mtState,w
  1920  0210  3A02               	xorlw	2
  1921  0211  1D03               	skipz
  1922  0212  2A3E               	goto	l7747
  1923                           
  1924                           ;MAIN.C: 456: if (buzFre) t = 1600;
  1925  0213  0858               	movf	main@buzFre,w
  1926  0214  1903               	btfsc	3,2
  1927  0215  2A1A               	goto	l7737
  1928  0216  3040               	movlw	64
  1929  0217  00D5               	movwf	main@t
  1930  0218  3006               	movlw	6
  1931  0219  2A1D               	goto	L3
  1932  021A                     l7737:	
  1933                           
  1934                           ;MAIN.C: 457: else t = 2666;
  1935  021A  306A               	movlw	106
  1936  021B  00D5               	movwf	main@t
  1937  021C  300A               	movlw	10
  1938  021D                     L3:	
  1939  021D  00D6               	movwf	main@t+1
  1940  021E                     l4230:	
  1941  021E  3001               	movlw	1
  1942  021F  1283               	bcf	3,5	;RP0=0, select bank0
  1943  0220  02D5               	subwf	main@t,f
  1944  0221  3000               	movlw	0
  1945  0222  1C03               	skipc
  1946  0223  03D6               	decf	main@t+1,f
  1947  0224  02D6               	subwf	main@t+1,f
  1948  0225  0A55               	incf	main@t,w
  1949  0226  1903               	skipnz
  1950  0227  0A56               	incf	main@t+1,w
  1951  0228  1903               	btfsc	3,2
  1952  0229  2A3B               	goto	l7745
  1953                           
  1954                           ;MAIN.C: 460: RA3 = ~RA3;
  1955  022A  3008               	movlw	8
  1956  022B  0685               	xorwf	5,f
  1957                           
  1958                           ;MAIN.C: 461: if (buzFre) {_delay((unsigned long)((480)*(8000000/4000000.0)));}
  1959  022C  0858               	movf	main@buzFre,w
  1960  022D  1903               	btfsc	3,2
  1961  022E  2A36               	goto	l7743
  1962  022F  3089               	movlw	137
  1963  0230  00D2               	movwf	??_main
  1964  0231                     u2357:	
  1965  0231  2A32               	nop2
  1966  0232  2A33               	nop2
  1967  0233  0BD2               	decfsz	??_main,f
  1968  0234  2A31               	goto	u2357
  1969  0235  2A1E               	goto	l4230
  1970  0236                     l7743:	
  1971                           
  1972                           ;MAIN.C: 462: else {_delay((unsigned long)((290)*(8000000/4000000.0)));}
  1973  0236  30C1               	movlw	193
  1974  0237  00D2               	movwf	??_main
  1975  0238                     u2367:	
  1976  0238  0BD2               	decfsz	??_main,f
  1977  0239  2A38               	goto	u2367
  1978  023A  2A1E               	goto	l4230
  1979  023B                     l7745:	
  1980                           
  1981                           ;MAIN.C: 463: }
  1982                           ;MAIN.C: 464: buzFre = ~buzFre;
  1983  023B  30FF               	movlw	255
  1984  023C  06D8               	xorwf	main@buzFre,f
  1985                           
  1986                           ;MAIN.C: 466: }
  1987  023D  2A4B               	goto	l7749
  1988  023E                     l7747:	
  1989                           
  1990                           ;MAIN.C: 467: else {_delay((unsigned long)((800)*(8000000/4000.0)));}
  1991  023E  3009               	movlw	9
  1992  023F  00D4               	movwf	??_main+2
  1993  0240  301E               	movlw	30
  1994  0241  00D3               	movwf	??_main+1
  1995  0242  30EB               	movlw	235
  1996  0243  00D2               	movwf	??_main
  1997  0244                     u2377:	
  1998  0244  0BD2               	decfsz	??_main,f
  1999  0245  2A44               	goto	u2377
  2000  0246  0BD3               	decfsz	??_main+1,f
  2001  0247  2A44               	goto	u2377
  2002  0248  0BD4               	decfsz	??_main+2,f
  2003  0249  2A44               	goto	u2377
  2004  024A  0064               	clrwdt
  2005  024B                     l7749:	
  2006                           
  2007                           ;MAIN.C: 470: timeTick++;
  2008  024B  1283               	bcf	3,5	;RP0=0, select bank0
  2009  024C  0ADE               	incf	_timeTick,f
  2010  024D  1903               	skipnz
  2011  024E  0ADF               	incf	_timeTick+1,f
  2012  024F  28AA               	goto	l7573
  2013  0250                     __end_of_main:	
  2014                           
  2015                           	psect	swtext1
  2016  0600                     __pswtext1:	
  2017  0600                     S7787:	
  2018  0600  28FE               	ljmp	l7609
  2019  0601  28C3               	ljmp	l7587
  2020  0602  28C3               	ljmp	l7587
  2021  0603  294C               	ljmp	l7651
  2022  0604  2994               	ljmp	l4191
  2023  0605  296A               	ljmp	l7667
  2024  0606  2923               	ljmp	l7627
  2025  0607  28C3               	ljmp	l7587
  2026                           
  2027                           	psect	text560
  2028  046B                     __ptext560:	
  2029 ;; =============== function _main ends ============
  2030                           
  2031                           
  2032 ;; *************** function _id_clear *****************
  2033 ;; Defined at:
  2034 ;;		line 135 in file "MAIN.C"
  2035 ;; Parameters:    Size  Location     Type
  2036 ;;  idMin           1    wreg     unsigned char 
  2037 ;;  idMax           1    4[BANK0 ] unsigned char 
  2038 ;; Auto vars:     Size  Location     Type
  2039 ;;  idMin           1   10[BANK0 ] unsigned char 
  2040 ;;  tmp             5    5[BANK0 ] unsigned char [5]
  2041 ;; Return value:  Size  Location     Type
  2042 ;;		None               void
  2043 ;; Registers used:
  2044 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2045 ;; Tracked objects:
  2046 ;;		On entry : 20/0
  2047 ;;		On exit  : 20/0
  2048 ;;		Unchanged: 0/0
  2049 ;; Data sizes:     COMMON   BANK0   BANK1
  2050 ;;      Params:         0       1       0
  2051 ;;      Locals:         0       6       0
  2052 ;;      Temps:          0       0       0
  2053 ;;      Totals:         0       7       0
  2054 ;;Total ram usage:        7 bytes
  2055 ;; Hardware stack levels used:    1
  2056 ;; Hardware stack levels required when called:    4
  2057 ;; This function calls:
  2058 ;;		_id_replate
  2059 ;; This function is called by:
  2060 ;;		_main
  2061 ;; This function uses a non-reentrant model
  2062 ;;
  2063  046B                     _id_clear:	
  2064                           
  2065                           ; Regs used in _id_clear: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2066                           ;id_clear@idMin stored from wreg
  2067  046B  00C8               	movwf	id_clear@idMin
  2068                           
  2069                           ;MAIN.C: 136: unsigned char tmp[5] = {0xff, 0xff, 0xff, 0xff, 0xff};
  2070  046C  3043               	movlw	id_clear@tmp& (0+255)
  2071  046D  0084               	movwf	4
  2072  046E  0820               	movf	id_clear@F1108,w
  2073  046F  1383               	bcf	3,7	;select IRP bank0
  2074  0470  0080               	movwf	0
  2075  0471  0A84               	incf	4,f
  2076  0472  0821               	movf	id_clear@F1108+1,w
  2077  0473  0080               	movwf	0
  2078  0474  0A84               	incf	4,f
  2079  0475  0822               	movf	id_clear@F1108+2,w
  2080  0476  0080               	movwf	0
  2081  0477  0A84               	incf	4,f
  2082  0478  0823               	movf	id_clear@F1108+3,w
  2083  0479  0080               	movwf	0
  2084  047A  0A84               	incf	4,f
  2085  047B  0824               	movf	id_clear@F1108+4,w
  2086  047C  0080               	movwf	0
  2087  047D                     l7503:	
  2088  047D  0848               	movf	id_clear@idMin,w
  2089  047E  0242               	subwf	id_clear@idMax,w
  2090  047F  1C03               	btfss	3,0
  2091  0480  0008               	return
  2092                           
  2093                           ;MAIN.C: 138: id_replate(idMin, tmp, buffTag);
  2094  0481  3043               	movlw	id_clear@tmp& (0+255)
  2095  0482  00BE               	movwf	?_id_replate
  2096  0483  3025               	movlw	_buffTag& (0+255)
  2097  0484  00BF               	movwf	?_id_replate+1
  2098  0485  0848               	movf	id_clear@idMin,w
  2099  0486  239A               	fcall	_id_replate
  2100  0487  1283               	bcf	3,5	;RP0=0, select bank0
  2101  0488  0AC8               	incf	id_clear@idMin,f
  2102  0489  2C7D               	goto	l7503
  2103  048A                     __end_of_id_clear:	
  2104                           
  2105                           	psect	text561
  2106  039A                     __ptext561:	
  2107 ;; =============== function _id_clear ends ============
  2108                           
  2109                           
  2110 ;; *************** function _id_replate *****************
  2111 ;; Defined at:
  2112 ;;		line 121 in file "MAIN.C"
  2113 ;; Parameters:    Size  Location     Type
  2114 ;;  id              1    wreg     unsigned char 
  2115 ;;  Cont            1    0[BANK0 ] PTR unsigned char 
  2116 ;;		 -> id_clear@tmp(5), keyID(5), 
  2117 ;;  buff            1    1[BANK0 ] PTR unsigned char 
  2118 ;;		 -> buffTag(25), 
  2119 ;; Auto vars:     Size  Location     Type
  2120 ;;  id              1   11[COMMON] unsigned char 
  2121 ;; Return value:  Size  Location     Type
  2122 ;;		None               void
  2123 ;; Registers used:
  2124 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2125 ;; Tracked objects:
  2126 ;;		On entry : 20/0
  2127 ;;		On exit  : 0/0
  2128 ;;		Unchanged: 0/0
  2129 ;; Data sizes:     COMMON   BANK0   BANK1
  2130 ;;      Params:         0       2       0
  2131 ;;      Locals:         1       0       0
  2132 ;;      Temps:          0       2       0
  2133 ;;      Totals:         1       4       0
  2134 ;;Total ram usage:        5 bytes
  2135 ;; Hardware stack levels used:    1
  2136 ;; Hardware stack levels required when called:    3
  2137 ;; This function calls:
  2138 ;;		___bmul
  2139 ;;		_eepromWriteBlock
  2140 ;; This function is called by:
  2141 ;;		_id_clear
  2142 ;;		_main
  2143 ;; This function uses a non-reentrant model
  2144 ;;
  2145  039A                     _id_replate:	
  2146                           
  2147                           ; Regs used in _id_replate: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2148                           ;id_replate@id stored from wreg
  2149  039A  00FB               	movwf	id_replate@id
  2150                           
  2151                           ;MAIN.C: 122: id = (id - 1) * 5;
  2152  039B  3005               	movlw	5
  2153  039C  00F2               	movwf	?___bmul
  2154  039D  087B               	movf	id_replate@id,w
  2155  039E  3EFF               	addlw	255
  2156  039F  25AD               	fcall	___bmul
  2157  03A0  00FB               	movwf	id_replate@id
  2158                           
  2159                           ;MAIN.C: 123: {
  2160                           ;MAIN.C: 124: {
  2161                           ;MAIN.C: 125: *(buff + id) = *Cont;
  2162  03A1  083E               	movf	id_replate@Cont,w
  2163  03A2  0084               	movwf	4
  2164  03A3  1383               	bcf	3,7	;select IRP bank0
  2165  03A4  0800               	movf	0,w
  2166  03A5  00C0               	movwf	??_id_replate
  2167  03A6  087B               	movf	id_replate@id,w
  2168  03A7  073F               	addwf	id_replate@buff,w
  2169  03A8  00C1               	movwf	??_id_replate+1
  2170  03A9  0084               	movwf	4
  2171  03AA  0840               	movf	??_id_replate,w
  2172  03AB  0080               	movwf	0
  2173                           
  2174                           ;MAIN.C: 126: *(buff + 1 + id) = *(Cont + 1);
  2175  03AC  083E               	movf	id_replate@Cont,w
  2176  03AD  3E01               	addlw	1
  2177  03AE  23CE               	fcall	PL3	;call to abstracted procedure
  2178  03AF  3E01               	addlw	1
  2179  03B0  0084               	movwf	4
  2180  03B1  0840               	movf	??_id_replate,w
  2181  03B2  0080               	movwf	0
  2182                           
  2183                           ;MAIN.C: 127: *(buff + 2 + id) = *(Cont + 2);
  2184  03B3  083E               	movf	id_replate@Cont,w
  2185  03B4  3E02               	addlw	2
  2186  03B5  23CE               	fcall	PL3	;call to abstracted procedure
  2187  03B6  3E02               	addlw	2
  2188  03B7  0084               	movwf	4
  2189  03B8  0840               	movf	??_id_replate,w
  2190  03B9  0080               	movwf	0
  2191                           
  2192                           ;MAIN.C: 128: *(buff + 3 + id) = *(Cont + 3);
  2193  03BA  083E               	movf	id_replate@Cont,w
  2194  03BB  3E03               	addlw	3
  2195  03BC  23CE               	fcall	PL3	;call to abstracted procedure
  2196  03BD  3E03               	addlw	3
  2197  03BE  0084               	movwf	4
  2198  03BF  0840               	movf	??_id_replate,w
  2199  03C0  0080               	movwf	0
  2200                           
  2201                           ;MAIN.C: 129: *(buff + 4 + id) = *(Cont + 4);
  2202  03C1  083E               	movf	id_replate@Cont,w
  2203  03C2  3E04               	addlw	4
  2204  03C3  23CE               	fcall	PL3	;call to abstracted procedure
  2205  03C4  3E04               	addlw	4
  2206  03C5  0084               	movwf	4
  2207  03C6  0840               	movf	??_id_replate,w
  2208  03C7  0080               	movwf	0
  2209                           
  2210                           ;MAIN.C: 130: }
  2211                           ;MAIN.C: 131: }
  2212                           ;MAIN.C: 133: eepromWriteBlock(0x06, buffTag, 25);
  2213  03C8  3025               	movlw	_buffTag& (0+255)
  2214  03C9  00F6               	movwf	?_eepromWriteBlock
  2215  03CA  3019               	movlw	25
  2216  03CB  00F7               	movwf	?_eepromWriteBlock+1
  2217  03CC  3006               	movlw	6
  2218  03CD  2D6B               	ljmp	_eepromWriteBlock
  2219  03CE                     __end_of_id_replate:	
  2220  03CE                     PL3:	
  2221  03CE  0084               	movwf	4
  2222  03CF  0800               	movf	0,w
  2223  03D0  00C0               	movwf	??_id_replate
  2224  03D1  087B               	movf	id_replate@id,w
  2225  03D2  073F               	addwf	id_replate@buff,w
  2226  03D3  00C1               	movwf	??_id_replate+1
  2227  03D4  0008               	return
  2228                           
  2229                           	psect	text562
  2230  0400                     __ptext562:	
  2231 ;; =============== function _id_replate ends ============
  2232                           
  2233                           
  2234 ;; *************** function _SendNum *****************
  2235 ;; Defined at:
  2236 ;;		line 42 in file "SWUART.C"
  2237 ;; Parameters:    Size  Location     Type
  2238 ;;  num             1    wreg     unsigned char 
  2239 ;; Auto vars:     Size  Location     Type
  2240 ;;  num             1    9[COMMON] unsigned char 
  2241 ;;  nib             1   10[COMMON] unsigned char 
  2242 ;; Return value:  Size  Location     Type
  2243 ;;		None               void
  2244 ;; Registers used:
  2245 ;;		wreg, status,2, status,0, pclath, cstack
  2246 ;; Tracked objects:
  2247 ;;		On entry : 20/0
  2248 ;;		On exit  : 0/0
  2249 ;;		Unchanged: 0/0
  2250 ;; Data sizes:     COMMON   BANK0   BANK1
  2251 ;;      Params:         0       0       0
  2252 ;;      Locals:         6       0       0
  2253 ;;      Temps:          0       0       0
  2254 ;;      Totals:         6       0       0
  2255 ;;Total ram usage:        6 bytes
  2256 ;; Hardware stack levels used:    1
  2257 ;; Hardware stack levels required when called:    2
  2258 ;; This function calls:
  2259 ;;		_swUartSendByte
  2260 ;; This function is called by:
  2261 ;;		_main
  2262 ;; This function uses a non-reentrant model
  2263 ;;
  2264  0400                     _SendNum:	
  2265                           
  2266                           ; Regs used in _SendNum: [wreg+status,2+status,0+pclath+cstack]
  2267                           ;SendNum@num stored from wreg
  2268  0400  00F9               	movwf	SendNum@num
  2269                           
  2270                           ;SWUART.C: 43: unsigned char nib = num>>4;
  2271  0401  0E79               	swapf	SendNum@num,w
  2272  0402  390F               	andlw	15
  2273  0403  00FA               	movwf	SendNum@nib
  2274                           
  2275                           ;SWUART.C: 44: swUartSendByte(nib <10 ? (nib+'0') :(nib+'A'-10));
  2276  0404  300A               	movlw	10
  2277  0405  027A               	subwf	SendNum@nib,w
  2278  0406  087A               	movf	SendNum@nib,w
  2279  0407  00F5               	movwf	_SendNum$5067
  2280  0408  1C03               	skipc
  2281  0409  2C0C               	goto	L6
  2282  040A  3037               	movlw	55
  2283  040B  2C0D               	goto	L4
  2284  040C                     L6:	
  2285  040C  3030               	movlw	48
  2286  040D                     L4:	
  2287  040D  01F6               	clrf	_SendNum$5067+1
  2288  040E  07F5               	addwf	_SendNum$5067,f
  2289  040F  1803               	skipnc
  2290  0410  0AF6               	incf	_SendNum$5067+1,f
  2291  0411  0875               	movf	_SendNum$5067,w
  2292  0412  2426               	fcall	_swUartSendByte
  2293                           
  2294                           ;SWUART.C: 45: nib = num&0x0f;
  2295  0413  0879               	movf	SendNum@num,w
  2296  0414  00FA               	movwf	SendNum@nib
  2297  0415  300F               	movlw	15
  2298  0416  05FA               	andwf	SendNum@nib,f
  2299                           
  2300                           ;SWUART.C: 46: swUartSendByte(nib <10 ? (nib+'0') :(nib+'A'-10));
  2301  0417  300A               	movlw	10
  2302  0418  027A               	subwf	SendNum@nib,w
  2303  0419  087A               	movf	SendNum@nib,w
  2304  041A  00F7               	movwf	_SendNum$5068
  2305  041B  1C03               	skipc
  2306  041C  2C1F               	goto	L7
  2307  041D  3037               	movlw	55
  2308  041E  2C20               	goto	L5
  2309  041F                     L7:	
  2310  041F  3030               	movlw	48
  2311  0420                     L5:	
  2312  0420  01F8               	clrf	_SendNum$5068+1
  2313  0421  07F7               	addwf	_SendNum$5068,f
  2314  0422  1803               	skipnc
  2315  0423  0AF8               	incf	_SendNum$5068+1,f
  2316  0424  0877               	movf	_SendNum$5068,w
  2317  0425  2C26               	ljmp	_swUartSendByte
  2318  0426                     __end_of_SendNum:	
  2319                           
  2320                           	psect	text563
  2321  05D6                     __ptext563:	
  2322 ;; =============== function _SendNum ends ============
  2323                           
  2324                           
  2325 ;; *************** function _swUartSendString *****************
  2326 ;; Defined at:
  2327 ;;		line 35 in file "SWUART.C"
  2328 ;; Parameters:    Size  Location     Type
  2329 ;;  str             1    wreg     PTR unsigned char 
  2330 ;;		 -> STR_1(7), 
  2331 ;; Auto vars:     Size  Location     Type
  2332 ;;  str             1    5[COMMON] PTR unsigned char 
  2333 ;;		 -> STR_1(7), 
  2334 ;; Return value:  Size  Location     Type
  2335 ;;		None               void
  2336 ;; Registers used:
  2337 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2338 ;; Tracked objects:
  2339 ;;		On entry : 20/0
  2340 ;;		On exit  : 0/0
  2341 ;;		Unchanged: 0/0
  2342 ;; Data sizes:     COMMON   BANK0   BANK1
  2343 ;;      Params:         0       0       0
  2344 ;;      Locals:         1       0       0
  2345 ;;      Temps:          0       0       0
  2346 ;;      Totals:         1       0       0
  2347 ;;Total ram usage:        1 bytes
  2348 ;; Hardware stack levels used:    1
  2349 ;; Hardware stack levels required when called:    2
  2350 ;; This function calls:
  2351 ;;		_swUartSendByte
  2352 ;; This function is called by:
  2353 ;;		_main
  2354 ;; This function uses a non-reentrant model
  2355 ;;
  2356  05D6                     _swUartSendString:	
  2357                           
  2358                           ; Regs used in _swUartSendString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2359                           ;swUartSendString@str stored from wreg
  2360  05D6  00F5               	movwf	swUartSendString@str
  2361  05D7                     l7459:	
  2362                           ;SWUART.C: 36: while(*str){
  2363                           
  2364  05D7  0875               	movf	swUartSendString@str,w
  2365  05D8  0084               	movwf	4
  2366  05D9  25C9               	fcall	stringdir
  2367  05DA  3800               	iorlw	0
  2368  05DB  1903               	btfsc	3,2
  2369  05DC  0008               	return
  2370                           
  2371                           ;SWUART.C: 37: swUartSendByte((char)*str);
  2372  05DD  0875               	movf	swUartSendString@str,w
  2373  05DE  0084               	movwf	4
  2374  05DF  25C9               	fcall	stringdir
  2375  05E0  2426               	fcall	_swUartSendByte
  2376                           
  2377                           ;SWUART.C: 38: str++;
  2378  05E1  0AF5               	incf	swUartSendString@str,f
  2379  05E2  2DD7               	goto	l7459
  2380  05E3                     __end_of_swUartSendString:	
  2381                           
  2382                           	psect	text564
  2383  03D5                     __ptext564:	
  2384 ;; =============== function _swUartSendString ends ============
  2385                           
  2386                           
  2387 ;; *************** function _beep *****************
  2388 ;; Defined at:
  2389 ;;		line 28 in file "MAIN.C"
  2390 ;; Parameters:    Size  Location     Type
  2391 ;;  delay           1    wreg     unsigned char 
  2392 ;;  rep             1    8[COMMON] unsigned char 
  2393 ;; Auto vars:     Size  Location     Type
  2394 ;;  delay           1    2[BANK0 ] unsigned char 
  2395 ;;  t               2    0[BANK0 ] unsigned int 
  2396 ;; Return value:  Size  Location     Type
  2397 ;;		None               void
  2398 ;; Registers used:
  2399 ;;		wreg, status,2, status,0, pclath, cstack
  2400 ;; Tracked objects:
  2401 ;;		On entry : 0/0
  2402 ;;		On exit  : 0/0
  2403 ;;		Unchanged: 0/0
  2404 ;; Data sizes:     COMMON   BANK0   BANK1
  2405 ;;      Params:         1       0       0
  2406 ;;      Locals:         0       3       0
  2407 ;;      Temps:          1       0       0
  2408 ;;      Totals:         2       3       0
  2409 ;;Total ram usage:        5 bytes
  2410 ;; Hardware stack levels used:    1
  2411 ;; Hardware stack levels required when called:    2
  2412 ;; This function calls:
  2413 ;;		___wmul
  2414 ;;		_delay_x10ms
  2415 ;; This function is called by:
  2416 ;;		_main
  2417 ;; This function uses a non-reentrant model
  2418 ;;
  2419  03D5                     _beep:	
  2420                           
  2421                           ; Regs used in _beep: [wreg+status,2+status,0+pclath+cstack]
  2422                           ;beep@delay stored from wreg
  2423  03D5  1283               	bcf	3,5	;RP0=0, select bank0
  2424  03D6  00C0               	movwf	beep@delay
  2425  03D7                     l7451:	
  2426                           ;MAIN.C: 29: unsigned int t;
  2427                           ;MAIN.C: 31: while (rep--) {
  2428                           
  2429  03D7  03F8               	decf	beep@rep,f
  2430  03D8  0878               	movf	beep@rep,w
  2431  03D9  3AFF               	xorlw	255
  2432  03DA  1903               	btfsc	3,2
  2433  03DB  0008               	return
  2434                           
  2435                           ;MAIN.C: 32: t = 25 * delay;
  2436  03DC  1283               	bcf	3,5	;RP0=0, select bank0
  2437  03DD  0840               	movf	beep@delay,w
  2438  03DE  00F2               	movwf	?___wmul
  2439  03DF  3019               	movlw	25
  2440  03E0  01F3               	clrf	?___wmul+1
  2441  03E1  00F4               	movwf	?___wmul+2
  2442  03E2  01F5               	clrf	?___wmul+3
  2443  03E3  253B               	fcall	___wmul
  2444  03E4  0873               	movf	?___wmul+1,w
  2445  03E5  00BF               	movwf	beep@t+1
  2446  03E6  0872               	movf	?___wmul,w
  2447  03E7  00BE               	movwf	beep@t
  2448  03E8                     l4130:	
  2449                           ;MAIN.C: 33: while (t--) {
  2450                           
  2451  03E8  3001               	movlw	1
  2452  03E9  1283               	bcf	3,5	;RP0=0, select bank0
  2453  03EA  02BE               	subwf	beep@t,f
  2454  03EB  3000               	movlw	0
  2455  03EC  1C03               	skipc
  2456  03ED  03BF               	decf	beep@t+1,f
  2457  03EE  02BF               	subwf	beep@t+1,f
  2458  03EF  0A3E               	incf	beep@t,w
  2459  03F0  1903               	skipnz
  2460  03F1  0A3F               	incf	beep@t+1,w
  2461  03F2  1903               	btfsc	3,2
  2462  03F3  2BFC               	goto	l4132
  2463                           
  2464                           ;MAIN.C: 34: RA3 = ~RA3;
  2465  03F4  3008               	movlw	8
  2466  03F5  0685               	xorwf	5,f
  2467                           
  2468                           ;MAIN.C: 35: _delay((unsigned long)((428)*(8000000/4000000.0)));
  2469  03F6  30AB               	movlw	171
  2470  03F7  00F9               	movwf	??_beep
  2471  03F8                     u2387:	
  2472  03F8  2BF9               	nop2
  2473  03F9  0BF9               	decfsz	??_beep,f
  2474  03FA  2BF8               	goto	u2387
  2475  03FB  2BE8               	goto	l4130
  2476  03FC                     l4132:	
  2477                           
  2478                           ;MAIN.C: 37: }
  2479                           ;MAIN.C: 38: RA3 = 0;
  2480  03FC  1185               	bcf	5,3
  2481                           
  2482                           ;MAIN.C: 39: delay_x10ms(delay);
  2483  03FD  0840               	movf	beep@delay,w
  2484  03FE  258E               	fcall	_delay_x10ms
  2485  03FF  2BD7               	goto	l7451
  2486  0400                     __end_of_beep:	
  2487                           
  2488                           	psect	text565
  2489  056B                     __ptext565:	
  2490 ;; =============== function _beep ends ============
  2491                           
  2492                           
  2493 ;; *************** function _eepromWriteBlock *****************
  2494 ;; Defined at:
  2495 ;;		line 43 in file "ms82_eeprom.c"
  2496 ;; Parameters:    Size  Location     Type
  2497 ;;  addStart        1    wreg     unsigned char 
  2498 ;;  buff            1    6[COMMON] PTR unsigned char 
  2499 ;;		 -> buffTag(25), 
  2500 ;;  len             1    7[COMMON] unsigned char 
  2501 ;; Auto vars:     Size  Location     Type
  2502 ;;  addStart        1    9[COMMON] unsigned char 
  2503 ;;  i               1   10[COMMON] unsigned char 
  2504 ;; Return value:  Size  Location     Type
  2505 ;;		None               void
  2506 ;; Registers used:
  2507 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2508 ;; Tracked objects:
  2509 ;;		On entry : 120/0
  2510 ;;		On exit  : 0/0
  2511 ;;		Unchanged: 0/0
  2512 ;; Data sizes:     COMMON   BANK0   BANK1
  2513 ;;      Params:         2       0       0
  2514 ;;      Locals:         2       0       0
  2515 ;;      Temps:          1       0       0
  2516 ;;      Totals:         5       0       0
  2517 ;;Total ram usage:        5 bytes
  2518 ;; Hardware stack levels used:    1
  2519 ;; Hardware stack levels required when called:    2
  2520 ;; This function calls:
  2521 ;;		_eepromWriteByte
  2522 ;; This function is called by:
  2523 ;;		_id_replate
  2524 ;; This function uses a non-reentrant model
  2525 ;;
  2526  056B                     _eepromWriteBlock:	
  2527                           
  2528                           ; Regs used in _eepromWriteBlock: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2529                           ;eepromWriteBlock@addStart stored from wreg
  2530  056B  00F9               	movwf	eepromWriteBlock@addStart
  2531                           
  2532                           ;ms82_eeprom.c: 44: unsigned char i;
  2533                           ;ms82_eeprom.c: 45: for(i=0;i<len;i++){
  2534  056C  01FA               	clrf	eepromWriteBlock@i
  2535  056D                     l7441:	
  2536  056D  0877               	movf	eepromWriteBlock@len,w
  2537  056E  027A               	subwf	eepromWriteBlock@i,w
  2538  056F  1803               	btfsc	3,0
  2539  0570  0008               	return
  2540                           
  2541                           ;ms82_eeprom.c: 46: eepromWriteByte(addStart+i,buff[i]);
  2542  0571  087A               	movf	eepromWriteBlock@i,w
  2543  0572  0776               	addwf	eepromWriteBlock@buff,w
  2544  0573  00F8               	movwf	??_eepromWriteBlock
  2545  0574  0084               	movwf	4
  2546  0575  1383               	bcf	3,7	;select IRP bank0
  2547  0576  0800               	movf	0,w
  2548  0577  00F2               	movwf	?_eepromWriteByte
  2549  0578  087A               	movf	eepromWriteBlock@i,w
  2550  0579  0779               	addwf	eepromWriteBlock@addStart,w
  2551  057A  244A               	fcall	_eepromWriteByte
  2552  057B  0AFA               	incf	eepromWriteBlock@i,f
  2553  057C  2D6D               	goto	l7441
  2554  057D                     __end_of_eepromWriteBlock:	
  2555                           
  2556                           	psect	text566
  2557  0426                     __ptext566:	
  2558 ;; =============== function _eepromWriteBlock ends ============
  2559                           
  2560                           
  2561 ;; *************** function _swUartSendByte *****************
  2562 ;; Defined at:
  2563 ;;		line 13 in file "SWUART.C"
  2564 ;; Parameters:    Size  Location     Type
  2565 ;;  dat             1    wreg     unsigned char 
  2566 ;; Auto vars:     Size  Location     Type
  2567 ;;  dat             1    3[COMMON] unsigned char 
  2568 ;;  i               1    4[COMMON] unsigned char 
  2569 ;; Return value:  Size  Location     Type
  2570 ;;		None               void
  2571 ;; Registers used:
  2572 ;;		wreg, status,2, status,0
  2573 ;; Tracked objects:
  2574 ;;		On entry : 0/0
  2575 ;;		On exit  : 0/0
  2576 ;;		Unchanged: 0/0
  2577 ;; Data sizes:     COMMON   BANK0   BANK1
  2578 ;;      Params:         0       0       0
  2579 ;;      Locals:         2       0       0
  2580 ;;      Temps:          1       0       0
  2581 ;;      Totals:         3       0       0
  2582 ;;Total ram usage:        3 bytes
  2583 ;; Hardware stack levels used:    1
  2584 ;; Hardware stack levels required when called:    1
  2585 ;; This function calls:
  2586 ;;		Nothing
  2587 ;; This function is called by:
  2588 ;;		_swUartSendString
  2589 ;;		_SendNum
  2590 ;; This function uses a non-reentrant model
  2591 ;;
  2592  0426                     _swUartSendByte:	
  2593                           
  2594                           ; Regs used in _swUartSendByte: [wreg+status,2+status,0]
  2595                           ;swUartSendByte@dat stored from wreg
  2596  0426  00F3               	movwf	swUartSendByte@dat
  2597  0427  308A               	movlw	138
  2598                           
  2599                           ;SWUART.C: 14: unsigned char i;
  2600                           ;SWUART.C: 16: RA6 = 0;
  2601  0428  1283               	bcf	3,5	;RP0=0, select bank0
  2602  0429  1305               	bcf	5,6
  2603                           
  2604                           ;SWUART.C: 18: _delay((unsigned long)(((2000000/9600))*(8000000/4000000.0)));
  2605  042A  00F2               	movwf	??_swUartSendByte
  2606  042B                     u2397:	
  2607  042B  0BF2               	decfsz	??_swUartSendByte,f
  2608  042C  2C2B               	goto	u2397
  2609  042D  0064               	clrwdt
  2610                           
  2611                           ;SWUART.C: 19: for(i=0;i<8;i++){
  2612  042E  01F4               	clrf	swUartSendByte@i
  2613  042F                     l5031:	
  2614                           
  2615                           ;SWUART.C: 20: RA6 = (dat&1);
  2616  042F  1C73               	btfss	swUartSendByte@dat,0
  2617  0430  2C34               	goto	u1820
  2618  0431  1283               	bcf	3,5	;RP0=0, select bank0
  2619  0432  1705               	bsf	5,6
  2620  0433  2C36               	goto	u1834
  2621  0434                     u1820:	
  2622  0434  1283               	bcf	3,5	;RP0=0, select bank0
  2623  0435  1305               	bcf	5,6
  2624  0436                     u1834:	
  2625  0436  308A               	movlw	138
  2626                           
  2627                           ;SWUART.C: 21: dat=dat>>1;
  2628  0437  1003               	clrc
  2629  0438  0CF3               	rrf	swUartSendByte@dat,f
  2630                           
  2631                           ;SWUART.C: 23: _delay((unsigned long)(((2000000/9600))*(8000000/4000000.0)));
  2632  0439  00F2               	movwf	??_swUartSendByte
  2633  043A                     u2407:	
  2634  043A  0BF2               	decfsz	??_swUartSendByte,f
  2635  043B  2C3A               	goto	u2407
  2636  043C  0064               	clrwdt
  2637  043D  3008               	movlw	8
  2638  043E  0AF4               	incf	swUartSendByte@i,f
  2639  043F  0274               	subwf	swUartSendByte@i,w
  2640  0440  1C03               	skipc
  2641  0441  2C2F               	goto	l5031
  2642  0442  308A               	movlw	138
  2643                           
  2644                           ;SWUART.C: 24: }
  2645                           ;SWUART.C: 29: RA6 = 1;
  2646  0443  1283               	bcf	3,5	;RP0=0, select bank0
  2647  0444  1705               	bsf	5,6
  2648                           
  2649                           ;SWUART.C: 31: _delay((unsigned long)(((2000000/9600))*(8000000/4000000.0)));
  2650  0445  00F2               	movwf	??_swUartSendByte
  2651  0446                     u2417:	
  2652  0446  0BF2               	decfsz	??_swUartSendByte,f
  2653  0447  2C46               	goto	u2417
  2654  0448  0064               	clrwdt
  2655  0449  0008               	return
  2656  044A                     __end_of_swUartSendByte:	
  2657                           
  2658                           	psect	text567
  2659  0505                     __ptext567:	
  2660 ;; =============== function _swUartSendByte ends ============
  2661                           
  2662                           
  2663 ;; *************** function _id_search *****************
  2664 ;; Defined at:
  2665 ;;		line 113 in file "MAIN.C"
  2666 ;; Parameters:    Size  Location     Type
  2667 ;;  id_input        1    wreg     PTR unsigned char 
  2668 ;;		 -> keyID(5), 
  2669 ;;  buff            1   10[COMMON] PTR unsigned char 
  2670 ;;		 -> buffTag(25), 
  2671 ;; Auto vars:     Size  Location     Type
  2672 ;;  id_input        1    0[BANK0 ] PTR unsigned char 
  2673 ;;		 -> keyID(5), 
  2674 ;;  i               1    1[BANK0 ] unsigned char 
  2675 ;; Return value:  Size  Location     Type
  2676 ;;                  1    wreg      unsigned char 
  2677 ;; Registers used:
  2678 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2679 ;; Tracked objects:
  2680 ;;		On entry : 0/0
  2681 ;;		On exit  : 20/0
  2682 ;;		Unchanged: FFEDF/0
  2683 ;; Data sizes:     COMMON   BANK0   BANK1
  2684 ;;      Params:         1       0       0
  2685 ;;      Locals:         0       2       0
  2686 ;;      Temps:          1       0       0
  2687 ;;      Totals:         2       2       0
  2688 ;;Total ram usage:        4 bytes
  2689 ;; Hardware stack levels used:    1
  2690 ;; Hardware stack levels required when called:    2
  2691 ;; This function calls:
  2692 ;;		_comArr
  2693 ;;		___lbdiv
  2694 ;; This function is called by:
  2695 ;;		_main
  2696 ;; This function uses a non-reentrant model
  2697 ;;
  2698  0505                     _id_search:	
  2699                           
  2700                           ; Regs used in _id_search: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2701                           ;id_search@id_input stored from wreg
  2702  0505  1283               	bcf	3,5	;RP0=0, select bank0
  2703  0506  00BE               	movwf	id_search@id_input
  2704                           
  2705                           ;MAIN.C: 114: unsigned char i;
  2706                           ;MAIN.C: 115: for (i = 0; i < 21; i += 5) {
  2707  0507  01BF               	clrf	id_search@i
  2708  0508                     l7403:	
  2709                           
  2710                           ;MAIN.C: 116: if (comArr(id_input, buff + i, 5, 5))
  2711  0508  083F               	movf	id_search@i,w
  2712  0509  077A               	addwf	id_search@buff,w
  2713  050A  00F2               	movwf	?_comArr
  2714  050B  3005               	movlw	5
  2715  050C  00F3               	movwf	?_comArr+1
  2716  050D  00F4               	movwf	?_comArr+2
  2717  050E  083E               	movf	id_search@id_input,w
  2718  050F  24C8               	fcall	_comArr
  2719  0510  3A00               	xorlw	0
  2720                           
  2721                           ;MAIN.C: 117: return i / 5 + 1;
  2722  0511  3005               	movlw	5
  2723  0512  1903               	skipnz
  2724  0513  2D1A               	goto	L8
  2725  0514  00F2               	movwf	?___lbdiv
  2726  0515  083F               	movf	id_search@i,w
  2727  0516  2520               	fcall	___lbdiv
  2728  0517  00FB               	movwf	??_id_search
  2729  0518  0A7B               	incf	??_id_search,w
  2730  0519  0008               	return
  2731  051A                     L8:	
  2732  051A  07BF               	addwf	id_search@i,f
  2733  051B  3015               	movlw	21
  2734  051C  023F               	subwf	id_search@i,w
  2735  051D  1803               	btfsc	3,0
  2736                           
  2737                           ;MAIN.C: 118: }
  2738                           ;MAIN.C: 119: return 255;
  2739  051E  34FF               	retlw	255
  2740  051F  2D08               	goto	l7403
  2741  0520                     __end_of_id_search:	
  2742                           
  2743                           	psect	text568
  2744  058E                     __ptext568:	
  2745 ;; =============== function _id_search ends ============
  2746                           
  2747                           
  2748 ;; *************** function _delay_x10ms *****************
  2749 ;; Defined at:
  2750 ;;		line 24 in file "MAIN.C"
  2751 ;; Parameters:    Size  Location     Type
  2752 ;;  t               1    wreg     unsigned char 
  2753 ;; Auto vars:     Size  Location     Type
  2754 ;;  t               1    4[COMMON] unsigned char 
  2755 ;; Return value:  Size  Location     Type
  2756 ;;		None               void
  2757 ;; Registers used:
  2758 ;;		wreg, status,2, status,0
  2759 ;; Tracked objects:
  2760 ;;		On entry : 20/0
  2761 ;;		On exit  : 0/0
  2762 ;;		Unchanged: 0/0
  2763 ;; Data sizes:     COMMON   BANK0   BANK1
  2764 ;;      Params:         0       0       0
  2765 ;;      Locals:         1       0       0
  2766 ;;      Temps:          2       0       0
  2767 ;;      Totals:         3       0       0
  2768 ;;Total ram usage:        3 bytes
  2769 ;; Hardware stack levels used:    1
  2770 ;; Hardware stack levels required when called:    1
  2771 ;; This function calls:
  2772 ;;		Nothing
  2773 ;; This function is called by:
  2774 ;;		_beep
  2775 ;; This function uses a non-reentrant model
  2776 ;;
  2777  058E                     _delay_x10ms:	
  2778                           
  2779                           ; Regs used in _delay_x10ms: [wreg+status,2+status,0]
  2780                           ;delay_x10ms@t stored from wreg
  2781  058E  00F4               	movwf	delay_x10ms@t
  2782  058F                     l7395:	
  2783                           ;MAIN.C: 25: while (t--)
  2784                           
  2785  058F  03F4               	decf	delay_x10ms@t,f
  2786  0590  0874               	movf	delay_x10ms@t,w
  2787  0591  3AFF               	xorlw	255
  2788  0592  1903               	btfsc	3,2
  2789  0593  0008               	return
  2790                           
  2791                           ;MAIN.C: 26: _delay((unsigned long)((10)*(8000000/4000.0)));
  2792  0594  301A               	movlw	26
  2793  0595  00F3               	movwf	??_delay_x10ms+1
  2794  0596  30F8               	movlw	248
  2795  0597  00F2               	movwf	??_delay_x10ms
  2796  0598                     u2427:	
  2797  0598  0BF2               	decfsz	??_delay_x10ms,f
  2798  0599  2D98               	goto	u2427
  2799  059A  0BF3               	decfsz	??_delay_x10ms+1,f
  2800  059B  2D98               	goto	u2427
  2801  059C  0064               	clrwdt
  2802  059D  2D8F               	goto	l7395
  2803  059E                     __end_of_delay_x10ms:	
  2804                           
  2805                           	psect	text569
  2806  0250                     __ptext569:	
  2807 ;; =============== function _delay_x10ms ends ============
  2808                           
  2809                           
  2810 ;; *************** function _get_RFID *****************
  2811 ;; Defined at:
  2812 ;;		line 21 in file "rfid125.c"
  2813 ;; Parameters:    Size  Location     Type
  2814 ;;		None
  2815 ;; Auto vars:     Size  Location     Type
  2816 ;;  RF_serial_55   11    0[BANK0 ] unsigned char [11]
  2817 ;;  timeOutVal      2   17[BANK0 ] unsigned int 
  2818 ;;  ii              1   19[BANK0 ] unsigned char 
  2819 ;;  flag_RFID_la    1   16[BANK0 ] unsigned char 
  2820 ;;  i               1   15[BANK0 ] unsigned char 
  2821 ;;  j               1   14[BANK0 ] unsigned char 
  2822 ;;  even_row        1   13[BANK0 ] unsigned char 
  2823 ;;  even_col        1   12[BANK0 ] unsigned char 
  2824 ;;  flag_RFID_sy    1   11[BANK0 ] unsigned char 
  2825 ;; Return value:  Size  Location     Type
  2826 ;;                  1    wreg      unsigned char 
  2827 ;; Registers used:
  2828 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2829 ;; Tracked objects:
  2830 ;;		On entry : 20/0
  2831 ;;		On exit  : 20/0
  2832 ;;		Unchanged: FFEDF/0
  2833 ;; Data sizes:     COMMON   BANK0   BANK1
  2834 ;;      Params:         0       0       0
  2835 ;;      Locals:         0      20       0
  2836 ;;      Temps:          1       0       0
  2837 ;;      Totals:         1      20       0
  2838 ;;Total ram usage:       21 bytes
  2839 ;; Hardware stack levels used:    1
  2840 ;; Hardware stack levels required when called:    2
  2841 ;; This function calls:
  2842 ;;		_timerOut
  2843 ;;		___lbdiv
  2844 ;; This function is called by:
  2845 ;;		_main
  2846 ;; This function uses a non-reentrant model
  2847 ;;
  2848  0250                     _get_RFID:	
  2849  0250  3010               	movlw	16
  2850                           
  2851                           ;rfid125.c: 23: unsigned char RF_serial_55bits[11];
  2852                           ;rfid125.c: 24: unsigned int timeOutVal;
  2853                           ;rfid125.c: 25: unsigned char i,ii,j;
  2854                           ;rfid125.c: 26: unsigned char flag_RFID_syn, flag_RFID_last;
  2855                           ;rfid125.c: 27: unsigned char even_row, even_col;
  2856                           ;rfid125.c: 30: flag_RFID_syn = 0;
  2857                           
  2858                           ; Regs used in _get_RFID: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2859  0251  01C9               	clrf	get_RFID@flag_RFID_syn
  2860                           
  2861                           ;rfid125.c: 33: i=16;
  2862  0252  00CD               	movwf	get_RFID@i
  2863  0253                     l7173:	
  2864                           
  2865                           ;rfid125.c: 35: {
  2866                           ;rfid125.c: 36: timeOutVal=timerOut(1,150);
  2867  0253  3096               	movlw	150
  2868  0254  00F2               	movwf	?_timerOut
  2869  0255  3001               	movlw	1
  2870  0256  01F3               	clrf	?_timerOut+1
  2871  0257  24A9               	fcall	_timerOut
  2872                           
  2873                           ;rfid125.c: 37: if(timeOutVal==0) return 0;
  2874  0258  2388               	fcall	PL2	;call to abstracted procedure
  2875  0259  1903               	btfsc	3,2
  2876  025A  3400               	retlw	0
  2877                           
  2878                           ;rfid125.c: 39: timeOutVal=timerOut(0,150);
  2879  025B  3096               	movlw	150
  2880  025C  00F2               	movwf	?_timerOut
  2881  025D  3000               	movlw	0
  2882  025E  01F3               	clrf	?_timerOut+1
  2883  025F  24A9               	fcall	_timerOut
  2884                           
  2885                           ;rfid125.c: 40: if(timeOutVal==0) return 0;
  2886  0260  2388               	fcall	PL2	;call to abstracted procedure
  2887  0261  1903               	btfsc	3,2
  2888  0262  3400               	retlw	0
  2889  0263  3000               	movlw	0
  2890                           
  2891                           ;rfid125.c: 42: i--;
  2892  0264  03CD               	decf	get_RFID@i,f
  2893                           
  2894                           ;rfid125.c: 43: }
  2895                           ;rfid125.c: 44: while(timeOutVal<72 && i>0);
  2896  0265  0250               	subwf	get_RFID@timeOutVal+1,w
  2897  0266  3048               	movlw	72
  2898  0267  1903               	skipnz
  2899  0268  024F               	subwf	get_RFID@timeOutVal,w
  2900  0269  1803               	skipnc
  2901  026A  2A6E               	goto	l2459
  2902  026B  08CD               	movf	get_RFID@i,f
  2903  026C  1D03               	skipz
  2904  026D  2A53               	goto	l7173
  2905  026E                     l2459:	
  2906                           
  2907                           ;rfid125.c: 45: flag_RFID_last = 1;
  2908  026E  01CE               	clrf	get_RFID@flag_RFID_last
  2909  026F  0ACE               	incf	get_RFID@flag_RFID_last,f
  2910                           
  2911                           ;rfid125.c: 46: i = 0;
  2912  0270  01CD               	clrf	get_RFID@i
  2913  0271                     l7261:	
  2914                           ;rfid125.c: 47: while(i<64)
  2915                           
  2916  0271  3040               	movlw	64
  2917  0272  024D               	subwf	get_RFID@i,w
  2918  0273  1803               	btfsc	3,0
  2919  0274  2AC9               	goto	l7263
  2920                           
  2921                           ;rfid125.c: 48: {
  2922                           ;rfid125.c: 49: for(ii=0;ii<9;ii++)
  2923  0275  01D1               	clrf	get_RFID@ii
  2924  0276                     l7203:	
  2925                           
  2926                           ;rfid125.c: 50: {
  2927                           ;rfid125.c: 51: timeOutVal=timerOut(flag_RFID_last,150);
  2928  0276  2395               	fcall	PL5	;call to abstracted procedure
  2929  0277  24A9               	fcall	_timerOut
  2930                           
  2931                           ;rfid125.c: 52: if(timeOutVal==0) return 0;
  2932  0278  2388               	fcall	PL2	;call to abstracted procedure
  2933  0279  1903               	btfsc	3,2
  2934  027A  3400               	retlw	0
  2935                           
  2936                           ;rfid125.c: 54: if(0==flag_RFID_last && timeOutVal<=72 ||
  2937                           ;rfid125.c: 55: 1==flag_RFID_last && timeOutVal>72)
  2938  027B  08CE               	movf	get_RFID@flag_RFID_last,f
  2939  027C  1D03               	skipz
  2940  027D  2A85               	goto	l7215
  2941  027E  3000               	movlw	0
  2942  027F  0250               	subwf	get_RFID@timeOutVal+1,w
  2943  0280  3049               	movlw	73
  2944  0281  1903               	skipnz
  2945  0282  024F               	subwf	get_RFID@timeOutVal,w
  2946  0283  1C03               	skipc
  2947  0284  2A8E               	goto	l7219
  2948  0285                     l7215:	
  2949  0285  0B4E               	decfsz	get_RFID@flag_RFID_last,w
  2950  0286  2A9C               	goto	l7233
  2951  0287  3000               	movlw	0
  2952  0288  0250               	subwf	get_RFID@timeOutVal+1,w
  2953  0289  3049               	movlw	73
  2954  028A  1903               	skipnz
  2955  028B  024F               	subwf	get_RFID@timeOutVal,w
  2956  028C  1C03               	skipc
  2957  028D  2A9C               	goto	l7233
  2958  028E                     l7219:	
  2959                           
  2960                           ;rfid125.c: 56: {
  2961                           ;rfid125.c: 57: if(!flag_RFID_last)
  2962  028E  08CE               	movf	get_RFID@flag_RFID_last,f
  2963  028F  1D03               	skipz
  2964  0290  2A99               	goto	l7229
  2965                           
  2966                           ;rfid125.c: 58: {
  2967                           ;rfid125.c: 59: timeOutVal=timerOut(1,72);
  2968  0291  3048               	movlw	72
  2969  0292  00F2               	movwf	?_timerOut
  2970  0293  3001               	movlw	1
  2971  0294  01F3               	clrf	?_timerOut+1
  2972  0295  24A9               	fcall	_timerOut
  2973                           
  2974                           ;rfid125.c: 60: if(timeOutVal==0) return 0;
  2975  0296  2388               	fcall	PL2	;call to abstracted procedure
  2976  0297  1903               	btfsc	3,2
  2977  0298  3400               	retlw	0
  2978  0299                     l7229:	
  2979                           
  2980                           ;rfid125.c: 61: }
  2981                           ;rfid125.c: 62: flag_RFID_last = 0;
  2982  0299  01CE               	clrf	get_RFID@flag_RFID_last
  2983                           
  2984                           ;rfid125.c: 63: i++;
  2985  029A  0ACD               	incf	get_RFID@i,f
  2986                           
  2987                           ;rfid125.c: 64: }
  2988  029B  2ABE               	goto	l7253
  2989  029C                     l7233:	
  2990                           
  2991                           ;rfid125.c: 65: else
  2992                           ;rfid125.c: 66: if(0==flag_RFID_last && timeOutVal>72 ||
  2993                           ;rfid125.c: 67: 1==flag_RFID_last && timeOutVal<=72)
  2994  029C  08CE               	movf	get_RFID@flag_RFID_last,f
  2995  029D  1D03               	skipz
  2996  029E  2AA6               	goto	l7237
  2997  029F  3000               	movlw	0
  2998  02A0  0250               	subwf	get_RFID@timeOutVal+1,w
  2999  02A1  3049               	movlw	73
  3000  02A2  1903               	skipnz
  3001  02A3  024F               	subwf	get_RFID@timeOutVal,w
  3002  02A4  1803               	skipnc
  3003  02A5  2AAF               	goto	l7241
  3004  02A6                     l7237:	
  3005  02A6  0B4E               	decfsz	get_RFID@flag_RFID_last,w
  3006  02A7  2ABE               	goto	l7253
  3007  02A8  3000               	movlw	0
  3008  02A9  0250               	subwf	get_RFID@timeOutVal+1,w
  3009  02AA  3049               	movlw	73
  3010  02AB  1903               	skipnz
  3011  02AC  024F               	subwf	get_RFID@timeOutVal,w
  3012  02AD  1803               	skipnc
  3013  02AE  2ABE               	goto	l7253
  3014  02AF                     l7241:	
  3015                           
  3016                           ;rfid125.c: 68: {
  3017                           ;rfid125.c: 69: if(flag_RFID_last)
  3018  02AF  084E               	movf	get_RFID@flag_RFID_last,w
  3019  02B0  1903               	btfsc	3,2
  3020  02B1  2ABA               	goto	l2478
  3021                           
  3022                           ;rfid125.c: 70: {
  3023                           ;rfid125.c: 71: timeOutVal=timerOut(0,72);
  3024  02B2  3048               	movlw	72
  3025  02B3  00F2               	movwf	?_timerOut
  3026  02B4  3000               	movlw	0
  3027  02B5  01F3               	clrf	?_timerOut+1
  3028  02B6  24A9               	fcall	_timerOut
  3029                           
  3030                           ;rfid125.c: 72: if(timeOutVal==0) return 0;
  3031  02B7  2388               	fcall	PL2	;call to abstracted procedure
  3032  02B8  1903               	btfsc	3,2
  3033  02B9  3400               	retlw	0
  3034  02BA                     l2478:	
  3035                           
  3036                           ;rfid125.c: 73: }
  3037                           ;rfid125.c: 74: flag_RFID_last = 1;
  3038  02BA  01CE               	clrf	get_RFID@flag_RFID_last
  3039  02BB  0ACE               	incf	get_RFID@flag_RFID_last,f
  3040                           
  3041                           ;rfid125.c: 75: i++;
  3042  02BC  0ACD               	incf	get_RFID@i,f
  3043                           
  3044                           ;rfid125.c: 77: break;
  3045  02BD  2AC3               	goto	l7257
  3046  02BE                     l7253:	
  3047  02BE  3009               	movlw	9
  3048  02BF  0AD1               	incf	get_RFID@ii,f
  3049  02C0  0251               	subwf	get_RFID@ii,w
  3050  02C1  1C03               	skipc
  3051  02C2  2A76               	goto	l7203
  3052  02C3                     l7257:	
  3053                           
  3054                           ;rfid125.c: 78: }
  3055                           ;rfid125.c: 80: }
  3056                           ;rfid125.c: 81: if(9==ii)
  3057  02C3  0851               	movf	get_RFID@ii,w
  3058  02C4  3A09               	xorlw	9
  3059  02C5  1D03               	skipz
  3060  02C6  2A71               	goto	l7261
  3061                           
  3062                           ;rfid125.c: 82: {
  3063                           ;rfid125.c: 83: flag_RFID_syn = 1;
  3064  02C7  01C9               	clrf	get_RFID@flag_RFID_syn
  3065  02C8  0AC9               	incf	get_RFID@flag_RFID_syn,f
  3066  02C9                     l7263:	
  3067                           ;rfid125.c: 84: break;
  3068                           
  3069                           
  3070                           ;rfid125.c: 85: }
  3071                           ;rfid125.c: 86: }
  3072                           ;rfid125.c: 88: if(!flag_RFID_syn)
  3073  02C9  08C9               	movf	get_RFID@flag_RFID_syn,f
  3074  02CA  1903               	btfsc	3,2
  3075  02CB  3400               	retlw	0
  3076                           
  3077                           ;rfid125.c: 91: }
  3078                           ;rfid125.c: 92: for(ii=0;ii<55;ii++)
  3079  02CC  01D1               	clrf	get_RFID@ii
  3080  02CD                     l7275:	
  3081                           
  3082                           ;rfid125.c: 93: {
  3083                           ;rfid125.c: 94: i = ii/5;
  3084  02CD  3005               	movlw	5
  3085  02CE  00F2               	movwf	?___lbdiv
  3086  02CF  0851               	movf	get_RFID@ii,w
  3087  02D0  2520               	fcall	___lbdiv
  3088  02D1  00CD               	movwf	get_RFID@i
  3089                           
  3090                           ;rfid125.c: 95: timeOutVal=timerOut(flag_RFID_last,150);
  3091  02D2  2395               	fcall	PL5	;call to abstracted procedure
  3092  02D3  24A9               	fcall	_timerOut
  3093                           
  3094                           ;rfid125.c: 96: if(timeOutVal==0) return 0;
  3095  02D4  2388               	fcall	PL2	;call to abstracted procedure
  3096  02D5  1903               	btfsc	3,2
  3097  02D6  3400               	retlw	0
  3098                           
  3099                           ;rfid125.c: 98: if(0==flag_RFID_last && timeOutVal<=72 ||
  3100                           ;rfid125.c: 99: 1==flag_RFID_last && timeOutVal>72)
  3101  02D7  08CE               	movf	get_RFID@flag_RFID_last,f
  3102  02D8  1D03               	skipz
  3103  02D9  2AE1               	goto	l7289
  3104  02DA  3000               	movlw	0
  3105  02DB  0250               	subwf	get_RFID@timeOutVal+1,w
  3106  02DC  3049               	movlw	73
  3107  02DD  1903               	skipnz
  3108  02DE  024F               	subwf	get_RFID@timeOutVal,w
  3109  02DF  1C03               	skipc
  3110  02E0  2AEA               	goto	l7293
  3111  02E1                     l7289:	
  3112  02E1  0B4E               	decfsz	get_RFID@flag_RFID_last,w
  3113  02E2  2AFC               	goto	l7309
  3114  02E3  3000               	movlw	0
  3115  02E4  0250               	subwf	get_RFID@timeOutVal+1,w
  3116  02E5  3049               	movlw	73
  3117  02E6  1903               	skipnz
  3118  02E7  024F               	subwf	get_RFID@timeOutVal,w
  3119  02E8  1C03               	skipc
  3120  02E9  2AFC               	goto	l7309
  3121  02EA                     l7293:	
  3122                           
  3123                           ;rfid125.c: 100: {
  3124                           ;rfid125.c: 101: if(!flag_RFID_last)
  3125  02EA  08CE               	movf	get_RFID@flag_RFID_last,f
  3126  02EB  1D03               	skipz
  3127  02EC  2AF5               	goto	l7303
  3128                           
  3129                           ;rfid125.c: 102: {
  3130                           ;rfid125.c: 103: timeOutVal=timerOut(1,72);
  3131  02ED  3048               	movlw	72
  3132  02EE  00F2               	movwf	?_timerOut
  3133  02EF  3001               	movlw	1
  3134  02F0  01F3               	clrf	?_timerOut+1
  3135  02F1  24A9               	fcall	_timerOut
  3136                           
  3137                           ;rfid125.c: 104: if(timeOutVal==0) return 0;
  3138  02F2  2388               	fcall	PL2	;call to abstracted procedure
  3139  02F3  1903               	btfsc	3,2
  3140  02F4  3400               	retlw	0
  3141  02F5                     l7303:	
  3142                           
  3143                           ;rfid125.c: 105: }
  3144                           ;rfid125.c: 106: flag_RFID_last = 0;
  3145  02F5  01CE               	clrf	get_RFID@flag_RFID_last
  3146                           
  3147                           ;rfid125.c: 107: RF_serial_55bits[i] <<= 1;
  3148  02F6  238E               	fcall	PL4	;call to abstracted procedure
  3149                           
  3150                           ;rfid125.c: 108: RF_serial_55bits[i] |= 0x01;
  3151  02F7  084D               	movf	get_RFID@i,w
  3152  02F8  3E3E               	addlw	get_RFID@RF_serial_55bits& (0+255)
  3153  02F9  0084               	movwf	4
  3154  02FA  1400               	bsf	0,0
  3155                           
  3156                           ;rfid125.c: 109: }
  3157  02FB  2B1D               	goto	l7329
  3158  02FC                     l7309:	
  3159                           
  3160                           ;rfid125.c: 110: else
  3161                           ;rfid125.c: 111: if(0==flag_RFID_last && timeOutVal>72 ||
  3162                           ;rfid125.c: 112: 1==flag_RFID_last && timeOutVal<=72)
  3163  02FC  08CE               	movf	get_RFID@flag_RFID_last,f
  3164  02FD  1D03               	skipz
  3165  02FE  2B06               	goto	l7313
  3166  02FF  3000               	movlw	0
  3167  0300  0250               	subwf	get_RFID@timeOutVal+1,w
  3168  0301  3049               	movlw	73
  3169  0302  1903               	skipnz
  3170  0303  024F               	subwf	get_RFID@timeOutVal,w
  3171  0304  1803               	skipnc
  3172  0305  2B0F               	goto	l7317
  3173  0306                     l7313:	
  3174  0306  0B4E               	decfsz	get_RFID@flag_RFID_last,w
  3175  0307  2B1D               	goto	l7329
  3176  0308  3000               	movlw	0
  3177  0309  0250               	subwf	get_RFID@timeOutVal+1,w
  3178  030A  3049               	movlw	73
  3179  030B  1903               	skipnz
  3180  030C  024F               	subwf	get_RFID@timeOutVal,w
  3181  030D  1803               	skipnc
  3182  030E  2B1D               	goto	l7329
  3183  030F                     l7317:	
  3184                           
  3185                           ;rfid125.c: 113: {
  3186                           ;rfid125.c: 114: if(flag_RFID_last)
  3187  030F  084E               	movf	get_RFID@flag_RFID_last,w
  3188  0310  1903               	btfsc	3,2
  3189  0311  2B1A               	goto	l2499
  3190                           
  3191                           ;rfid125.c: 115: {
  3192                           ;rfid125.c: 116: timeOutVal=timerOut(0,150);
  3193  0312  3096               	movlw	150
  3194  0313  00F2               	movwf	?_timerOut
  3195  0314  3000               	movlw	0
  3196  0315  01F3               	clrf	?_timerOut+1
  3197  0316  24A9               	fcall	_timerOut
  3198                           
  3199                           ;rfid125.c: 117: if(timeOutVal==0) return 0;
  3200  0317  2388               	fcall	PL2	;call to abstracted procedure
  3201  0318  1903               	btfsc	3,2
  3202  0319  3400               	retlw	0
  3203  031A                     l2499:	
  3204                           
  3205                           ;rfid125.c: 118: }
  3206                           ;rfid125.c: 119: flag_RFID_last = 1;
  3207  031A  01CE               	clrf	get_RFID@flag_RFID_last
  3208  031B  0ACE               	incf	get_RFID@flag_RFID_last,f
  3209                           
  3210                           ;rfid125.c: 120: RF_serial_55bits[i] <<= 1;
  3211  031C  238E               	fcall	PL4	;call to abstracted procedure
  3212  031D                     l7329:	
  3213  031D  3037               	movlw	55
  3214  031E  0AD1               	incf	get_RFID@ii,f
  3215  031F  0251               	subwf	get_RFID@ii,w
  3216  0320  1C03               	skipc
  3217  0321  2ACD               	goto	l7275
  3218                           
  3219                           ;rfid125.c: 121: }
  3220                           ;rfid125.c: 122: }
  3221                           ;rfid125.c: 123: if(55==ii)
  3222  0322  0851               	movf	get_RFID@ii,w
  3223  0323  3A37               	xorlw	55
  3224  0324  1D03               	skipz
  3225  0325  3400               	retlw	0
  3226                           
  3227                           ;rfid125.c: 124: {
  3228                           ;rfid125.c: 125: even_col = 0;
  3229  0326  01CA               	clrf	get_RFID@even_col
  3230                           
  3231                           ;rfid125.c: 126: for(ii=0;ii<10;ii++)
  3232  0327  01D1               	clrf	get_RFID@ii
  3233  0328                     l7341:	
  3234                           
  3235                           ;rfid125.c: 127: {
  3236                           ;rfid125.c: 128: even_row = (RF_serial_55bits[ii] & 0x01);
  3237  0328  0851               	movf	get_RFID@ii,w
  3238  0329  3E3E               	addlw	get_RFID@RF_serial_55bits& (0+255)
  3239  032A  0084               	movwf	4
  3240  032B  1383               	bcf	3,7	;select IRP bank0
  3241  032C  0800               	movf	0,w
  3242  032D  00CB               	movwf	get_RFID@even_row
  3243  032E  3001               	movlw	1
  3244  032F  05CB               	andwf	get_RFID@even_row,f
  3245                           
  3246                           ;rfid125.c: 129: for(j=1;j<5;j++)
  3247  0330  01CC               	clrf	get_RFID@j
  3248  0331  0ACC               	incf	get_RFID@j,f
  3249  0332                     l7351:	
  3250                           
  3251                           ;rfid125.c: 130: {
  3252                           ;rfid125.c: 131: even_row = even_row ^ ((RF_serial_55bits[ii]>>j) & 0x01);
  3253  0332  0851               	movf	get_RFID@ii,w
  3254  0333  3E3E               	addlw	get_RFID@RF_serial_55bits& (0+255)
  3255  0334  0084               	movwf	4
  3256  0335  0800               	movf	0,w
  3257  0336  00F7               	movwf	??_get_RFID
  3258  0337  0A4C               	incf	get_RFID@j,w
  3259  0338  2B3B               	goto	u1724
  3260  0339                     u1725:	
  3261  0339  1003               	clrc
  3262  033A  0CF7               	rrf	??_get_RFID,f
  3263  033B                     u1724:	
  3264  033B  3EFF               	addlw	-1
  3265  033C  1D03               	skipz
  3266  033D  2B39               	goto	u1725
  3267  033E  0877               	movf	??_get_RFID,w
  3268  033F  3901               	andlw	1
  3269  0340  06CB               	xorwf	get_RFID@even_row,f
  3270  0341  3005               	movlw	5
  3271  0342  0ACC               	incf	get_RFID@j,f
  3272  0343  024C               	subwf	get_RFID@j,w
  3273  0344  1C03               	skipc
  3274  0345  2B32               	goto	l7351
  3275                           
  3276                           ;rfid125.c: 132: }
  3277                           ;rfid125.c: 133: if(even_row & 0x01)
  3278  0346  184B               	btfsc	get_RFID@even_row,0
  3279  0347  3400               	retlw	0
  3280                           
  3281                           ;rfid125.c: 136: }
  3282                           ;rfid125.c: 138: RF_serial_55bits[ii] <<= 3;
  3283  0348  0851               	movf	get_RFID@ii,w
  3284  0349  3E3E               	addlw	get_RFID@RF_serial_55bits& (0+255)
  3285  034A  0084               	movwf	4
  3286  034B  0D80               	rlf	0,f
  3287  034C  0D80               	rlf	0,f
  3288  034D  0D00               	rlf	0,w
  3289  034E  39F8               	andlw	248
  3290  034F  0080               	movwf	0
  3291                           
  3292                           ;rfid125.c: 140: i = RF_serial_55bits[ii];
  3293  0350  0851               	movf	get_RFID@ii,w
  3294  0351  3E3E               	addlw	get_RFID@RF_serial_55bits& (0+255)
  3295  0352  0084               	movwf	4
  3296  0353  0800               	movf	0,w
  3297  0354  00CD               	movwf	get_RFID@i
  3298                           
  3299                           ;rfid125.c: 141: if( 0==ii%2 )
  3300  0355  1851               	btfsc	get_RFID@ii,0
  3301  0356  2B64               	goto	l7367
  3302                           
  3303                           ;rfid125.c: 142: {
  3304                           ;rfid125.c: 143: keyID[ii/2] = (i & 0xF0);
  3305  0357  1003               	clrc
  3306  0358  0C51               	rrf	get_RFID@ii,w
  3307  0359  3E62               	addlw	_keyID& (0+255)
  3308  035A  0084               	movwf	4
  3309  035B  084D               	movf	get_RFID@i,w
  3310  035C  0080               	movwf	0
  3311  035D  1003               	clrc
  3312  035E  0C51               	rrf	get_RFID@ii,w
  3313  035F  3E62               	addlw	_keyID& (0+255)
  3314  0360  0084               	movwf	4
  3315  0361  30F0               	movlw	240
  3316  0362  0580               	andwf	0,f
  3317                           
  3318                           ;rfid125.c: 144: }
  3319  0363  2B6E               	goto	l7371
  3320  0364                     l7367:	
  3321  0364  300F               	movlw	15
  3322                           
  3323                           ;rfid125.c: 145: else
  3324                           ;rfid125.c: 146: {
  3325                           ;rfid125.c: 147: i >>=4;
  3326  0365  0ECD               	swapf	get_RFID@i,f
  3327  0366  05CD               	andwf	get_RFID@i,f
  3328                           
  3329                           ;rfid125.c: 148: keyID[ii/2] |= (i & 0x0F);
  3330  0367  1003               	clrc
  3331  0368  0C51               	rrf	get_RFID@ii,w
  3332  0369  3E62               	addlw	_keyID& (0+255)
  3333  036A  0084               	movwf	4
  3334  036B  084D               	movf	get_RFID@i,w
  3335  036C  390F               	andlw	15
  3336  036D  0480               	iorwf	0,f
  3337  036E                     l7371:	
  3338                           
  3339                           ;rfid125.c: 149: }
  3340                           ;rfid125.c: 150: even_col ^= RF_serial_55bits[ii];
  3341  036E  0851               	movf	get_RFID@ii,w
  3342  036F  3E3E               	addlw	get_RFID@RF_serial_55bits& (0+255)
  3343  0370  0084               	movwf	4
  3344  0371  0800               	movf	0,w
  3345  0372  06CA               	xorwf	get_RFID@even_col,f
  3346  0373  300A               	movlw	10
  3347  0374  0AD1               	incf	get_RFID@ii,f
  3348  0375  0251               	subwf	get_RFID@ii,w
  3349  0376  1C03               	skipc
  3350  0377  2B28               	goto	l7341
  3351                           
  3352                           ;rfid125.c: 151: }
  3353                           ;rfid125.c: 152: RF_serial_55bits[10] <<= 3;
  3354  0378  0DC8               	rlf	get_RFID@RF_serial_55bits+10,f
  3355  0379  0DC8               	rlf	get_RFID@RF_serial_55bits+10,f
  3356  037A  0D48               	rlf	get_RFID@RF_serial_55bits+10,w
  3357  037B  39F8               	andlw	248
  3358  037C  00C8               	movwf	get_RFID@RF_serial_55bits+10
  3359  037D  30F0               	movlw	240
  3360                           
  3361                           ;rfid125.c: 153: keyID[0] =0x00;
  3362  037E  01E2               	clrf	_keyID
  3363                           
  3364                           ;rfid125.c: 154: if(((RF_serial_55bits[10] & 0xf0)==(even_col & 0xf0)) && (0==(RF_serial
      +                          _55bits[10]&0x08)))
  3365  037F  054A               	andwf	get_RFID@even_col,w
  3366  0380  00F7               	movwf	??_get_RFID
  3367  0381  0848               	movf	get_RFID@RF_serial_55bits+10,w
  3368  0382  39F0               	andlw	240
  3369  0383  0677               	xorwf	??_get_RFID,w
  3370  0384  1903               	btfsc	3,2
  3371  0385  19C8               	btfsc	get_RFID@RF_serial_55bits+10,3
  3372  0386  3400               	retlw	0
  3373                           
  3374                           ;rfid125.c: 155: {
  3375                           ;rfid125.c: 157: return 1;
  3376  0387  3401               	retlw	1
  3377  0388                     __end_of_get_RFID:	
  3378  0388                     PL2:	
  3379  0388  0873               	movf	?_timerOut+1,w
  3380  0389  00D0               	movwf	get_RFID@timeOutVal+1
  3381  038A  0872               	movf	?_timerOut,w
  3382  038B  00CF               	movwf	get_RFID@timeOutVal
  3383  038C  0450               	iorwf	get_RFID@timeOutVal+1,w
  3384  038D  0008               	return
  3385  038E                     PL4:	
  3386  038E  084D               	movf	get_RFID@i,w
  3387  038F  3E3E               	addlw	get_RFID@RF_serial_55bits& (0+255)
  3388  0390  0084               	movwf	4
  3389  0391  1383               	bcf	3,7	;select IRP bank0
  3390  0392  1003               	clrc
  3391  0393  0D80               	rlf	0,f
  3392  0394  0008               	return
  3393  0395                     PL5:	
  3394  0395  3096               	movlw	150
  3395  0396  00F2               	movwf	?_timerOut
  3396  0397  01F3               	clrf	?_timerOut+1
  3397  0398  084E               	movf	get_RFID@flag_RFID_last,w
  3398  0399  0008               	return
  3399                           
  3400                           	psect	text570
  3401  044A                     __ptext570:	
  3402 ;; =============== function _get_RFID ends ============
  3403                           
  3404                           
  3405 ;; *************** function _eepromWriteByte *****************
  3406 ;; Defined at:
  3407 ;;		line 26 in file "ms82_eeprom.c"
  3408 ;; Parameters:    Size  Location     Type
  3409 ;;  EEAddr          1    wreg     unsigned char 
  3410 ;;  EEData          1    2[COMMON] unsigned char 
  3411 ;; Auto vars:     Size  Location     Type
  3412 ;;  EEAddr          1    5[COMMON] unsigned char 
  3413 ;; Return value:  Size  Location     Type
  3414 ;;		None               void
  3415 ;; Registers used:
  3416 ;;		wreg
  3417 ;; Tracked objects:
  3418 ;;		On entry : 0/20
  3419 ;;		On exit  : 0/0
  3420 ;;		Unchanged: 0/0
  3421 ;; Data sizes:     COMMON   BANK0   BANK1
  3422 ;;      Params:         1       0       0
  3423 ;;      Locals:         1       0       0
  3424 ;;      Temps:          2       0       0
  3425 ;;      Totals:         4       0       0
  3426 ;;Total ram usage:        4 bytes
  3427 ;; Hardware stack levels used:    1
  3428 ;; Hardware stack levels required when called:    1
  3429 ;; This function calls:
  3430 ;;		Nothing
  3431 ;; This function is called by:
  3432 ;;		_eepromWriteBlock
  3433 ;;		_main
  3434 ;; This function uses a non-reentrant model
  3435 ;;
  3436  044A                     _eepromWriteByte:	
  3437                           
  3438                           ; Regs used in _eepromWriteByte: [wreg]
  3439                           ;eepromWriteByte@EEAddr stored from wreg
  3440  044A  00F5               	movwf	eepromWriteByte@EEAddr
  3441                           
  3442                           ;ms82_eeprom.c: 27: GIE = 0;
  3443  044B  138B               	bcf	11,7
  3444  044C                     l1597:	
  3445                           ;ms82_eeprom.c: 29: {
  3446                           ;ms82_eeprom.c: 30: while(GIE) asm("clrwdt");
  3447                           
  3448  044C  1F8B               	btfss	11,7
  3449  044D  2C50               	goto	l7159
  3450  044E  0064               	clrwdt	;#
  3451  044F  2C4C               	goto	l1597
  3452  0450                     l7159:	
  3453                           
  3454                           ;ms82_eeprom.c: 31: EEADR = EEAddr;
  3455  0450  0875               	movf	eepromWriteByte@EEAddr,w
  3456  0451  1683               	bsf	3,5	;RP0=1, select bank1
  3457  0452  009B               	movwf	27	;volatile
  3458                           
  3459                           ;ms82_eeprom.c: 32: EEDAT = EEData;
  3460  0453  0872               	movf	eepromWriteByte@EEData,w
  3461  0454  009A               	movwf	26	;volatile
  3462  0455  3034               	movlw	52
  3463                           
  3464                           ;ms82_eeprom.c: 33: EEIF = 0;
  3465  0456  1283               	bcf	3,5	;RP0=0, select bank0
  3466  0457  138C               	bcf	12,7
  3467                           
  3468                           ;ms82_eeprom.c: 34: EECON1 = 0x34;
  3469  0458  1683               	bsf	3,5	;RP0=1, select bank1
  3470  0459  009C               	movwf	28	;volatile
  3471                           
  3472                           ;ms82_eeprom.c: 35: WR = 1;
  3473  045A  141D               	bsf	29,0
  3474  045B                     l1600:	
  3475                           ;ms82_eeprom.c: 36: while(WR) asm("clrwdt");
  3476                           
  3477  045B  1683               	bsf	3,5	;RP0=1, select bank1
  3478  045C  1C1D               	btfss	29,0
  3479  045D  2C60               	goto	l7165
  3480  045E  0064               	clrwdt	;#
  3481  045F  2C5B               	goto	l1600
  3482  0460                     l7165:	
  3483                           
  3484                           ;ms82_eeprom.c: 37: _delay((unsigned long)((2)*(8000000/4000.0)));
  3485  0460  3006               	movlw	6
  3486  0461  00F4               	movwf	??_eepromWriteByte+1
  3487  0462  3030               	movlw	48
  3488  0463  00F3               	movwf	??_eepromWriteByte
  3489  0464                     u2437:	
  3490  0464  0BF3               	decfsz	??_eepromWriteByte,f
  3491  0465  2C64               	goto	u2437
  3492  0466  0BF4               	decfsz	??_eepromWriteByte+1,f
  3493  0467  2C64               	goto	u2437
  3494  0468  0064               	clrwdt
  3495                           
  3496                           ;ms82_eeprom.c: 38: }
  3497                           ;ms82_eeprom.c: 39: GIE = 1;
  3498  0469  178B               	bsf	11,7
  3499  046A  0008               	return
  3500  046B                     __end_of_eepromWriteByte:	
  3501                           
  3502                           	psect	text571
  3503  057D                     __ptext571:	
  3504 ;; =============== function _eepromWriteByte ends ============
  3505                           
  3506                           
  3507 ;; *************** function _eepromReadBlock *****************
  3508 ;; Defined at:
  3509 ;;		line 18 in file "ms82_eeprom.c"
  3510 ;; Parameters:    Size  Location     Type
  3511 ;;  addStart        1    wreg     unsigned char 
  3512 ;;  buff            1    4[COMMON] PTR unsigned char 
  3513 ;;		 -> buffTag(25), 
  3514 ;;  len             1    5[COMMON] unsigned char 
  3515 ;; Auto vars:     Size  Location     Type
  3516 ;;  addStart        1    7[COMMON] unsigned char 
  3517 ;;  i               1    8[COMMON] unsigned char 
  3518 ;; Return value:  Size  Location     Type
  3519 ;;		None               void
  3520 ;; Registers used:
  3521 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3522 ;; Tracked objects:
  3523 ;;		On entry : 0/20
  3524 ;;		On exit  : 0/0
  3525 ;;		Unchanged: FFEDF/0
  3526 ;; Data sizes:     COMMON   BANK0   BANK1
  3527 ;;      Params:         2       0       0
  3528 ;;      Locals:         2       0       0
  3529 ;;      Temps:          1       0       0
  3530 ;;      Totals:         5       0       0
  3531 ;;Total ram usage:        5 bytes
  3532 ;; Hardware stack levels used:    1
  3533 ;; Hardware stack levels required when called:    2
  3534 ;; This function calls:
  3535 ;;		_eepromReadByte
  3536 ;; This function is called by:
  3537 ;;		_main
  3538 ;; This function uses a non-reentrant model
  3539 ;;
  3540  057D                     _eepromReadBlock:	
  3541                           
  3542                           ; Regs used in _eepromReadBlock: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3543                           ;eepromReadBlock@addStart stored from wreg
  3544  057D  00F7               	movwf	eepromReadBlock@addStart
  3545                           
  3546                           ;ms82_eeprom.c: 19: unsigned char i;
  3547                           ;ms82_eeprom.c: 20: for(i=0;i<len;i++){
  3548  057E  01F8               	clrf	eepromReadBlock@i
  3549  057F                     l7155:	
  3550  057F  0875               	movf	eepromReadBlock@len,w
  3551  0580  0278               	subwf	eepromReadBlock@i,w
  3552  0581  1803               	btfsc	3,0
  3553  0582  0008               	return
  3554                           
  3555                           ;ms82_eeprom.c: 21: buff[i] = eepromReadByte(addStart+i);
  3556  0583  0878               	movf	eepromReadBlock@i,w
  3557  0584  0774               	addwf	eepromReadBlock@buff,w
  3558  0585  00F6               	movwf	??_eepromReadBlock
  3559  0586  0084               	movwf	4
  3560  0587  0878               	movf	eepromReadBlock@i,w
  3561  0588  0777               	addwf	eepromReadBlock@addStart,w
  3562  0589  2610               	fcall	_eepromReadByte
  3563  058A  1383               	bcf	3,7	;select IRP bank0
  3564  058B  0080               	movwf	0
  3565  058C  0AF8               	incf	eepromReadBlock@i,f
  3566  058D  2D7F               	goto	l7155
  3567  058E                     __end_of_eepromReadBlock:	
  3568                           
  3569                           	psect	text572
  3570  0608                     __ptext572:	
  3571 ;; =============== function _eepromReadBlock ends ============
  3572                           
  3573                           
  3574 ;; *************** function _sys_init *****************
  3575 ;; Defined at:
  3576 ;;		line 3 in file "sysinit.c"
  3577 ;; Parameters:    Size  Location     Type
  3578 ;;		None
  3579 ;; Auto vars:     Size  Location     Type
  3580 ;;		None
  3581 ;; Return value:  Size  Location     Type
  3582 ;;		None               void
  3583 ;; Registers used:
  3584 ;;		wreg
  3585 ;; Tracked objects:
  3586 ;;		On entry : 0/0
  3587 ;;		On exit  : 20/20
  3588 ;;		Unchanged: 0/0
  3589 ;; Data sizes:     COMMON   BANK0   BANK1
  3590 ;;      Params:         0       0       0
  3591 ;;      Locals:         0       0       0
  3592 ;;      Temps:          0       0       0
  3593 ;;      Totals:         0       0       0
  3594 ;;Total ram usage:        0 bytes
  3595 ;; Hardware stack levels used:    1
  3596 ;; Hardware stack levels required when called:    1
  3597 ;; This function calls:
  3598 ;;		Nothing
  3599 ;; This function is called by:
  3600 ;;		_main
  3601 ;; This function uses a non-reentrant model
  3602 ;;
  3603  0608                     _sys_init:	
  3604                           
  3605                           ;sysinit.c: 21: OSCCON = 0B01100001;
  3606                           
  3607                           ; Regs used in _sys_init: [wreg]
  3608  0608  3061               	movlw	97
  3609  0609  1683               	bsf	3,5	;RP0=1, select bank1
  3610  060A  008F               	movwf	15	;volatile
  3611                           
  3612                           ;sysinit.c: 22: _nop();
  3613  060B  0000               	nop
  3614  060C                     l787:	
  3615                           ;sysinit.c: 28: while(HTS==0);
  3616                           
  3617  060C  1683               	bsf	3,5	;RP0=1, select bank1
  3618  060D  190F               	btfsc	15,2
  3619  060E  0008               	return
  3620  060F  2E0C               	goto	l787
  3621  0610                     __end_of_sys_init:	
  3622                           
  3623                           	psect	text573
  3624  0520                     __ptext573:	
  3625 ;; =============== function _sys_init ends ============
  3626                           
  3627                           
  3628 ;; *************** function ___lbdiv *****************
  3629 ;; Defined at:
  3630 ;;		line 5 in file "D:\OneDrive\SmarRF\MCU\MC82\IDE\ORIGINIDE_V2.0.9\Program Files (x86)\HI-TECH Software\PICC\9.83\sour
      +ces\lbdiv.c"
  3631 ;; Parameters:    Size  Location     Type
  3632 ;;  dividend        1    wreg     unsigned char 
  3633 ;;  divisor         1    2[COMMON] unsigned char 
  3634 ;; Auto vars:     Size  Location     Type
  3635 ;;  dividend        1    3[COMMON] unsigned char 
  3636 ;;  quotient        1    5[COMMON] unsigned char 
  3637 ;;  counter         1    4[COMMON] unsigned char 
  3638 ;; Return value:  Size  Location     Type
  3639 ;;                  1    wreg      unsigned char 
  3640 ;; Registers used:
  3641 ;;		wreg, status,2, status,0
  3642 ;; Tracked objects:
  3643 ;;		On entry : 20/0
  3644 ;;		On exit  : 20/0
  3645 ;;		Unchanged: FFFDF/0
  3646 ;; Data sizes:     COMMON   BANK0   BANK1
  3647 ;;      Params:         1       0       0
  3648 ;;      Locals:         3       0       0
  3649 ;;      Temps:          0       0       0
  3650 ;;      Totals:         4       0       0
  3651 ;;Total ram usage:        4 bytes
  3652 ;; Hardware stack levels used:    1
  3653 ;; Hardware stack levels required when called:    1
  3654 ;; This function calls:
  3655 ;;		Nothing
  3656 ;; This function is called by:
  3657 ;;		_get_RFID
  3658 ;;		_id_search
  3659 ;; This function uses a non-reentrant model
  3660 ;;
  3661  0520                     ___lbdiv:	
  3662                           
  3663                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  3664                           ;___lbdiv@dividend stored from wreg
  3665  0520  00F3               	movwf	___lbdiv@dividend
  3666  0521  01F5               	clrf	___lbdiv@quotient
  3667  0522  0872               	movf	___lbdiv@divisor,w
  3668  0523  1903               	btfsc	3,2
  3669  0524  2D39               	goto	l7141
  3670  0525  01F4               	clrf	___lbdiv@counter
  3671  0526                     l7127:	
  3672  0526  0AF4               	incf	___lbdiv@counter,f
  3673  0527  1BF2               	btfsc	___lbdiv@divisor,7
  3674  0528  2D2C               	goto	l5749
  3675  0529  1003               	clrc
  3676  052A  0DF2               	rlf	___lbdiv@divisor,f
  3677  052B  2D26               	goto	l7127
  3678  052C                     l5749:	
  3679  052C  1003               	clrc
  3680  052D  0DF5               	rlf	___lbdiv@quotient,f
  3681  052E  0872               	movf	___lbdiv@divisor,w
  3682  052F  0273               	subwf	___lbdiv@dividend,w
  3683  0530  1C03               	skipc
  3684  0531  2D36               	goto	L9
  3685  0532  0872               	movf	___lbdiv@divisor,w
  3686  0533  02F3               	subwf	___lbdiv@dividend,f
  3687  0534  1475               	bsf	___lbdiv@quotient,0
  3688  0535  1003               	clrc
  3689  0536                     L9:	
  3690  0536  0CF2               	rrf	___lbdiv@divisor,f
  3691  0537  0BF4               	decfsz	___lbdiv@counter,f
  3692  0538  2D2C               	goto	l5749
  3693  0539                     l7141:	
  3694  0539  0875               	movf	___lbdiv@quotient,w
  3695  053A  0008               	return
  3696  053B                     __end_of___lbdiv:	
  3697                           
  3698                           	psect	text574
  3699  053B                     __ptext574:	
  3700 ;; =============== function ___lbdiv ends ============
  3701                           
  3702                           
  3703 ;; *************** function ___wmul *****************
  3704 ;; Defined at:
  3705 ;;		line 3 in file "D:\OneDrive\SmarRF\MCU\MC82\IDE\ORIGINIDE_V2.0.9\Program Files (x86)\HI-TECH Software\PICC\9.83\sour
      +ces\wmul.c"
  3706 ;; Parameters:    Size  Location     Type
  3707 ;;  multiplier      2    2[COMMON] unsigned int 
  3708 ;;  multiplicand    2    4[COMMON] unsigned int 
  3709 ;; Auto vars:     Size  Location     Type
  3710 ;;  product         2    6[COMMON] unsigned int 
  3711 ;; Return value:  Size  Location     Type
  3712 ;;                  2    2[COMMON] unsigned int 
  3713 ;; Registers used:
  3714 ;;		wreg, status,2, status,0
  3715 ;; Tracked objects:
  3716 ;;		On entry : 20/0
  3717 ;;		On exit  : 20/0
  3718 ;;		Unchanged: FFFDF/0
  3719 ;; Data sizes:     COMMON   BANK0   BANK1
  3720 ;;      Params:         4       0       0
  3721 ;;      Locals:         2       0       0
  3722 ;;      Temps:          0       0       0
  3723 ;;      Totals:         6       0       0
  3724 ;;Total ram usage:        6 bytes
  3725 ;; Hardware stack levels used:    1
  3726 ;; Hardware stack levels required when called:    1
  3727 ;; This function calls:
  3728 ;;		Nothing
  3729 ;; This function is called by:
  3730 ;;		_beep
  3731 ;; This function uses a non-reentrant model
  3732 ;;
  3733  053B                     ___wmul:	
  3734                           
  3735                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3736  053B  01F6               	clrf	___wmul@product
  3737  053C  01F7               	clrf	___wmul@product+1
  3738  053D                     l7107:	
  3739  053D  1C72               	btfss	___wmul@multiplier,0
  3740  053E  2D45               	goto	l7111
  3741  053F  0874               	movf	___wmul@multiplicand,w
  3742  0540  07F6               	addwf	___wmul@product,f
  3743  0541  1803               	skipnc
  3744  0542  0AF7               	incf	___wmul@product+1,f
  3745  0543  0875               	movf	___wmul@multiplicand+1,w
  3746  0544  07F7               	addwf	___wmul@product+1,f
  3747  0545                     l7111:	
  3748  0545  1003               	clrc
  3749  0546  0DF4               	rlf	___wmul@multiplicand,f
  3750  0547  0DF5               	rlf	___wmul@multiplicand+1,f
  3751  0548  1003               	clrc
  3752  0549  0CF3               	rrf	___wmul@multiplier+1,f
  3753  054A  0CF2               	rrf	___wmul@multiplier,f
  3754  054B  0873               	movf	___wmul@multiplier+1,w
  3755  054C  0472               	iorwf	___wmul@multiplier,w
  3756  054D  1D03               	skipz
  3757  054E  2D3D               	goto	l7107
  3758  054F  0877               	movf	___wmul@product+1,w
  3759  0550  00F3               	movwf	?___wmul+1
  3760  0551  0876               	movf	___wmul@product,w
  3761  0552  00F2               	movwf	?___wmul
  3762  0553  0008               	return
  3763  0554                     __end_of___wmul:	
  3764                           
  3765                           	psect	text575
  3766  05AD                     __ptext575:	
  3767 ;; =============== function ___wmul ends ============
  3768                           
  3769                           
  3770 ;; *************** function ___bmul *****************
  3771 ;; Defined at:
  3772 ;;		line 3 in file "D:\OneDrive\SmarRF\MCU\MC82\IDE\ORIGINIDE_V2.0.9\Program Files (x86)\HI-TECH Software\PICC\9.83\sour
      +ces\bmul.c"
  3773 ;; Parameters:    Size  Location     Type
  3774 ;;  multiplier      1    wreg     unsigned char 
  3775 ;;  multiplicand    1    2[COMMON] unsigned char 
  3776 ;; Auto vars:     Size  Location     Type
  3777 ;;  multiplier      1    4[COMMON] unsigned char 
  3778 ;;  product         1    3[COMMON] unsigned char 
  3779 ;; Return value:  Size  Location     Type
  3780 ;;                  1    wreg      unsigned char 
  3781 ;; Registers used:
  3782 ;;		wreg, status,2, status,0
  3783 ;; Tracked objects:
  3784 ;;		On entry : 20/0
  3785 ;;		On exit  : 20/0
  3786 ;;		Unchanged: FFFDF/0
  3787 ;; Data sizes:     COMMON   BANK0   BANK1
  3788 ;;      Params:         1       0       0
  3789 ;;      Locals:         2       0       0
  3790 ;;      Temps:          0       0       0
  3791 ;;      Totals:         3       0       0
  3792 ;;Total ram usage:        3 bytes
  3793 ;; Hardware stack levels used:    1
  3794 ;; Hardware stack levels required when called:    1
  3795 ;; This function calls:
  3796 ;;		Nothing
  3797 ;; This function is called by:
  3798 ;;		_id_replate
  3799 ;; This function uses a non-reentrant model
  3800 ;;
  3801  05AD                     ___bmul:	
  3802                           
  3803                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  3804                           ;___bmul@multiplier stored from wreg
  3805  05AD  00F4               	movwf	___bmul@multiplier
  3806  05AE  01F3               	clrf	___bmul@product
  3807  05AF                     l7091:	
  3808  05AF  0872               	movf	___bmul@multiplicand,w
  3809  05B0  1874               	btfsc	___bmul@multiplier,0
  3810  05B1  07F3               	addwf	___bmul@product,f
  3811  05B2  1003               	clrc
  3812  05B3  0DF2               	rlf	___bmul@multiplicand,f
  3813  05B4  1003               	clrc
  3814  05B5  0CF4               	rrf	___bmul@multiplier,f
  3815  05B6  08F4               	movf	___bmul@multiplier,f
  3816  05B7  1D03               	skipz
  3817  05B8  2DAF               	goto	l7091
  3818  05B9  0873               	movf	___bmul@product,w
  3819  05BA  0008               	return
  3820  05BB                     __end_of___bmul:	
  3821                           
  3822                           	psect	text576
  3823  05EF                     __ptext576:	
  3824 ;; =============== function ___bmul ends ============
  3825                           
  3826                           
  3827 ;; *************** function _setState *****************
  3828 ;; Defined at:
  3829 ;;		line 106 in file "MAIN.C"
  3830 ;; Parameters:    Size  Location     Type
  3831 ;;  stt             1    wreg     unsigned char 
  3832 ;;  _tOut           2    2[COMMON] unsigned int 
  3833 ;; Auto vars:     Size  Location     Type
  3834 ;;  stt             1    4[COMMON] unsigned char 
  3835 ;; Return value:  Size  Location     Type
  3836 ;;		None               void
  3837 ;; Registers used:
  3838 ;;		wreg, status,2
  3839 ;; Tracked objects:
  3840 ;;		On entry : 0/20
  3841 ;;		On exit  : 20/0
  3842 ;;		Unchanged: FFFDF/0
  3843 ;; Data sizes:     COMMON   BANK0   BANK1
  3844 ;;      Params:         2       0       0
  3845 ;;      Locals:         1       0       0
  3846 ;;      Temps:          0       0       0
  3847 ;;      Totals:         3       0       0
  3848 ;;Total ram usage:        3 bytes
  3849 ;; Hardware stack levels used:    1
  3850 ;; Hardware stack levels required when called:    1
  3851 ;; This function calls:
  3852 ;;		Nothing
  3853 ;; This function is called by:
  3854 ;;		_main
  3855 ;; This function uses a non-reentrant model
  3856 ;;
  3857  05EF                     _setState:	
  3858                           
  3859                           ; Regs used in _setState: [wreg+status,2]
  3860                           ;setState@stt stored from wreg
  3861  05EF  00F4               	movwf	setState@stt
  3862                           
  3863                           ;MAIN.C: 108: mtState = stt;
  3864  05F0  1283               	bcf	3,5	;RP0=0, select bank0
  3865  05F1  00E1               	movwf	_mtState
  3866                           
  3867                           ;MAIN.C: 109: timeTick = 0;
  3868  05F2  01DE               	clrf	_timeTick
  3869  05F3  01DF               	clrf	_timeTick+1
  3870                           
  3871                           ;MAIN.C: 110: timeOut = _tOut;
  3872  05F4  0873               	movf	setState@_tOut+1,w
  3873  05F5  00DD               	movwf	_timeOut+1
  3874  05F6  0872               	movf	setState@_tOut,w
  3875  05F7  00DC               	movwf	_timeOut
  3876  05F8  0008               	return
  3877  05F9                     __end_of_setState:	
  3878                           
  3879                           	psect	text577
  3880  048A                     __ptext577:	
  3881 ;; =============== function _setState ends ============
  3882                           
  3883                           
  3884 ;; *************** function _SET_EPWM_ON *****************
  3885 ;; Defined at:
  3886 ;;		line 11 in file "ms82_pwm.c"
  3887 ;; Parameters:    Size  Location     Type
  3888 ;;		None
  3889 ;; Auto vars:     Size  Location     Type
  3890 ;;		None
  3891 ;; Return value:  Size  Location     Type
  3892 ;;		None               void
  3893 ;; Registers used:
  3894 ;;		wreg, status,2
  3895 ;; Tracked objects:
  3896 ;;		On entry : 20/20
  3897 ;;		On exit  : 20/20
  3898 ;;		Unchanged: FFE00/0
  3899 ;; Data sizes:     COMMON   BANK0   BANK1
  3900 ;;      Params:         0       0       0
  3901 ;;      Locals:         0       0       0
  3902 ;;      Temps:          0       0       0
  3903 ;;      Totals:         0       0       0
  3904 ;;Total ram usage:        0 bytes
  3905 ;; Hardware stack levels used:    1
  3906 ;; Hardware stack levels required when called:    1
  3907 ;; This function calls:
  3908 ;;		Nothing
  3909 ;; This function is called by:
  3910 ;;		_main
  3911 ;; This function uses a non-reentrant model
  3912 ;;
  3913  048A                     _SET_EPWM_ON:	
  3914                           
  3915                           ;ms82_pwm.c: 12: TRISC |= 0B00100000;
  3916                           
  3917                           ; Regs used in _SET_EPWM_ON: [wreg+status,2]
  3918  048A  1687               	bsf	7,5	;volatile
  3919                           
  3920                           ;ms82_pwm.c: 13: T2CON0 = 0B00000001;
  3921  048B  3001               	movlw	1
  3922  048C  1283               	bcf	3,5	;RP0=0, select bank0
  3923  048D  0092               	movwf	18	;volatile
  3924                           
  3925                           ;ms82_pwm.c: 14: T2CON1 = 0B00000000;
  3926  048E  1683               	bsf	3,5	;RP0=1, select bank1
  3927  048F  019E               	clrf	30	;volatile
  3928                           
  3929                           ;ms82_pwm.c: 15: PR2H = 0;
  3930  0490  0192               	clrf	18	;volatile
  3931                           
  3932                           ;ms82_pwm.c: 16: PR2L = 7;
  3933  0491  3007               	movlw	7
  3934  0492  0091               	movwf	17	;volatile
  3935                           
  3936                           ;ms82_pwm.c: 17: P1ADTH = 0;
  3937  0493  1283               	bcf	3,5	;RP0=0, select bank0
  3938  0494  0194               	clrf	20	;volatile
  3939                           
  3940                           ;ms82_pwm.c: 18: P1ADTL = 4;
  3941  0495  3004               	movlw	4
  3942  0496  008E               	movwf	14	;volatile
  3943                           
  3944                           ;ms82_pwm.c: 20: P1OE = 0B00000001;
  3945  0497  3001               	movlw	1
  3946  0498  1683               	bsf	3,5	;RP0=1, select bank1
  3947  0499  0090               	movwf	16	;volatile
  3948                           
  3949                           ;ms82_pwm.c: 21: P1POL = 0B00000000;
  3950  049A  0199               	clrf	25	;volatile
  3951                           
  3952                           ;ms82_pwm.c: 22: P1CON = 0B00000000;
  3953  049B  1283               	bcf	3,5	;RP0=0, select bank0
  3954  049C  0196               	clrf	22	;volatile
  3955                           
  3956                           ;ms82_pwm.c: 24: TMR2H = 0;
  3957  049D  0193               	clrf	19	;volatile
  3958                           
  3959                           ;ms82_pwm.c: 25: TMR2L = 0;
  3960  049E  0191               	clrf	17	;volatile
  3961                           
  3962                           ;ms82_pwm.c: 26: TMR2IF = 0;
  3963  049F  108C               	bcf	12,1
  3964                           
  3965                           ;ms82_pwm.c: 27: TMR2ON = 1;
  3966  04A0  1512               	bsf	18,2
  3967  04A1                     l3294:	
  3968                           ;ms82_pwm.c: 28: while(TMR2IF==0) asm("clrwdt");
  3969                           
  3970  04A1  1283               	bcf	3,5	;RP0=0, select bank0
  3971  04A2  188C               	btfsc	12,1
  3972  04A3  2CA6               	goto	l3296
  3973  04A4  0064               	clrwdt	;#
  3974  04A5  2CA1               	goto	l3294
  3975  04A6                     l3296:	
  3976                           
  3977                           ;ms82_pwm.c: 29: TRISC &= 0B11011111;
  3978  04A6  1683               	bsf	3,5	;RP0=1, select bank1
  3979  04A7  1287               	bcf	7,5	;volatile
  3980  04A8  0008               	return
  3981  04A9                     __end_of_SET_EPWM_ON:	
  3982                           
  3983                           	psect	text578
  3984  04A9                     __ptext578:	
  3985 ;; =============== function _SET_EPWM_ON ends ============
  3986                           
  3987                           
  3988 ;; *************** function _timerOut *****************
  3989 ;; Defined at:
  3990 ;;		line 6 in file "rfid125.c"
  3991 ;; Parameters:    Size  Location     Type
  3992 ;;  Logic           1    wreg     unsigned char 
  3993 ;;  time            2    2[COMMON] unsigned int 
  3994 ;; Auto vars:     Size  Location     Type
  3995 ;;  Logic           1    4[COMMON] unsigned char 
  3996 ;;  CurTimer        2    5[COMMON] unsigned int 
  3997 ;; Return value:  Size  Location     Type
  3998 ;;                  2    2[COMMON] unsigned int 
  3999 ;; Registers used:
  4000 ;;		wreg, status,2
  4001 ;; Tracked objects:
  4002 ;;		On entry : 20/0
  4003 ;;		On exit  : 20/0
  4004 ;;		Unchanged: FFFDF/0
  4005 ;; Data sizes:     COMMON   BANK0   BANK1
  4006 ;;      Params:         2       0       0
  4007 ;;      Locals:         3       0       0
  4008 ;;      Temps:          0       0       0
  4009 ;;      Totals:         5       0       0
  4010 ;;Total ram usage:        5 bytes
  4011 ;; Hardware stack levels used:    1
  4012 ;; Hardware stack levels required when called:    1
  4013 ;; This function calls:
  4014 ;;		Nothing
  4015 ;; This function is called by:
  4016 ;;		_get_RFID
  4017 ;; This function uses a non-reentrant model
  4018 ;;
  4019  04A9                     _timerOut:	
  4020                           
  4021                           ; Regs used in _timerOut: [wreg+status,2]
  4022                           ;timerOut@Logic stored from wreg
  4023  04A9  00F4               	movwf	timerOut@Logic
  4024                           
  4025                           ;rfid125.c: 7: unsigned int CurTimer;
  4026                           ;rfid125.c: 8: T0ON = 0;
  4027  04AA  119F               	bcf	31,3
  4028                           
  4029                           ;rfid125.c: 10: TMR0 = 0;
  4030  04AB  0181               	clrf	1	;volatile
  4031                           
  4032                           ;rfid125.c: 11: T0IF = 0;
  4033  04AC  110B               	bcf	11,2
  4034                           
  4035                           ;rfid125.c: 12: T0ON = 1;
  4036  04AD  159F               	bsf	31,3
  4037  04AE                     l7051:	
  4038                           ;rfid125.c: 13: while(RA5==Logic){
  4039                           
  4040  04AE  3000               	movlw	0
  4041  04AF  1A85               	btfsc	5,5
  4042  04B0  3001               	movlw	1
  4043  04B1  0674               	xorwf	timerOut@Logic,w
  4044  04B2  1D03               	btfss	3,2
  4045  04B3  2CC3               	goto	l7053
  4046                           
  4047                           ;rfid125.c: 14: CurTimer= (0 <<8 )| TMR0;
  4048  04B4  01F5               	clrf	timerOut@CurTimer
  4049  04B5  01F6               	clrf	timerOut@CurTimer+1
  4050  04B6  0801               	movf	1,w	;volatile
  4051  04B7  04F5               	iorwf	timerOut@CurTimer,f
  4052                           
  4053                           ;rfid125.c: 15: if(CurTimer>time)
  4054  04B8  0876               	movf	timerOut@CurTimer+1,w
  4055  04B9  0273               	subwf	timerOut@time+1,w
  4056  04BA  1D03               	skipz
  4057  04BB  2CBE               	goto	u1215
  4058  04BC  0875               	movf	timerOut@CurTimer,w
  4059  04BD  0272               	subwf	timerOut@time,w
  4060  04BE                     u1215:	
  4061  04BE  1803               	skipnc
  4062  04BF  2CAE               	goto	l7051
  4063                           
  4064                           ;rfid125.c: 16: return 0;
  4065  04C0  01F2               	clrf	?_timerOut
  4066  04C1  01F3               	clrf	?_timerOut+1
  4067  04C2  0008               	return
  4068  04C3                     l7053:	
  4069                           
  4070                           ;rfid125.c: 17: }
  4071                           ;rfid125.c: 18: return CurTimer;
  4072  04C3  0876               	movf	timerOut@CurTimer+1,w
  4073  04C4  00F3               	movwf	?_timerOut+1
  4074  04C5  0875               	movf	timerOut@CurTimer,w
  4075  04C6  00F2               	movwf	?_timerOut
  4076  04C7  0008               	return
  4077  04C8                     __end_of_timerOut:	
  4078                           
  4079                           	psect	text579
  4080  04C8                     __ptext579:	
  4081 ;; =============== function _timerOut ends ============
  4082                           
  4083                           
  4084 ;; *************** function _comArr *****************
  4085 ;; Defined at:
  4086 ;;		line 52 in file "ms82_eeprom.c"
  4087 ;; Parameters:    Size  Location     Type
  4088 ;;  arr1            1    wreg     PTR unsigned char 
  4089 ;;		 -> keyID(5), 
  4090 ;;  arr2            1    2[COMMON] PTR unsigned char 
  4091 ;;		 -> buffTag(25), 
  4092 ;;  len1            1    3[COMMON] unsigned char 
  4093 ;;  len2            1    4[COMMON] unsigned char 
  4094 ;; Auto vars:     Size  Location     Type
  4095 ;;  arr1            1    8[COMMON] PTR unsigned char 
  4096 ;;		 -> keyID(5), 
  4097 ;;  i               1    9[COMMON] unsigned char 
  4098 ;; Return value:  Size  Location     Type
  4099 ;;                  1    wreg      unsigned char 
  4100 ;; Registers used:
  4101 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4102 ;; Tracked objects:
  4103 ;;		On entry : 20/0
  4104 ;;		On exit  : 20/0
  4105 ;;		Unchanged: FFEDF/0
  4106 ;; Data sizes:     COMMON   BANK0   BANK1
  4107 ;;      Params:         3       0       0
  4108 ;;      Locals:         2       0       0
  4109 ;;      Temps:          3       0       0
  4110 ;;      Totals:         8       0       0
  4111 ;;Total ram usage:        8 bytes
  4112 ;; Hardware stack levels used:    1
  4113 ;; Hardware stack levels required when called:    1
  4114 ;; This function calls:
  4115 ;;		Nothing
  4116 ;; This function is called by:
  4117 ;;		_id_search
  4118 ;; This function uses a non-reentrant model
  4119 ;;
  4120  04C8                     _comArr:	
  4121                           
  4122                           ; Regs used in _comArr: [wreg-fsr0h+status,2+status,0]
  4123                           ;comArr@arr1 stored from wreg
  4124  04C8  00F8               	movwf	comArr@arr1
  4125                           
  4126                           ;ms82_eeprom.c: 53: unsigned char i;
  4127                           ;ms82_eeprom.c: 55: if(len1!=len2)
  4128  04C9  0873               	movf	comArr@len1,w
  4129  04CA  0674               	xorwf	comArr@len2,w
  4130  04CB  1D03               	btfss	3,2
  4131                           
  4132                           ;ms82_eeprom.c: 56: return 0;
  4133  04CC  3400               	retlw	0
  4134                           
  4135                           ;ms82_eeprom.c: 57: else{
  4136                           ;ms82_eeprom.c: 58: for(i=0;i<len1;i++){
  4137  04CD  01F9               	clrf	comArr@i
  4138  04CE                     l7019:	
  4139  04CE  0873               	movf	comArr@len1,w
  4140  04CF  0279               	subwf	comArr@i,w
  4141                           
  4142                           ;ms82_eeprom.c: 59: if(*(arr1+i) != *(arr2+i)){
  4143  04D0  0879               	movf	comArr@i,w
  4144  04D1  1803               	btfsc	3,0
  4145  04D2  2CE3               	goto	L10
  4146  04D3  0772               	addwf	comArr@arr2,w
  4147  04D4  00F5               	movwf	??_comArr
  4148  04D5  0084               	movwf	4
  4149  04D6  1383               	bcf	3,7	;select IRP bank0
  4150  04D7  0800               	movf	0,w
  4151  04D8  00F6               	movwf	??_comArr+1
  4152  04D9  0879               	movf	comArr@i,w
  4153  04DA  0778               	addwf	comArr@arr1,w
  4154  04DB  00F7               	movwf	??_comArr+2
  4155  04DC  0084               	movwf	4
  4156  04DD  0800               	movf	0,w
  4157  04DE  0676               	xorwf	??_comArr+1,w
  4158  04DF  1D03               	btfss	3,2
  4159  04E0  3400               	retlw	0
  4160  04E1  0AF9               	incf	comArr@i,f
  4161  04E2  2CCE               	goto	l7019
  4162  04E3                     L10:	
  4163                           ;ms82_eeprom.c: 61: }
  4164                           ;ms82_eeprom.c: 62: }
  4165                           ;ms82_eeprom.c: 63: if(i==len1)
  4166                           
  4167  04E3  0673               	xorwf	comArr@len1,w
  4168  04E4  1903               	btfsc	3,2
  4169                           
  4170                           ;ms82_eeprom.c: 64: return 1;
  4171  04E5  3401               	retlw	1
  4172  04E6  3400               	retlw	0
  4173  04E7                     __end_of_comArr:	
  4174                           
  4175                           	psect	text580
  4176  0610                     __ptext580:	
  4177 ;; =============== function _comArr ends ============
  4178                           
  4179                           
  4180 ;; *************** function _eepromReadByte *****************
  4181 ;; Defined at:
  4182 ;;		line 7 in file "ms82_eeprom.c"
  4183 ;; Parameters:    Size  Location     Type
  4184 ;;  EEAddr          1    wreg     unsigned char 
  4185 ;; Auto vars:     Size  Location     Type
  4186 ;;  EEAddr          1    2[COMMON] unsigned char 
  4187 ;;  ReEepromData    1    3[COMMON] unsigned char 
  4188 ;; Return value:  Size  Location     Type
  4189 ;;                  1    wreg      unsigned char 
  4190 ;; Registers used:
  4191 ;;		wreg
  4192 ;; Tracked objects:
  4193 ;;		On entry : 0/20
  4194 ;;		On exit  : 20/20
  4195 ;;		Unchanged: FFFDF/0
  4196 ;; Data sizes:     COMMON   BANK0   BANK1
  4197 ;;      Params:         0       0       0
  4198 ;;      Locals:         2       0       0
  4199 ;;      Temps:          0       0       0
  4200 ;;      Totals:         2       0       0
  4201 ;;Total ram usage:        2 bytes
  4202 ;; Hardware stack levels used:    1
  4203 ;; Hardware stack levels required when called:    1
  4204 ;; This function calls:
  4205 ;;		Nothing
  4206 ;; This function is called by:
  4207 ;;		_eepromReadBlock
  4208 ;;		_main
  4209 ;; This function uses a non-reentrant model
  4210 ;;
  4211  0610                     _eepromReadByte:	
  4212                           
  4213                           ; Regs used in _eepromReadByte: [wreg]
  4214                           ;eepromReadByte@EEAddr stored from wreg
  4215  0610  00F2               	movwf	eepromReadByte@EEAddr
  4216                           
  4217                           ;ms82_eeprom.c: 8: unsigned char ReEepromData;
  4218                           ;ms82_eeprom.c: 10: EEADR = EEAddr;
  4219  0611  1683               	bsf	3,5	;RP0=1, select bank1
  4220  0612  009B               	movwf	27	;volatile
  4221                           
  4222                           ;ms82_eeprom.c: 11: RD = 1;
  4223  0613  141C               	bsf	28,0
  4224                           
  4225                           ;ms82_eeprom.c: 12: ReEepromData = EEDAT;
  4226  0614  081A               	movf	26,w	;volatile
  4227  0615  00F3               	movwf	eepromReadByte@ReEepromData
  4228                           
  4229                           ;ms82_eeprom.c: 13: RD = 0;
  4230  0616  101C               	bcf	28,0
  4231                           
  4232                           ;ms82_eeprom.c: 14: return ReEepromData;
  4233  0617  0008               	return
  4234  0618                     __end_of_eepromReadByte:	
  4235                           
  4236                           	psect	text581
  4237  05E3                     __ptext581:	
  4238 ;; =============== function _eepromReadByte ends ============
  4239                           
  4240                           
  4241 ;; *************** function _int_init *****************
  4242 ;; Defined at:
  4243 ;;		line 67 in file "sysinit.c"
  4244 ;; Parameters:    Size  Location     Type
  4245 ;;		None
  4246 ;; Auto vars:     Size  Location     Type
  4247 ;;		None
  4248 ;; Return value:  Size  Location     Type
  4249 ;;		None               void
  4250 ;; Registers used:
  4251 ;;		status,2
  4252 ;; Tracked objects:
  4253 ;;		On entry : 20/20
  4254 ;;		On exit  : 20/20
  4255 ;;		Unchanged: FFFDF/0
  4256 ;; Data sizes:     COMMON   BANK0   BANK1
  4257 ;;      Params:         0       0       0
  4258 ;;      Locals:         0       0       0
  4259 ;;      Temps:          0       0       0
  4260 ;;      Totals:         0       0       0
  4261 ;;Total ram usage:        0 bytes
  4262 ;; Hardware stack levels used:    1
  4263 ;; Hardware stack levels required when called:    1
  4264 ;; This function calls:
  4265 ;;		Nothing
  4266 ;; This function is called by:
  4267 ;;		_main
  4268 ;; This function uses a non-reentrant model
  4269 ;;
  4270  05E3                     _int_init:	
  4271                           
  4272                           ;sysinit.c: 72: INTCON = 0B00000000;
  4273                           
  4274                           ; Regs used in _int_init: [status,2]
  4275  05E3  018B               	clrf	11	;volatile
  4276                           
  4277                           ;sysinit.c: 73: PIE1 = 0B00000000;
  4278  05E4  018C               	clrf	12	;volatile
  4279                           
  4280                           ;sysinit.c: 74: PIR1 = 0B00000000;
  4281  05E5  1283               	bcf	3,5	;RP0=0, select bank0
  4282  05E6  018C               	clrf	12	;volatile
  4283                           
  4284                           ;sysinit.c: 87: T0IF = 0;
  4285  05E7  110B               	bcf	11,2
  4286                           
  4287                           ;sysinit.c: 88: T0IE = 0;
  4288  05E8  128B               	bcf	11,5
  4289                           
  4290                           ;sysinit.c: 92: TMR2IF = 0;
  4291  05E9  108C               	bcf	12,1
  4292                           
  4293                           ;sysinit.c: 93: TMR2IE = 1;
  4294  05EA  1683               	bsf	3,5	;RP0=1, select bank1
  4295  05EB  148C               	bsf	12,1
  4296                           
  4297                           ;sysinit.c: 99: PEIE = 0;
  4298  05EC  130B               	bcf	11,6
  4299                           
  4300                           ;sysinit.c: 101: GIE = 1;
  4301  05ED  178B               	bsf	11,7
  4302  05EE  0008               	return
  4303  05EF                     __end_of_int_init:	
  4304                           
  4305                           	psect	text582
  4306  061F                     __ptext582:	
  4307 ;; =============== function _int_init ends ============
  4308                           
  4309                           
  4310 ;; *************** function _timer_init *****************
  4311 ;; Defined at:
  4312 ;;		line 44 in file "sysinit.c"
  4313 ;; Parameters:    Size  Location     Type
  4314 ;;		None
  4315 ;; Auto vars:     Size  Location     Type
  4316 ;;		None
  4317 ;; Return value:  Size  Location     Type
  4318 ;;		None               void
  4319 ;; Registers used:
  4320 ;;		wreg
  4321 ;; Tracked objects:
  4322 ;;		On entry : 20/20
  4323 ;;		On exit  : 20/20
  4324 ;;		Unchanged: FFFDF/0
  4325 ;; Data sizes:     COMMON   BANK0   BANK1
  4326 ;;      Params:         0       0       0
  4327 ;;      Locals:         0       0       0
  4328 ;;      Temps:          0       0       0
  4329 ;;      Totals:         0       0       0
  4330 ;;Total ram usage:        0 bytes
  4331 ;; Hardware stack levels used:    1
  4332 ;; Hardware stack levels required when called:    1
  4333 ;; This function calls:
  4334 ;;		Nothing
  4335 ;; This function is called by:
  4336 ;;		_main
  4337 ;; This function uses a non-reentrant model
  4338 ;;
  4339  061F                     _timer_init:	
  4340                           
  4341                           ;sysinit.c: 46: OPTION = 0B00000011;
  4342                           
  4343                           ; Regs used in _timer_init: [wreg]
  4344  061F  3003               	movlw	3
  4345  0620  0081               	movwf	1	;volatile
  4346  0621  0008               	return
  4347  0622                     __end_of_timer_init:	
  4348                           
  4349                           	psect	text583
  4350  05BB                     __ptext583:	
  4351 ;; =============== function _timer_init ends ============
  4352                           
  4353                           
  4354 ;; *************** function _gpio_init *****************
  4355 ;; Defined at:
  4356 ;;		line 32 in file "sysinit.c"
  4357 ;; Parameters:    Size  Location     Type
  4358 ;;		None
  4359 ;; Auto vars:     Size  Location     Type
  4360 ;;		None
  4361 ;; Return value:  Size  Location     Type
  4362 ;;		None               void
  4363 ;; Registers used:
  4364 ;;		wreg, status,2
  4365 ;; Tracked objects:
  4366 ;;		On entry : 20/20
  4367 ;;		On exit  : 20/20
  4368 ;;		Unchanged: FFFDF/0
  4369 ;; Data sizes:     COMMON   BANK0   BANK1
  4370 ;;      Params:         0       0       0
  4371 ;;      Locals:         0       0       0
  4372 ;;      Temps:          0       0       0
  4373 ;;      Totals:         0       0       0
  4374 ;;Total ram usage:        0 bytes
  4375 ;; Hardware stack levels used:    1
  4376 ;; Hardware stack levels required when called:    1
  4377 ;; This function calls:
  4378 ;;		Nothing
  4379 ;; This function is called by:
  4380 ;;		_main
  4381 ;; This function uses a non-reentrant model
  4382 ;;
  4383  05BB                     _gpio_init:	
  4384                           
  4385                           ;sysinit.c: 34: PORTA = 0B00000000;
  4386                           
  4387                           ; Regs used in _gpio_init: [wreg+status,2]
  4388  05BB  1283               	bcf	3,5	;RP0=0, select bank0
  4389  05BC  0185               	clrf	5	;volatile
  4390                           
  4391                           ;sysinit.c: 35: TRISA = 0B00110111;
  4392  05BD  3037               	movlw	55
  4393  05BE  1683               	bsf	3,5	;RP0=1, select bank1
  4394  05BF  0085               	movwf	5	;volatile
  4395                           
  4396                           ;sysinit.c: 36: WPUA = 0B10000000;
  4397  05C0  3080               	movlw	128
  4398  05C1  0095               	movwf	21	;volatile
  4399                           
  4400                           ;sysinit.c: 37: PORTC = 0B00000000;
  4401  05C2  1283               	bcf	3,5	;RP0=0, select bank0
  4402  05C3  0187               	clrf	7	;volatile
  4403                           
  4404                           ;sysinit.c: 38: TRISC = 0B11111101;
  4405  05C4  30FD               	movlw	253
  4406  05C5  1683               	bsf	3,5	;RP0=1, select bank1
  4407  05C6  0087               	movwf	7	;volatile
  4408                           
  4409                           ;sysinit.c: 39: WPUC = 0B00000000;
  4410  05C7  0193               	clrf	19	;volatile
  4411  05C8  0008               	return
  4412  05C9                     __end_of_gpio_init:	
  4413                           
  4414                           	psect	text584
  4415  0618                     __ptext584:	
  4416 ;; =============== function _gpio_init ends ============
  4417                           
  4418                           
  4419 ;; *************** function _ISR *****************
  4420 ;; Defined at:
  4421 ;;		line 46 in file "MAIN.C"
  4422 ;; Parameters:    Size  Location     Type
  4423 ;;		None
  4424 ;; Auto vars:     Size  Location     Type
  4425 ;;		None
  4426 ;; Return value:  Size  Location     Type
  4427 ;;		None               void
  4428 ;; Registers used:
  4429 ;;		None
  4430 ;; Tracked objects:
  4431 ;;		On entry : 0/0
  4432 ;;		On exit  : 0/0
  4433 ;;		Unchanged: FFFFF/0
  4434 ;; Data sizes:     COMMON   BANK0   BANK1
  4435 ;;      Params:         0       0       0
  4436 ;;      Locals:         0       0       0
  4437 ;;      Temps:          2       0       0
  4438 ;;      Totals:         2       0       0
  4439 ;;Total ram usage:        2 bytes
  4440 ;; Hardware stack levels used:    1
  4441 ;; This function calls:
  4442 ;;		Nothing
  4443 ;; This function is called by:
  4444 ;;		Interrupt level 1
  4445 ;; This function uses a non-reentrant model
  4446 ;;
  4447  0618                     _ISR:	
  4448  0618  0871               	movf	??_ISR+1,w
  4449  0619  008A               	movwf	10
  4450  061A  0E70               	swapf	??_ISR^(0+-128),w
  4451  061B  0083               	movwf	3
  4452  061C  0EFE               	swapf	126,f
  4453  061D  0E7E               	swapf	126,w
  4454  061E  0009               	retfie
  4455  061F                     __end_of_ISR:	
  4456                           
  4457                           	psect	intentry
  4458  0004                     __pintentry:	
  4459                           ; Regs used in _ISR: []
  4460                           
  4461  0004                     interrupt_function:	
  4462  007E                     saved_w	set	btemp
  4463  0004  00FE               	movwf	btemp
  4464  0005  0E03               	swapf	3,w
  4465  0006  00F0               	movwf	??_ISR
  4466  0007  080A               	movf	10,w
  4467  0008  00F1               	movwf	??_ISR+1
  4468  0009  2E18               	ljmp	_ISR
  4469                           
  4470                           	psect	text585
  4471  0000                     __ptext585:	
  4472 ;; =============== function _ISR ends ============
  4473                           
  4474  007E                     btemp	set	126	;btemp
  4475  007E                     wtemp0	set	126


HI-TECH Software PICC Macro Assembler V9.83 build 10920 
Symbol Table                                                                                   Fri May 15 18:47:15 2020

                         pc 0002              ___bmul@product 0073                          _RD 04E0  
                        _WR 04E8                          fsr 0004         ___wmul@multiplicand 0074  
                       _C1R 08CA                         _C2R 08D2                         l790 0000  
                       l793 0000                         l787 060C                         l796 0000  
                       l799 0000                         _GIE 005F                         _RA3 002B  
                       _RC1 0039                         _RA5 002D                         _RA6 002E  
                       _HTS 047A                         _ISR 0618                         _SR0 0CF6  
                       _SR1 0CF7                         _VR0 08C0                         _VR1 08C1  
                       _VR2 08C2                         _VR3 08C3                         _VRR 08C5  
                       fsr0 0004                         indf 0000            get_RFID@even_col 004A  
          get_RFID@even_row 004B                 main@idState 0059                        S7787 0600  
                      ?_ISR 0070                        _C1OE 08CD                        l1600 045B  
                      l1603 0000                        _C2OE 08D5                        _C1ON 08CF  
                      l1609 0000                        l4130 03E8                        l4140 0000  
                      l4132 03FC                        _C2ON 08D7                        l4125 0000  
                      l4134 0000                        l4230 021E                        l4222 01DC  
                      l4214 01B6                        l5031 042F                        l5033 0000  
                      l4225 020E                        l1594 0000                        l5050 0000  
                      l2459 026E                        l1588 0000                        l1597 044C  
                      l4149 0000                        l4157 0000                        l3294 04A1  
                      l2478 02BA                        l5039 0000                        l4191 0194  
                      l3296 04A6                        l7001 0000                        l3297 0000  
                      l2499 031A                        l4188 00E4                        l7111 0545  
                      l7033 0000                        l7113 0000                        l7105 0000  
                      l7121 0000                        l7019 04CE                        l7043 0000  
                      l7051 04AE                        l7035 0000                        l7115 0000  
                      l7107 053D                        l7131 0000                        l7123 0000  
                      l7203 0276                        l7053 04C3                        l7045 0000  
                      l7037 0000                        l7061 0000                        l7125 0000  
                      l7141 0539                        l7205 0000                        l7039 0000  
                      l7071 0000                        l7063 0000                        l7135 0000  
                      l7127 0526                        l7303 02F5                        l7231 0000  
                      l7223 0000                        l7215 0285                        l7081 0000  
                      l7073 0000                        l7065 0000                        l7057 0000  
                      l7145 0000                        l7153 0000                        l7161 0000  
                      l7321 0000                        l7313 0306                        l7305 0000  
                      l7241 02AF                        l7217 0000                        l7233 029C  
                      l5722 0000                        l7075 0000                        l7067 0000  
                      l7059 0000                        l7083 0000                        l7091 05AF  
                      l7139 0000                        l7147 0000                        l7155 057F  
                      l7163 0000                        l7331 0000                        l7315 0000  
                      l7307 0000                        l7251 0000                        l7243 0000  
                      l7219 028E                        l7171 0000                        l7411 0000  
                      l7403 0508                        l5716 0000                        l7077 0000  
                      l7069 0000                        l7085 0000                        l7149 0000  
                      l7165 0460                        l7157 0000                        l7341 0328  
                      l7317 030F                        l7309 02FC                        l7245 0000  
                      l7237 02A6                        l7253 02BE                        l7229 0299  
                      l7261 0271                        l7173 0253                        l7421 0000  
                      l7501 0000                        l7079 0000                        l7087 0000  
                      l7167 0000                        l7159 0450                        l7351 0332  
                      l7343 0000                        l7327 0000                        l7319 0000  
                      l7263 02C9                        l7255 0000                        l7239 0000  
                      l7191 0000                        l7183 0000                        l7175 0000  
                      l7431 0000                        l7503 047D                        l7511 0000  
                      l5752 0000                        l7097 0000                        l7089 0000  
                      l7353 0000                        l7345 0000                        l7329 031D  
                      l7257 02C3                        l7169 0000                        l7433 0000  
                      l7417 0000                        l7441 056D                        l7601 0000  
                      l7521 0000                        l7513 0000                        l7505 0000  
                      l7099 0000                        l7371 036E                        l7363 0000  
                      l7355 0000                        l7291 0000                        l7275 02CD  
                      l7195 0000                        l7427 0000                        l7419 0000  
                      l7435 0000                        l7451 03D7                        l7443 0000  
                      l7603 0000                        l7523 0000                        l7515 0000  
                      l7507 0000                        l5749 052C                        l7373 0000  
                      l7293 02EA                        l7277 0000                        l7429 0000  
                      l7453 0000                        l7461 0000                        l7701 01C4  
                      l7621 0000                        l7605 0000                        l7533 002D  
                      l7525 0000                        l7517 0000                        l7509 0000  
                      l7375 0000                        l7367 0364                        l7279 0000  
                      l7391 0000                        l7439 0000                        l7471 0000  
                      l7463 0000                        l7711 0000                        l7703 01CA  
                      l7623 0000                        l7607 0000                        l7543 0000  
                      l7519 0000                        l7377 0000                        l7369 0000  
                      l7297 0000                        l7289 02E1                        l7449 0000  
                      l7457 0000                        l7473 0000                        l7721 0000  
                      l7713 0000                        l7705 01D0                        l7633 0000  
                      l7625 0000                        l7617 0112                        l7609 00FE  
                      l7561 0000                        l7545 0000                        l7537 0044  
                      l7529 0025                        l7379 0000                        l7395 058F  
                      l7459 05D7                        l7475 0000                        l7491 0000  
                      l7483 0000                        l7731 020F                        l7651 014C  
                      l7635 0000                        l7627 0123                        l7619 0000  
                      l7571 00A8                        l7563 0000                        l7555 0072  
                      l7539 0000                        l7397 0000                        l7493 0000  
                      l7485 0000                        l7741 0000                        l7717 0000  
                      l7709 0000                        l7725 01FA                        l7661 0000  
                      l7645 0000                        l7637 0000                        l7629 0000  
                      l7581 0000                        l7573 00AA                        l7557 008B  
                      l7565 009A                        l7495 0000                        l7487 0000  
                      l7743 0236                        l7735 0000                        l7719 01F0  
                      l7727 0208                        l7663 0000                        l7647 0000  
                      l7639 0137                        l7583 0000                        l7575 0000  
                      l7559 0000                        l7567 009F                        l7489 0000  
                      l7497 0000                        l7745 023B                        l7737 021A  
                      l7673 0000                        l7681 0184                        l7657 0000  
                      l7665 0165                        l7649 0000                        l7585 0000  
                      l7577 0000                        l6971 0000                        l7747 023E  
                      l7667 016A                        l7595 00D3                        l7587 00C3  
                      l7579 0000                        l7691 01A5                        l6973 0000  
                      l6981 0000                        l7749 024B                        l7693 0000  
                      l7677 0000                        l7685 0189                        l6975 0000  
                      l6967 0000                        l6991 0000                        l6983 0000  
                      l7687 0000                        l7679 0000                        l7599 00ED  
                      l6969 0000                        l6977 0000                        l6985 0000  
                      l6993 0000                        l6987 0000                        l6979 0000  
                      l6995 0000                        l6989 0000                        l6997 0000  
                      _EEIF 0067                        _ANS0 08F0                        STR_1 05CF  
                      _ANS1 08F1                        _ANS2 08F2                        _ANS3 08F3  
                      _ANS4 08F4                        _ANS5 08F5                        _ANS6 08F6  
                      _ANS7 08F7                        _ANS8 08F8                        _ANS9 08F9  
                      _P1OE 0090                        _T0IE 005D                        _T0IF 005A  
                      u1215 04BE                        _T0ON 00FB                        _IOCB 0116  
                      u2245 01C1                        u2407 043A                        u2417 0446  
                      u2337 019F                        u2427 0598                        u2347 01B0  
                      u1724 033B                        u1820 0434                        u2437 0464  
                      u1725 0339                        u2357 0231                        u2367 0238  
                      _PIE1 008C                        u2377 0244                        u1834 0436  
                      u2387 03F8                        u2397 042B                        _PEIE 005E  
                      _PR2H 0092                        _PR2L 0091                        _PIR1 000C  
                      _TMR0 0001                        _STRA 0CE8                        _STRB 0CE9  
                      _STRC 0CEA                        _STRD 0CEB                        _WREN 0C62  
                      _WPUA 0095                        _WPUB 0115                        _WPUC 0093  
                      _beep 03D5                        _main 000B                        btemp 007E  
                      start 000A           ___bmul@multiplier 0074                       ??_ISR 0070  
           __end_of_SendNum 0426                       _C1CH0 08C8                       _C1CH1 08C9  
                     _C2CH0 08D0                       _C2CH1 08D1                       ?_beep 0078  
                     _C1SEN 0CF5                       _C2REN 0CF4                       _C1POL 08CC  
                     _C2POL 08D4                       _C1OUT 08CE                       _C2OUT 08D6  
                     ?_main 0070             __end_of___lbdiv 053B                       _EEADR 009B  
                     _EEDAT 009A                       _ANS10 08FA                       _ANS11 08FB  
                     _P1CON 0016                       _EEPGD 0C67                       _ANSEL 011E  
                     _P1POL 0099                       _IOCB4 08B4                       _IOCB5 08B5  
                     _IOCB6 08B6                       _IOCB7 08B7                       _T1GSS 08D9  
                     _VP6EN 08C4                       _TMR2H 0013                       _TMR2L 0011  
                     _PORTA 0005                       _PORTC 0007                       _SRCON 019E  
                     _PULSR 0CF2                       _PULSS 0CF3                       _TRISA 0085  
                     _TRISC 0087                       _VRCON 0118                       _WPUB4 08AC  
                     _WPUB5 08AD                       _WPUB6 08AE                       _WPUB7 08AF  
  __size_of_eepromReadBlock 0011                       beep@t 003E                       _keyID 0062  
          ??_swUartSendByte 0072                       main@t 0055                       pclath 000A  
                     status 0003                       wtemp0 007E             ___lbdiv@divisor 0072  
           ___lbdiv@counter 0074        __size_of_delay_x10ms 0010            ??_eepromReadByte 0072  
                SendNum@nib 007A                  SendNum@num 0079            _eepromWriteBlock 056B  
              __end_of_beep 0400                __end_of_main 0250    __end_of_swUartSendString 05E3  
                    ??_beep 0079                      ??_main 0052            eepromReadBlock@i 0078  
                    _C1VREN 08C7                      _C2VREN 08C6                      _C2SYNC 08D8  
                    _EEADRH 010F                      _EEDATH 010E                      _EECON1 009C  
                    _P1ADTH 0014    __size_of_eepromWriteByte 0021                      _P1ADTL 000E  
                    _ANSELH 011F                      _MC1OUT 08DF                      _MC2OUT 08DE  
                    _T2CON0 0012                      _T2CON1 009E                      i1l4137 0000  
                    _INTCON 000B                      _OSCCON 008F                      _TMR2IE 0461  
                    _TMR2IF 0061                      _OPTION 0081                      _TMR2ON 0092  
              ?_SET_EPWM_ON 0070            __end_of_get_RFID 0388            __end_of_id_clear 048A  
                 ??_SendNum 0075          get_RFID@timeOutVal 004F                      ___bmul 05AD  
                    ___wmul 053B                   ??___lbdiv 0073                      _comArr 04C8  
          __end_of_int_init 05EF                      main@t1 0057            __end_of_setState 05F9  
                    saved_w 007E            __end_of_timerOut 04C8         eepromReadBlock@buff 0074  
          ___lbdiv@dividend 0073            __end_of_sys_init 0610           ??_eepromReadBlock 0076  
       ___bmul@multiplicand 0072              __pcstackCOMMON 0070                __pidataBANK0 04E7  
          ___lbdiv@quotient 0075          __size_of_id_search 001B                  __pbssBANK0 005C  
        __size_of_gpio_init 000E           ??_eepromWriteByte 0073                  __pmaintext 000B  
                   ?___bmul 0072                     ?___wmul 0072                     ?_comArr 0072  
                __pintentry 0004                     _CM1CON0 0119                     _CM2CON0 011A  
                   _CM2CON1 011B                  _id_replate 039A                   ?_get_RFID 0070  
                 ?_id_clear 0042    __end_of_eepromWriteBlock 057D                     _PSTRCON 019D  
                   _STRSYNC 0CEC                   ?_int_init 0070    get_RFID@RF_serial_55bits 003E  
                   _PwInNum 0060           __end_of_id_search 0520                 setState@stt 0074  
                   _SendNum 0400        __size_of_SET_EPWM_ON 001F                   ?_setState 0072  
                 ?_timerOut 0072             __size_of___bmul 000E                     ___lbdiv 0520  
           __size_of___wmul 0019             __size_of_comArr 001F                     _buffTag 0025  
                   beep@rep 0078           __end_of_gpio_init 05C9                   ?_sys_init 0070  
         ?_swUartSendString 0070                __size_of_ISR 0007                     _mtState 0061  
        ??_swUartSendString 0075                     comArr@i 0079                  ??_get_RFID 0077  
                ??_id_clear 007C                     _timeOut 005C                  comArr@arr1 0078  
                comArr@arr2 0072                  comArr@len1 0073                  comArr@len2 0074  
                   main@tmp 005B        end_of_initialization 0569               ??_delay_x10ms 0072  
                   init_ram 05A2                  get_RFID@ii 0051                  ??_int_init 0072  
                ??_setState 0074         eepromWriteBlock@len 0077                  ??_timerOut 0074  
     get_RFID@flag_RFID_syn 0049                  id_search@i 003F                  _timer_init 061F  
               ?_id_replate 003E                  ??_sys_init 0072             _eepromReadBlock 057D  
                main@buzFre 0058     __size_of_swUartSendByte 0024         __end_of_delay_x10ms 059E  
            __end_of___bmul 05BB              __end_of___wmul 0554              __end_of_comArr 04E7  
   __size_of_eepromReadByte 0008        eepromReadByte@EEAddr 0072         start_initialization 0554  
               __end_of_ISR 061F             _eepromWriteByte 044A               setState@_tOut 0072  
eepromReadByte@ReEepromData 0073         __size_of_id_replate 0034                    ??___bmul 0073  
                  ??___wmul 0076                    ??_comArr 0075                 __pdataBANK0 0020  
             id_clear@F1108 0020     __end_of_eepromReadBlock 058E                 ?_timer_init 0070  
        eepromReadBlock@len 0075               __pcstackBANK0 003E               id_clear@idMax 0042  
             id_clear@idMin 0048           ?_eepromWriteBlock 0076           __size_of_get_RFID 0138  
         __size_of_id_clear 001F          ??_eepromWriteBlock 0078                 _delay_x10ms 058E  
                  ?_SendNum 0070           __size_of_int_init 000C                    ?___lbdiv 0072  
         __size_of_setState 000A                   __ptext560 046B                   __ptext561 039A  
                 __ptext570 044A                   __ptext562 0400                   __ptext571 057D  
                 __ptext563 05D6                   __ptext580 0610                   __ptext572 0608  
                 __ptext564 03D5                   __ptext581 05E3                   __ptext573 0520  
                 __ptext565 056B                   __ptext582 061F                   __ptext574 053B  
                 __ptext566 0426                   __ptext583 05BB                   __ptext575 05AD  
                 __ptext567 0505                   __ptext584 0618                   __ptext576 05EF  
                 __ptext568 058E                   __ptext585 0000                   __ptext577 048A  
                 __ptext569 0250                   __ptext578 04A9                   __ptext579 04C8  
                 _id_search 0505                   beep@delay 0040                _SendNum$5067 0075  
              _SendNum$5068 0077           __size_of_timerOut 001F                   __pstrings 05C9  
                 __pswtext1 0600     __end_of_eepromWriteByte 046B           __size_of_sys_init 0008  
                 _gpio_init 05BB   __size_of_swUartSendString 000D           interrupt_function 0004  
             ??_SET_EPWM_ON 0072              ___wmul@product 0076         __size_of_timer_init 0003  
                 get_RFID@i 004D                   get_RFID@j 004C              _swUartSendByte 0426  
                ?_id_search 007A                delay_x10ms@t 0074            timerOut@CurTimer 0075  
            _eepromReadByte 0610            ?_eepromReadBlock 0074                ??_id_replate 0040  
               __stringbase 05CE           ___wmul@multiplier 0072                  ?_gpio_init 0070  
    __end_of_swUartSendByte 044A          __end_of_id_replate 03CE            __size_of_SendNum 0026  
                 init_fetch 059E         __end_of_SET_EPWM_ON 04A9              id_replate@Cont 003E  
    __end_of_eepromReadByte 0618            __size_of___lbdiv 001B              id_replate@buff 003F  
         id_search@id_input 003E            ?_eepromWriteByte 0072     eepromReadBlock@addStart 0077  
                  _get_RFID 0250                    _id_clear 046B               __size_of_beep 002B  
           ?_swUartSendByte 0070               __size_of_main 0245                    _int_init 05E3  
             id_search@buff 007A                    _setState 05EF           eepromWriteBlock@i 007A  
                  _timeTick 005E                    _timerOut 04A9                 ??_id_search 007B  
           ?_eepromReadByte 0070                    main@idop 005A                ??_timer_init 0072  
                  _sys_init 0608    eepromWriteBlock@addStart 0079                 ??_gpio_init 0072  
               id_clear@tmp 0043                    intlevel1 0000            _swUartSendString 05D6  
              ?_delay_x10ms 0070                 _SET_EPWM_ON 048A          __end_of_timer_init 0622  
                 stringcode 05C9        eepromWriteBlock@buff 0076   __size_of_eepromWriteBlock 0012  
     eepromWriteByte@EEAddr 0075       eepromWriteByte@EEData 0072      get_RFID@flag_RFID_last 004E  
         swUartSendByte@dat 0073                id_replate@id 007B         swUartSendString@str 0075  
                  stringdir 05C9                    stringtab 05C9               timerOut@Logic 0074  
           swUartSendByte@i 0074                timerOut@time 0072  
